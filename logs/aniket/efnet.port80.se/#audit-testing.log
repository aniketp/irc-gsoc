[2018-04-24 15:02:14] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-04-24 15:02:14] * efnet.port80.se mode +n
[2018-04-24 15:02:14] * efnet.port80.se mode +t
[2018-04-24 15:22:42] * somers_ (~somers@63-224-81-165.hlrn.qwest.net) join
[2018-04-24 22:58:37] <aniketp41> Hi Alan, am I supposed to get an email with FreeBSD for mailing list communication? The page here mentioned setting up the Project Wiki and Self page along with FreeBSD email address. https://wiki.freebsd.org/SummerOfCodeStudentChecklist
[2018-04-25 05:26:45] * somers__ (~somers@63-224-81-204.hlrn.qwest.net) join
[2018-04-25 05:28:39] * somers_ (~somers@63-224-81-165.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-25 05:30:06] <aniketp41> Hi Alan, did you see the previous message before ping timeout?
[2018-04-25 19:22:29] <aniketp41> ping @somers__ 
[2018-04-25 19:24:26] <somers__> I don't know what you're "supposed" to get
[2018-04-25 19:24:29] <somers__> what are you expecting?
[2018-04-25 19:25:09] <somers__> BTW aniketp41, if you want to get my attention on IRC, you should mention my nick.  I sit in some high traffic rooms, so my client doesn't alert me unless my nick gets mentioned
[2018-04-25 20:25:21] <aniketp41> somers__ The checklist page mentioned about a username for SVN SummerOfCode repository which would also be used as the email, so I wonmdered if is it provided or would I need to create one for myself?
[2018-04-25 20:25:21] <aniketp41> Also, I have created a WikiPage "AniketPandey" and the page says to ask a FreeBSD developer to include my account in the Contributer's Group. So I was wondering if you could do that..
[2018-04-25 21:48:42] <aniketp41> ping somers__
[2018-04-25 22:02:48] <somers__> Ahh, to get your SVN account you'll have to email soc-admins@freebsd.org, as detailed at https://wiki.freebsd.org/SummerOfCodeSubversion
[2018-04-25 22:03:21] <somers__> Tell them you'll need a branch of the src tree
[2018-04-25 22:05:07] <somers__> Where is your "AniketPandey" wiki page?  I can't find it.
[2018-04-25 22:06:20] <aniketp41> Oh, guess it isn't created yet. I created my account but I can't create my page as I don't have the edit access.
[2018-04-25 22:08:40] <somers__> Ok, try again
[2018-04-25 22:32:33] <aniketp41> Thanks somers__ ! I created a basic page and would keep it updated throughout the project
[2018-04-25 22:32:33] <aniketp41> https://wiki.freebsd.org/AniketPandey
[2018-04-25 22:43:28] <aniketp41> Btw @somers__ , Would you advise on testing auditdistd(8) as well? A contributer Mateusz Piotrowski emailed me asking about it.
[2018-04-26 03:11:32] <somers__> aniketp41 I would consider auditdistd to be a stretch goal.  Testing the auditing itself is more important.
[2018-04-26 15:14:58] * somers__ (~somers@63-224-81-204.hlrn.qwest.net) quit Remote host closed the connection
[2018-04-26 16:07:57] * somers (~somers@2602:3f:e051:cc00:e23f:49ff:fe44:d7b6) join
[2018-04-26 23:07:07] * somers_ (~somers@63-224-81-240.hlrn.qwest.net) join
[2018-04-26 23:08:35] * somers (~somers@2602:3f:e051:cc00:e23f:49ff:fe44:d7b6) quit Ping timeout: 252 seconds
[2018-04-27 00:40:28] <aniketp41> Hi @somers_, Does your work at Spectra involve FreeBSD? I was just curious. As I've noticed that quite a few FreeBSD devs contribute to it as a part-time hobby, while others use it at work. 
[2018-04-27 13:08:39] * somers__ (~somers@63-224-80-23.hlrn.qwest.net) join
[2018-04-27 13:09:14] <somers__> Yeah, Spectra's products run on FreeBSD
[2018-04-27 13:10:49] * somers_ (~somers@63-224-81-240.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-27 16:15:36] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) join
[2018-04-27 16:17:49] * somers__ (~somers@63-224-80-23.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-29 13:36:29] <aniketp41> Hi @somers_, I mailed the soc-admins about getting a subversion account and a branch in socsvn repository. Also, my semester exams ended today so I'll regularly update you on my work from now on
[2018-04-29 13:39:32] * rwatson (robert@fledge.watson.org) join
[2018-04-29 14:04:21] <somers_> cool
[2018-04-29 14:47:36] <aniketp41> Btw @somers_, how much time does it take to "buildworld" the freebsd kernel by a single job? I was trying to build my tests by compiling the "/usr/src" and its been running for the last 10 minutes..
[2018-04-29 14:48:25] <aniketp41> Although I later realized that the guide here https://www.freebsd.org/doc/handbook/makeworld.html recommended four jobs (-j4)
[2018-04-29 14:48:38] <somers_> Depends on what kind of machine you have.  "buildworld" can take anywhere from 10 minutes to 2.5 hours on typical hardware
[2018-04-29 14:49:00] <somers_> But once you've built it once, you can do "make -DNO_CLEAN buildworld" on subsequent invocations
[2018-04-29 14:51:30] <somers_> The number of jobs should be at least equal to the number of CPU cores.  If you're I/O is slow, then use up to 2x number of cores for your job number
[2018-04-29 14:51:33] <aniketp41> I created a separate VM for specifically this task and it does not have very good specs. so by what you said it might take a long time
[2018-04-29 14:51:39] <somers_> Is your source directory mounted over NFS?
[2018-04-29 14:52:46] <aniketp41> No it is simple UFS
[2018-04-29 14:53:24] <somers_> Ok, that's fine then.  Just give your VM as much CPU and RAM as you can, set the jobs number appropriately, and wait.
[2018-04-29 15:04:37] <aniketp41> Wow, it's building quite fast, my main machine had 8 cores and 16 gigs of ram which allowed me to allocate 4 cores and about 10 gigs to my VM. With 8 jobs it's doing well!
[2018-04-29 15:05:04] <somers_> cool!  What kind of storage does it have?
[2018-04-29 15:09:43] <aniketp41> I think its HDD, although the Virtualbox showed an option to have an SSD partition
[2018-04-29 15:10:07] <somers_> What's important is the physical device, not how VirtualBox displays it
[2018-04-29 15:10:20] <aniketp41> Though my main machine has 256 gigs SSD
[2018-04-29 15:10:52] <somers_> If you have SSD storage and 4 cores, then 8 build jobs is too many.  Just use 5-6
[2018-04-29 15:15:56] <aniketp41> Okay, I'll keep it in mind the next time I try building the kernel
[2018-04-29 15:53:04] <aniketp41> So it took 46 minutes approx to buildworld. Now doing buildkernel with 6 jobs now
[2018-04-30 00:36:54] <aniketp41> Hi @somers_, I was reading about non-blocking sockets for testing network APIs as you suggested in a previous mail. But I couldn't come up with any idea about how this would help me in writing the test program. For instance, to have all system calls in one place, I'll need to have both client and server running in the single program, but how would using non-blocking socket help me? AFAIK it would just prevent accept(2), recv(2) from blocking the connection. 
[2018-04-30 00:42:38] <aniketp41> I also had another idea about the approach that I might follow. Till now I've been testing the file-create/read audit_events independently, so what if I use the same approach for network system calls that don't need a client (or a server, the other way), like socket(2), bind(2), setsockopt(2), listen(2) etc. Once I've confirmed their audit, I can simply close the socket as I don't really need a connection here.
[2018-04-30 00:42:38] <aniketp41> As for syscalls like accept(2), connect(2), send(2), recv(2) etc, that need a connection, I can have a separate binary which I can execute using system(3) and them call the syscall from my kyua test-case, and finally poll into auditpipe(4) to check if that particular syscall is audited or not? This approach is a bit weird since I will need external socket-programs, but might actually work! Please provide your inputs for this.. 
[2018-04-30 03:42:12] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-04-30 03:43:37] * somers_ (~somers@63.224.80.107) join
[2018-04-30 03:44:09] * somers_ (~somers@63.224.80.107) quit Remote host closed the connection
[2018-04-30 03:45:41] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) join
[2018-04-30 06:14:38] * somers__ (~somers@63-224-80-93.hlrn.qwest.net) join
[2018-04-30 06:16:56] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-30 07:37:37] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) join
[2018-04-30 07:39:47] * somers__ (~somers@63-224-80-93.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-30 13:47:25] <aniketp41> ping @somers_
[2018-04-30 14:08:34] <somers_> I don't think you should use external helper programs
[2018-04-30 14:09:25] <somers_> All of the networking syscalls should be testable using a single thread, with nonblocking sockets
[2018-04-30 14:09:35] <somers_> Is there one in particular that you're having trouble with?
[2018-04-30 14:13:08] <aniketp41> So like if I have a server with non-blocking socket, how would I connect(2) using the client? I'm not sure how I would put the client within the same program.
[2018-04-30 14:15:18] <somers_> The "server" would set its socket to be nonblocking, and call listen.  Then the "client" would set its end to nonblocking, and call connect.  Finally, the "server" would call accept.
[2018-04-30 14:16:09] <somers_> I'm not sure if the connect call would succeed, or return EINPROGRESS.  I think it would succeed as long as the socket is listening.
[2018-04-30 15:26:14] <aniketp41> Hi @somers_, The method you suggested worked. I followed the same pattern, server->listen, client->connect, server->accept and all the basic network APIs were audited
[2018-04-30 15:26:16] <aniketp41> https://pastebin.com/Pp3wBMCV
[2018-04-30 15:26:45] <aniketp41> Please ignore the formatting as I'll improve it in the formal program!
[2018-04-30 15:28:31] <aniketp41> Audit result: https://pastebin.com/g15LQ9gM
[2018-04-30 15:31:03] <aniketp41> But on my Linux main machine it returns EINPROGRESS: Connect error: Operation now in progress
[2018-04-30 16:20:18] <aniketp41> @somers_, would polling be a solution for EINPROGRESS issue here? Although this this did not happen in my FreeBSD machine, but it did in Linux 
[2018-04-30 16:26:53] <aniketp41> Also, @somers_, @rwatson,  I was testing unlink(2) and unlinkat(2) system call which is under "ad": administrative audit_class but the audit was unsuccessful on setting "ad" as the audit flag while on setting the flag as "all", it was successful  
[2018-04-30 16:27:12] <aniketp41> Is "ad" really the audit_class for unlink(at)(2)?
[2018-04-30 16:27:49] <aniketp41> Oh sorry its fd, my mistake!
[2018-04-30 18:13:46] <aniketp41> ping @somers_
[2018-04-30 18:27:30] <somers_> Yes?
[2018-04-30 18:31:56] <somers_> @aniketp41 in your connect test, it looks like the client is trying to connect to 0.0.0.0:9000.  I'm not even sure what it means to connect to 0.0.0.0.  Your results might be more portable if it connects to 127.0.0.1
[2018-04-30 18:35:36] <somers_> But the error on Linux probably means that the connection attempt is in progress, and you should use select(2) to know when it's complete
[2018-04-30 18:57:13] <aniketp41> Yes @somers_, I think I'll have to change this "server.sin_addr.s_addr = "INADDR_ANY" to "inet_addr("127.0.0.1")"
[2018-04-30 19:03:15] <aniketp41> It might have been trying to connect to all available interfaces (i.e 0.0.0.0)
[2018-05-01 03:19:56] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-05-01 03:20:03] <gnn> aniketp41: Hello.
[2018-05-01 08:28:56] <aniketp41> Hello @gnn, thanks for joining the channel!
[2018-05-01 10:37:03] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-05-01 16:18:52] <aniketp41> Hi @gnn, I'm working in the organization of files in the test-suite as I arranged it as such before I started creating Kyua test-cases. 
[2018-05-01 21:38:02] <aniketp41> Hi @somers_, how did you compile the Kyua test-program that I shared with you once? 
[2018-05-01 21:38:02] <aniketp41> I'm currently having a trouble with linking the <atf-c.h> header with the main program
[2018-05-01 21:38:22] <aniketp41> Here is the link to the error produced https://pastebin.com/La8Wvexh
[2018-05-01 21:39:16] <aniketp41> I tried compiling with the example shown here https://github.com/jmmv/kyua/wiki/Quickstart-atf-c-test#atf_tests2c---test-program-with-multiple-test-cases but it doesn't seem to work
[2018-05-01 21:41:28] <somers_> @aniketp41 I put the program in tests/sys/audit and wrote this to tests/sys/audit/Makefile:
[2018-05-01 21:41:45] <somers_> ESTSDIR=       ${TESTSBASE}/sys/audit
[2018-05-01 21:41:45] <somers_> ATF_TESTS_C+=   mkdir-atf0
[2018-05-01 21:41:45] <somers_> TEST_METADATA.mkdir-atf0+= timeout="30"
[2018-05-01 21:41:45] <somers_> CFLAGS+=        -I${.CURDIR:H:H}
[2018-05-01 21:41:45] <somers_> WARNS?= 6
[2018-05-01 21:41:46] <somers_> .include <bsd.test.mk>
[2018-05-01 21:46:00] <aniketp41> Yes I followed a similar makeshift procedure of putting the tests in /usr/src/sbin/devd/tests and replaced the content of its Makefile to test mkdir-atf0.c instead of client-test.c and it worked.
[2018-05-01 21:46:00] <aniketp41> But now that I'm trying to separate the setup functions in a separate C file so that I can share it with multiple test programs but I'm unable to link it properly. Can you suggest me a way to do so?
[2018-05-01 21:46:20] <aniketp41> Possibly making some modifications to the Makefile?
[2018-05-01 21:48:49] <somers_> So you want to build a single binary from two .c files?  Then you need to specify the SRCS variable.  Take a look at sys/geom/class/eli/Makefile
[2018-05-01 21:49:03] <somers_> err, tests/sys/geom/class/eli/Makefile
[2018-05-01 21:55:24] <aniketp41> @somers_, is there supposed to be a Makefile in the test-suite? I only found a bunch of tests and a Kyuafile.. 
[2018-05-01 21:55:39] <aniketp41> at /usr/tests/sys/geom/class/eli
[2018-05-01 21:55:49] <somers_> I'm talking about the source directory
[2018-05-02 01:51:16] <aniketp41> @somers_, using the Makefile you provided was giving quite a lot of errors which I didn't get before, some of them referenced no extern declaration for non-static global variables, which made sense. But a lot of the other errors should've been a warning (shadowing global scope) unless its too strict. Here is the list: https://pastebin.com/wPAxNJat
[2018-05-02 02:37:41] <aniketp41> Hi @somers_, I made a few changes to remove all the errors, please have a look at the changes and suggest any improvements https://github.com/aniketp/AuditTestSuite/commit/b456c15c7dc2a8728b764f49d8429fbee8fb37f9
[2018-05-02 02:37:46] <somers_> Yeah, those are all errors in your code.
[2018-05-02 02:38:36] <somers_> We should switch from reviewing on Github to using Phabricator, now that you've got a full src tree setup
[2018-05-02 02:38:59] <somers_> https://wiki.freebsd.org/Phabricator
[2018-05-02 02:42:33] <aniketp41> src tree setup in socsvn repository branch? I didn't receive any notification about it..
[2018-05-02 02:43:22] <somers_> Do you have an svn account yet?  You can create the branch yourself if so
[2018-05-02 03:00:22] <aniketp41> I don't think I have an SVN account yet, was waiting for confirmation from the soc-admins. But I had created an account earlier in FreeBSD's Phabricator. i.e https://reviews.freebsd.org/
[2018-05-02 03:40:01] <aniketp41> Btw @somers_, adding SRCS+=filename.c to the above Makefile do the job?
[2018-05-02 03:40:13] <aniketp41> *will adding
[2018-05-02 03:41:45] <somers_> try it and see
[2018-05-02 09:04:11] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) quit Remote host closed the connection
[2018-05-02 09:05:40] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) join
[2018-05-02 12:21:20] <aniketp41> @somers_, @gnn Generally how long does it take to get a reply back from soc-admins@ ? I'm unable to setup my svn work-area as I don't have an account yet!
[2018-05-02 14:08:10] <aniketp41> Hi @somers_, I've been trying to separate the setup functions from main test program and tried to modify the Makefile to include "SRCS+=setup". But from the errors it seems that the test-program is not able to identify the function declaration in setup.h https://pastebin.com/1CyZii70
[2018-05-02 14:08:46] <aniketp41> Here is the directory organisation within usr/src/tests/sys/audit: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 14:16:49] <somers_> you simply forgot to include setup.h in setup.c
[2018-05-02 14:18:48] <aniketp41> Oops, right! Correcting it now
[2018-05-02 14:21:22] <aniketp41> Now it's giving me a bunch of linker errors (same as what I got when I tried independently compiling the tests). Maybe there is an issue with my Makefile, I guess?
[2018-05-02 14:21:22] <aniketp41> Most of the linker error is like this: "undefined reference to `atf_tc_<some-api>"
[2018-05-02 14:22:08] <aniketp41> https://pastebin.com/R7t1JXJw
[2018-05-02 14:23:06] <somers_> Try "SRCS.file-create+=setup" in your Makefile
[2018-05-02 14:26:08] <aniketp41> @somers_, similar error again :/
[2018-05-02 14:26:39] <aniketp41> Is it not able to link to atf-c.h?
[2018-05-02 14:27:06] <somers_> You don't link to header files.  Show me your Makefile and error message
[2018-05-02 14:31:39] <aniketp41> Here is the Makefile: https://github.com/aniketp/AuditTestSuite/blob/restructure/src/Makefile
[2018-05-02 14:31:39] <aniketp41> And the error message after modifying the Makefile: https://pastebin.com/XNABQ9V0
[2018-05-02 14:33:33] <somers_> then try explicitly setting all of SRCS.  "SRCS.file-create=file-create.c setup.c"
[2018-05-02 15:38:45] <gnn> aniketp41: Should be a day or so.
[2018-05-02 15:38:55] <gnn> If more than that email again and cc me again and I'll talk to them.
[2018-05-02 15:39:02] <gnn> They are, as most of us, overworked.
[2018-05-02 16:38:04] <aniketp41> Hi @somers_, I made the change in Makefile, "SRCS.file-create=file-create.c setup.c". The linker issue was gone but it also generated a bunch of new errors. Some of them weirdly pointing to implicit declaration of ATF_TC_* functions. 
[2018-05-02 16:38:04] <aniketp41> Here is the error log: https://pastebin.com/FVBZq4vn
[2018-05-02 16:38:04] <aniketp41> And the code: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 16:39:11] <somers_> You forgot to include atf.h
[2018-05-02 16:41:05] <aniketp41> Ohh, I included it in the wrong file again. It should be in file-create.c instead of setup.c. Thanks!
[2018-05-02 16:47:48] <aniketp41> @somers_, Is it alright that I move all includes in setup.h seeing all the fuss which is being created?
[2018-05-02 16:47:48] <aniketp41> Btw the tests are passing again!
[2018-05-02 16:48:37] <somers_> Header bloat is frowned upon.  In FreeBSD, the convention is for file to #include only what it needs.
[2018-05-02 16:50:23] <aniketp41> Okay then I'll have a careful look at what is needed where and move the includes appropriately..
[2018-05-02 17:07:04] <aniketp41> @somers_, I made the appropriate changes in inclusions: Please have a look the current code: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 17:09:15] <aniketp41> Also, according to the list of audit_events corresponding to audit_class (fc: file-create), I've made basic test-cases for all 12 syscalls in both failure mode. Shall I create a differential once I get my svn account?
[2018-05-02 17:09:15] <aniketp41> Unless you want me to test some other functionalities of "fc" audit_class before I move on to other classes?
[2018-05-02 17:09:36] <aniketp41> *in both failure and success mode
[2018-05-02 17:09:58] <somers_> please do
[2018-05-02 18:21:00] * somers (~somers@63-224-80-52.hlrn.qwest.net) join
[2018-05-02 18:21:59] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-05-02 19:44:46] * somers_ (~somers@63-224-81-246.hlrn.qwest.net) join
[2018-05-02 19:51:12] * somers (~somers@63-224-80-52.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-03 17:59:47] <aniketp41> Hi @somers_, shall I simply add these files to tests/sys/audit (including the Makefile) while creating a differential? I'm working with a fork of https://github.com/freebsd/freebsd
[2018-05-03 18:00:16] <aniketp41> https://github.com/aniketp/AuditTestSuite/tree/master/src
[2018-05-03 19:39:35] <aniketp41> Ping @somers_
[2018-05-03 20:12:42] <somers_> Yeah, you can add files in a differential revision
[2018-05-03 22:09:30] <aniketp41> Hi @somers_, I created a diff here: https://reviews.freebsd.org/D15286. Please have look. And since this is my first review, please do point out if I messed up somewhere!  
[2018-05-04 15:22:40] <aniketp41> @somers_, what should we do about the non-root issue, since auditpipe does not seem to work here?
[2018-05-04 15:23:35] <somers_> Have you seen anything in the docs about auditing as a non-root user?  Presumably you would be restricted to auditing your own events only.
[2018-05-04 15:30:30] <aniketp41> The doc here https://www.freebsd.org/doc/handbook/audit-administration.html#idp69949288 mentions that the audit trails and the auditpipe(4) is available to the group "audit". I was able to pass the tests when I added myself to that group. Apart from that, I couldn't find any way to access audit facility as a normal user..
[2018-05-04 15:37:06] <somers_> Well, you can certainly skip the tests on the basis of group membership
[2018-05-04 15:37:53] <somers_> Actually, the stuff in /var/audit looks like it's available to group audit, but /dev/auditpipe is only available to root
[2018-05-04 15:43:28] <aniketp41> Oh apologies, the tests produced the same results (bad file descriptor) from audit group too, I guess I must've run the tests as root user, that's how it must have passed (I have SSHd into my VM from two windows, one as root, other as a normal user, so might have inverted the test windows :D )
[2018-05-04 15:43:28] <aniketp41> So, for now, shall I skip the tests for non-root users?
[2018-05-04 15:43:55] <aniketp41> Since no group can actually access /dev/auditpipe..
[2018-05-04 15:44:14] <somers_> Yeah.  Just like you do for the mknod test
[2018-05-04 16:27:24] <aniketp41> Hi @somers_, please have a look at the changes, https://reviews.freebsd.org/D15286
[2018-05-04 22:24:07] * somers__ (~somers@63-224-81-22.hlrn.qwest.net) join
[2018-05-04 22:30:45] * somers_ (~somers@63-224-81-246.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-05 13:53:06] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) join
[2018-05-05 13:59:58] * somers__ (~somers@63-224-81-22.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-05 20:11:29] <aniketp41> ping @somers_.
[2018-05-05 22:48:39] <somers_> Hello @aniketp41.  I haven't forgotten about the review
[2018-05-06 23:36:15] <aniketp41> Hi @somers_, I too had the issue of auditpipe(4) not giving any output which resulted in this : "Auditpipe did not return anything within the time limit"
[2018-05-06 23:36:15] <aniketp41> But on doing it again it seemed to work. I figured that was due to auditd(8) not initializing properly
[2018-05-06 23:36:30] <aniketp41> Currently the tests are working on my machine
[2018-05-07 00:31:53] <aniketp41> @somers_, I made the formatting corrections: https://github.com/aniketp/AuditTestSuite/commit/e03991b8d18011615d7c3038926cce86d28dbda4
[2018-05-07 00:31:53] <aniketp41> If these are alright then I'll update the revision?
[2018-05-07 00:32:33] <somers_> auditd doesn't really have anything to do with auditpipe
[2018-05-07 00:33:07] <somers_> maybe there's a race or something
[2018-05-07 00:43:35] <aniketp41> Hmm, weird, the tests were passing for me. The function check_audit() is the heart of this approach and it is called right after triggering the system call we want to audit (as it should be). And since we've already opened "/dev/auditpipe" before the system call, I can't think of a reason auditpipe(4) should miss the syscall trigger. And since we have ATF_REQUIRE check in place, that means the system call was successfully triggered
[2018-05-07 00:43:43] <aniketp41> Unless I'm missing something
[2018-05-07 06:59:23] <rwatson> aniketp41: there's no synchronicity requirement that a syscall only return after the record goes out of the audit pipe, so you might need to insert a short delay after the system call before expecting a record to be emitted from /dev/auditpipe
[2018-05-07 06:59:51] <rwatson> aniketp41: what approach are you using to narrow down the events returned on the audit pipe to try to select only those of interest for capture?
[2018-05-07 09:26:33] <aniketp41> Hi @rwatson, during the initial setup, we've set the local mode preselection parameters to override the system-wide audit mask setting (using this function: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L91) , i.e "file-create (fc)" in our case. That narrows down to the system call of interest.
[2018-05-07 09:26:33] <aniketp41> Next, we ppoll(2) onto the auditpipe(4) with an infinite loop and set the timeout as 5 seconds. Since, it's highly possible that the first audit_event to be emitted from /dev/auditpipe might not be what we want, so for that we have a check in place which passes the test if we get the desired system call else continue the loop, i.e here: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L164
[2018-05-07 09:32:15] <aniketp41> Hello @somers_, is it possible that the code which led to the failure of tests in your case might not be the same as mine? Like, an issue while applying the patch.
[2018-05-07 09:32:15] <aniketp41> Cause I've tried many different situations to run the tests, i.e auditd(8) running, not running, root, not root, various combinations of auditd(8) startup right before starting the tests, SSH into VM, directly from VM. All these scenarios produced expected results.
[2018-05-07 09:32:15] <aniketp41> Also, we eliminated the race condition by the infinite loop so theoretically this should work, right?
[2018-05-07 11:00:18] <rwatson> aniketp41: Are you definitely setting it to audit both successful and failed events?
[2018-05-07 11:00:30] <rwatson> it's been quite a long time since I wrote the audit-pipe code. I might need to refresh my memory.
[2018-05-07 11:05:41] <aniketp41> Yes @rwatson, I'm setting both success and failure bits as the required audit_mask
[2018-05-07 11:05:41] <aniketp41> Here is the snippet: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L145
[2018-05-07 11:06:42] <aniketp41> I used getauclassman(3) as @somers_, suggested, to fetch the audit class mask
[2018-05-07 14:04:14] * somers__ (~somers@63-224-81-231.hlrn.qwest.net) join
[2018-05-07 14:10:32] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-07 14:12:44] <somers__> @aniketp41 I blew away my tests/sys/audit directory, then recreated it with "arc patch D15286".  So I'm using the same code as what's in the review
[2018-05-07 14:16:29] <aniketp41> Its weird, it passes for me no matter how I test it. I remember the only time it misbehaved was when my audit system spewed non-stop audit records in live-auditing mode (I guess that was because of recursive auditing as I has SSHd)
[2018-05-07 14:25:32] <somers__> It doesn't fail for me 100%.  Last night it was failing.  Today it's passing.  That's why I suspect a race somewhere
[2018-05-07 14:27:26] <aniketp41> @somers__, did the tests fail for both cases, i.e auditd(8) already running and not running?
[2018-05-07 14:27:26] <aniketp41> Cause for me the first test-case failed and by the error message it seemed auditd(8) startup was not poll(2)ed at auditpipe.
[2018-05-07 14:27:26] <aniketp41> But then rest 23 test-cases passed without any issue
[2018-05-07 14:28:12] <aniketp41> *The time I had this issue, everything works fine as of now (hopefully)
[2018-05-07 14:42:56] <somers__> I think there's a bug in the audit filtering mechanism.
[2018-05-07 14:43:28] <somers__> If I remove an audit class from `flags` and `naaflags` in /etc/security/auditcontrol, then do `audit -s`, those events still turn up in the audit log
[2018-05-07 14:43:39] <somers__> (Adding classes seems to work; only removing classes does not)
[2018-05-07 15:20:02] <aniketp41> @somers__, I tried doing the same, but for me "audit -s" does not update the flags whether I remove an audit_class or add it. The changes only take effect when I logout of my SSH session and log back in.
[2018-05-07 15:20:02] <aniketp41>  
[2018-05-07 15:23:12] <somers__> weird; it did the same for me.
[2018-05-07 15:25:37] <aniketp41> @rwatson might have an idea about this issue?
[2018-05-07 15:27:38] <aniketp41> Btw @somers__, I added 24 more test cases (open(2) and openat(2) for various combination of O_RDONLY, O_WRONLY, O_RDWR, O_TRUNC) along with O_CREAT (for "fc": audit class) in both success and failure mode: https://pastebin.com/qP5GR4Pj
[2018-05-07 15:27:53] <aniketp41> Code: https://github.com/aniketp/AuditTestSuite/blob/master/src/file-create.c
[2018-05-07 15:27:59] <somers__> cool
[2018-05-07 15:38:22] <aniketp41> Also, @somers__, since various modes of open(2) are categorized within multiple audit_classes , e.g "74:AUE_OPEN_RT:open(2) - read,trunc:fd,fr,fa,fm", would you suggest I test this particular case for all fd, fr, fa, fm classes or just any random audit_class would do?
[2018-05-07 15:39:23] <somers__> I suppose we probably ought to test them all
[2018-05-09 12:33:32] <aniketp41> Hi @somers__, @rwatson, is there any variant of "copyfile(2)" system call? It was mentioned in the audit_event list but i couldn't find any man-page or info about it..
[2018-05-09 12:33:32] <aniketp41> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L411
[2018-05-09 13:12:30] <somers__> copyfile is only for OSX.  And it's not a syscall really, just a library function
[2018-05-09 13:15:12] <aniketp41> Okay, so are the man-page sections different for OSX? Cause afaiu, (2) is only for syscalls in FreeBSD.. 
[2018-05-09 13:15:40] <somers__> I don't know how OSX man pages are organized
[2018-05-09 14:21:07] <rwatson> somers__: there is a copyfile(2) system call in XNU
[2018-05-09 14:21:13] <rwatson> somers__: But there is also a library call
[2018-05-09 14:21:31] <rwatson> somers__: the reason for the system call is server-side copy in some distributed filesystems
[2018-05-09 14:21:37] <rwatson> somers__: e.g., AFP and maybe CIFS?
[2018-05-09 14:22:00] <somers__> I see.  But the library call does the work for local filesystems?
[2018-05-09 14:22:15] <rwatson> somers__: I can never remember. :-) I think so, and also for inter-filesystem copies
[2018-05-09 14:22:26] <rwatson> somers__: it's very .. layered
[2018-05-09 14:22:56] <somers__> In any case, it isn't relevant for Aniket's project
[2018-05-09 14:23:01] <rwatson> indeed.
[2018-05-09 14:23:16] <rwatson> I'd focus on freebsd system calls and freebsd userspace parts such as authentication
[2018-05-09 14:23:25] <rwatson> and, of course, on mechanisms such as audit pipes, preselection, etc.
[2018-05-09 14:23:37] <rwatson> but simply iterating over system calls seems a good and productive activity.
[2018-05-09 14:23:46] <somers__> I agree
[2018-05-09 16:12:34] <aniketp41> Hi @somers__, I created 32 more test cases for "file-read" audit class, (mostly "readlink" and "open") :https://github.com/aniketp/AuditTestSuite/blob/master/src/file-read.c
[2018-05-09 16:12:34] <aniketp41> Also would it be right do define those "fileforaudit" strings in "utils.h" since I'll using them in multiple files? Or shall I leave them as it is?
[2018-05-09 16:13:24] <aniketp41> Quite a lot of test-cases already! https://pastebin.com/014VkGG9
[2018-05-09 17:09:17] <somers__> Isn't "fileforaudit" restricted to utils.c?
[2018-05-09 17:16:24] <aniketp41> Nope it's used in test-cases as the "path" 
[2018-05-09 17:16:49] <aniketp41> So it's used in almost every test-case I've developed till now
[2018-05-09 19:01:18] <aniketp41> Ping @somers__. Is there anything left to do with D15286? I was thinking of opening another differential as know I have more than triple the test-cases. And I guess reviewing them might also take a bit of time..
[2018-05-09 19:01:26] <aniketp41> *now
[2018-05-09 19:01:56] <somers__> We can't commit D15286 until we solve the intermittency bug
[2018-05-09 19:02:39] <somers__> If you understand the bug well enough that you can cause it to fail 100% of the time, then we can commit tests with "atf_expect_fail" statements.  But we can't commit intermittent tests.
[2018-05-09 19:18:08] <aniketp41> So @somers__, in that scenario what should be the best approach for me? Shall I keep adding tests or try to figure out the issue. Do you think it can be resolved without much hassle?
[2018-05-09 19:20:01] <somers__> Well, it seems fairly easy to reproduce.  For me, it seems to happen whenver I boot with the default /etc/security/audit_control.  I can make it go away by adding fc to the flags in audit_control, and the bug does not return when I revert audit_control (even if I do audit -s).
[2018-05-09 19:20:22] <somers__> However, the bug likely lies in the kernel.  Want to learn some kernel programming?
[2018-05-09 19:25:58] <aniketp41> I tried my hands on writing device drivers once, but was quite unsuccessful. I can try but I'm not too sure if I can get it right :D 
[2018-05-09 19:34:23] <aniketp41> @somers__, I set "flags:nt" in audit_control, confirmed that network events were being emitted from auditpipe, rebooted the VM and ran the tests, it seemed to work somehow. 
[2018-05-09 19:35:14] <aniketp41> Btw, what flags did you have in your default audit_control?
[2018-05-09 19:35:51] <somers__> You shouldn't need to set those flags in /etc/security/audit_control, because we're overriding them with AUDITPIPE_SET_PRESELECT_FLAGS
[2018-05-09 19:37:25] <aniketp41> But @somers__, you said that adding "fc" to /etc/security/audit_control seemed to pass the tests for you? So isn't it being affected by the audit_control file? 
[2018-05-09 19:37:35] <somers__> Hm, I wonder if the problem is because you don't do AUDITPIPE_SET_PRESELECT_NAFLAGS
[2018-05-09 19:37:50] <somers__> It is, but it shouldn't be.  That's the bug.
[2018-05-09 19:39:37] <aniketp41> @somers__, I'll try adding "AUDITPIPE_SET_PRESELECT_NAFLAGS" too but at the moment I'm not able to reproduce the bug.. It just happened once a while back but never again. 
[2018-05-09 19:39:55] <somers__> ok.  I'll try it out once you update the review
[2018-05-09 19:50:09] <aniketp41> @somers__, Is it possible that auditpipe(4) does not emit "audit startup" for the very first test-case?
[2018-05-09 19:50:09] <aniketp41> I got this weird issue for the first time: https://pastebin.com/V8caGFww
[2018-05-09 19:50:53] <aniketp41> I had "praudit /dev/auditpipe" running in an other window and it did not output anything for link_failure case, as expected because of that issue
[2018-05-09 19:51:43] <somers__> What's weird about it?  That just means that get_records returned false
[2018-05-09 19:54:07] <aniketp41> That means "audit startup" string was not found in the memstream, so audit startup was not logged right? Or does it signify something else? 
[2018-05-09 19:55:08] <aniketp41> Cause the one time I had an issue was that I got "Poll: auditpipe did not return anything within the time limit" for every system call. 
[2018-05-09 20:26:19] <somers__> Yep
[2018-05-09 20:46:33] <aniketp41> So @somers__, are such kind of errors (which I just got, but it seems to have gone away again) allowed with Kyua philosophy?
[2018-05-09 20:46:33] <aniketp41> Also, I updated the differential: https://reviews.freebsd.org/D15286
[2018-05-09 21:11:30] <somers__> What "Kyua philosophy"?
[2018-05-09 21:15:29] <aniketp41> As in, is the error acceptable?
[2018-05-09 21:35:21] <somers__> It's not ok for a test to intermittenly fail, if that's what you're asking
[2018-05-09 21:38:25] <somers__> I think the NAFLAGS change fixed the tests's intermittency
[2018-05-09 21:48:28] <aniketp41> Quite cool! I'll remove the curly braces and update the diff
[2018-05-09 21:58:20] <aniketp41> @somers__ updated, https://reviews.freebsd.org/D15286
[2018-05-09 22:13:24] <aniketp41> @somers__ how are you able to segregate the tabs and spaces? I have set 8 hard width tab in my IDE but sometimes when I'm editing it on the fly with some other editors I miss the tab requirement..
[2018-05-09 22:13:35] <aniketp41> *between
[2018-05-09 22:13:59] <aniketp41> It's also hard to notice the difference and spot the mistake
[2018-05-09 22:14:33] <somers__> In vim, I used this search string to find errant space indentation: "^\t*  "
[2018-05-09 22:46:40] <aniketp41> @somers__, the tests seemed to work without this line: "SRCS.file-create+= file-create.c"
[2018-05-09 22:47:00] <aniketp41> i.e, it worked with simply: SRCS.file-create+= utils.c
[2018-05-09 22:51:48] <somers__> Makes sense
[2018-05-09 22:57:41] <aniketp41>  Okay I'll update the differential
[2018-05-09 23:00:19] <somers__> I think I figured out why you were getting the errors in check_audit_startup
[2018-05-09 23:00:36] <somers__> It's because the preselect mask wasn't set to include class "ad", which is the class for the "audit startup" messages.
[2018-05-09 23:05:04] <aniketp41> Oh, right! this one -> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L674
[2018-05-09 23:05:15] <somers__> Unfortunately, when I try to include it, I get a reproducible panic:
[2018-05-09 23:05:21] <somers__> panic: Bad tailq NEXT(0xfffff80047450ec8->tqh_last) != NULL
[2018-05-09 23:05:22] <somers__> cpuid = 1
[2018-05-09 23:05:22] <somers__> time = 1525906488
[2018-05-09 23:05:22] <somers__> KDB: stack backtrace:
[2018-05-09 23:05:22] <somers__> db_trace_self_wrapper() at db_trace_self_wrapper+0x2b/frame 0xfffffe00264488a0
[2018-05-09 23:05:22] <somers__> vpanic() at vpanic+0x18d/frame 0xfffffe0026448900
[2018-05-09 23:05:24] <somers__> panic() at panic+0x43/frame 0xfffffe0026448960
[2018-05-09 23:05:26] <somers__> kaudit_to_bsm() at kaudit_to_bsm+0x5265/frame 0xfffffe0026448a10
[2018-05-09 23:05:28] <somers__> audit_worker() at audit_worker+0x30d/frame 0xfffffe0026448a70
[2018-05-09 23:05:30] <somers__> fork_exit() at fork_exit+0x84/frame 0xfffffe0026448ab0
[2018-05-09 23:05:32] <somers__> fork_trampoline() at fork_trampoline+0xe/frame 0xfffffe0026448ab0
[2018-05-09 23:05:42] <somers__> I'll update my VM and try to figure out what's going on.
[2018-05-09 23:06:20] <aniketp41> Are these kernel errors? I haven't seen them before..
[2018-05-09 23:06:31] <aniketp41> Oh I understand now, kernel panic
[2018-05-09 23:08:31] <aniketp41> @somers__, do I need to to add preselection flag as "ad" for audit startup. I guess I can "OR" it with the audit mask I'm passing as the argument
[2018-05-09 23:10:44] <somers__> Yes, that's what I think you should do.
[2018-05-09 23:11:48] <aniketp41> Okay on it! I guess I'll need to tweak the order of the code of "utils.c"
[2018-05-09 23:17:01] <aniketp41> Btw, @somers__, is it allowed to set the local preselection flags once then change them later on in the same program?
[2018-05-09 23:17:01] <aniketp41> Cause I was wondering that if we really need to set "fd" when auditd(8) was already running.. 
[2018-05-09 23:17:17] <aniketp41> *ad
[2018-05-09 23:17:40] <somers__> No, because if auditd(8) is already running, then we don't need to check for auditd startup
[2018-05-09 23:17:47] <somers__> But it won't hurt.
[2018-05-10 12:31:23] <aniketp41> @somers__, I tried what you suggested, taking a bitwise OR of "class" and "ad" and then calling the function "set_preselect_mode" before audit_startup, so that we've basically converted the audit_startup_check to local mode with "fc | ad" flags. 
[2018-05-10 12:31:23] <aniketp41> But it looks like audit of audit_startup doesn't work in local mode. 
[2018-05-10 12:31:23] <aniketp41> i.e here are the changes in two functions: https://pastebin.com/usn7R72U  
[2018-05-10 12:32:46] <aniketp41> This time, the tests pass when auditd(8) is already running but get this: "get_records(auditstring, pipestream) not met" when it needs to be started from out program
[2018-05-10 12:32:55] <aniketp41> *our
[2018-05-10 15:25:35] <somers__> Hey Aniket.  What FreeBSD release are you using?
[2018-05-10 15:25:45] <somers__> ping @aniketp41
[2018-05-10 15:47:01] <aniketp41> uname -a gives: "11.1-RELEASE-p4"
[2018-05-10 15:47:31] <aniketp41> I got the latest VM image that @gnn had given me initially
[2018-05-10 15:48:21] <somers__> That's why you didn't see the panic that I did
[2018-05-10 15:48:37] <somers__> I'm using 12.0-CURRENT, which has extra sanity checks enabled
[2018-05-10 15:53:48] <aniketp41> Oh I see, I'm using the same VM image since the time I started using FreeBSD, so never had to update it
[2018-05-10 15:53:48] <aniketp41> Btw does it fix the issue of non-emitting of "audit_startup" in auditpipe(4)?
[2018-05-10 15:54:06] <somers__> nope.  I'm looking at that one now
[2018-05-10 15:54:42] <somers__> And BTW, 12.0-CURRENT isn't on the upgrade path from 11.1-RELEASE.  12.0-CURRENT is the bleeding edge image built from SVN head.  It's never officially released
[2018-05-10 16:03:37] <somers__> Uh, it looks like the preselect filters are working fine, but you get a few extra events before "audit startup"
[2018-05-10 16:05:13] <somers__> So I think you just need to loop in check_audit_startup
[2018-05-10 16:08:28] <aniketp41> Okay, so I essentially need to do the similar stuff as in "check_audit" function, right? somers__
[2018-05-10 16:08:37] <somers__> yep
[2018-05-10 16:08:55] <aniketp41> Okay, on it!
[2018-05-10 16:36:34] <aniketp41> Yes @somers__, the looping worked! So basically I reused "check_audit" in case of changing the "check_audit_startup" (as the code is same in both) and changed a bit of logic. Instead of while(true), I'm doing while("a variable") which is initialized by 1. When get_records() returns true, I'm changing the variable to 0, to end the while loop. (As I can't do "atf_tc_pass()" for audit checkup)
[2018-05-10 16:36:51] <aniketp41> *in case -> instead
[2018-05-10 16:41:14] <somers__> makes sense.  Is it ready for review?
[2018-05-10 17:00:00] <aniketp41> Just a sec. Making some final changes
[2018-05-10 17:03:54] <aniketp41> @somers__, there was one small issue. Since I'm doing two rounds of "check_audit" now, I can't close the file descriptors in that function as doing that after first round would fail the tests. Is there any work-around this?
[2018-05-10 17:04:20] <aniketp41> Like passing another boolean argument to "check_audit"
[2018-05-10 17:05:36] <somers__> How about check_audit and check_startup are both wrappers around a static function that has such as boolean argument.  That way you won't be exposing an argument to the test cases that they'll never use.
[2018-05-10 17:09:41] <aniketp41> So do you mean having three functions, where check_audit and check_startup would call another function while passing them a boolean argument?
[2018-05-10 17:16:19] <aniketp41> ping @somers__ 
[2018-05-10 17:16:44] <somers__> yeah.  Makes the API cleaner
[2018-05-10 17:35:56] <aniketp41> Hi @somers__, updated the diff!
[2018-05-10 17:35:56] <aniketp41> Also, had to add back the line "SRCS.file-create+= file-create.c" as apparently the linker issue persists without it. (Earlier I overlooked this somehow)
[2018-05-10 17:49:08] <aniketp41> @somers__, Isn't "am_failure" required as I'm also testing the failure mode of every syscall? 
[2018-05-10 17:49:52] <aniketp41> Oh, not for auditd(8), I see
[2018-05-10 17:49:57] <somers__> am_failure is required for the fc class, but not for ad
[2018-05-10 17:52:41] <aniketp41> Also, @somers__, since I'll move the cleanup part into "check_audit", I can remove the boolean arguments, right? As I don't need them anymore 
[2018-05-10 17:52:59] <somers__> yeah
[2018-05-10 17:56:18] <aniketp41> @somers__, would replacing checkpoint variable with break, break out of the loop? As it now produces a new error for every test-case:
[2018-05-10 17:56:18] <aniketp41> "failed: Incomplete audit record"
[2018-05-10 17:56:33] <aniketp41> I guess it's just breaking out of the switch statement
[2018-05-10 17:56:51] <aniketp41> I guess it's just breaking out of the switch statement
[2018-05-10 17:57:16] <somers__> If so, you can break out of the loop with a goto
[2018-05-10 18:02:19] <aniketp41> Isn't goto discouraged? I mean, also there isn't any specific location where I can make it jump. And if I make it jump at the end, then there isn't any code there too.
[2018-05-10 18:05:30] <aniketp41> ping @somers__, I thought that checkpoint method looked fine
[2018-05-10 18:06:43] <somers__> goto is allowed when it's better than any alternative.  This is the kind of place where it gets used in FreeBSD.  Other languages allow you to break out of nested loops, but not C.  So C programmers use goto in this place
[2018-05-10 18:06:54] <somers__> And if you just need to go to the end, then you can simply use return
[2018-05-10 18:10:43] <aniketp41> Okay @somers__, so I was for some reason not able to get goto to work hence I simply put a "return" there, as you suggested. (Since we don't need anything else from that function anymore)
[2018-05-10 18:11:01] <aniketp41> *(after we've reached that point)
[2018-05-10 18:11:17] <somers__> that's fine
[2018-05-10 19:14:28] <somers__> @aniketp41 none of the tests pass in your latest version
[2018-05-10 19:16:00] <aniketp41> Yes the tests fail for me when auditd is already running. But when I placed "set_preselect_mode" after auditd startup, they did pass however
[2018-05-10 19:16:12] <aniketp41> @somers__ 
[2018-05-10 19:16:52] <somers__> And you knew this?  Why did you upload a new revision to Phabricator if the tests don't pass?
[2018-05-10 19:18:44] <aniketp41> No I just checked. I hadn't confirmed the tests in the case when auditd(8) was already running. 
[2018-05-10 19:19:10] <aniketp41> As earlier we only had issues with tests for audit startup
[2018-05-10 19:21:44] <aniketp41> @somers__ 
[2018-05-10 19:22:00] <somers__> yes?
[2018-05-10 19:38:46] <aniketp41> @somers__, I placed "set_preselect_mode" after auditd(8) startup and now the tests are passing in both scenarios. I'll update the diff accordingly.
[2018-05-10 19:38:46] <aniketp41> Although what should we do about the race condition as you mentioned in the diff, as resolving that makes the test cases fail
[2018-05-10 19:44:27] <somers__> Why do they fail when set_preselect_mode is early?
[2018-05-10 19:56:20] <aniketp41> @somers__, The error is: "Auditpipe did not return anything within the time limit" when auditd(8) is already running. But everything works fine when we have to start it from our program. I guess, maybe "service auditd onestatus" has something to do with it. 
[2018-05-10 19:56:58] <somers__> It shouldn't.  You should try to figure out what's going on.
[2018-05-10 20:04:31] <aniketp41> Okay @somers__, BTW do they fail for you?
[2018-05-10 20:07:32] <somers__> The revision you posted at 12:15 PM MDT fails for me, whether or not auditd is started
[2018-05-10 20:14:38] <aniketp41> Okay @somers__., so I had updated the revision about 1.5 hours after that. Can you please check if that fails for you as well?  
[2018-05-10 20:14:38] <aniketp41> Current revision passes for me in both scenarios. But I also had to place "set_preselect_mode" after auditd startup.
[2018-05-10 20:14:38] <aniketp41> If the current revision passes for you then we can be sure that the placement of that function caused the issue
[2018-05-10 20:16:54] <somers__> When I move it as you suggest, all the tests pass if auditd is already running.  If it isn't, then most (but not all) tests fail.
[2018-05-10 20:26:04] <aniketp41> Hmm, I tried out the tests multiple times, it looks the only problem I'm having is when auditd(8) is running and "set_preselect_mode" is placed before audit startup. In all other cases, all tests pass for me. Not sure why some of them fail for you.
[2018-05-10 20:26:04] <aniketp41> But the placement of the function is causing an issue. Would it be alright if I place it after the audit startup? As I can't seem to understand any race condition here. On the contrary, fixing the race condition causes the issue for sure..
[2018-05-10 20:27:40] <somers__> There's a difference between fixing a race and winning a race.  With set_preselect_mode after auditd startup, you're winning the race.  That's bad.
[2018-05-10 20:28:06] <somers__> We can't commit this until the race is eliminated, and that means you need to understand why the tests fail when you do set_preselect_mode early.
[2018-05-10 21:05:47] <aniketp41> Hi @somers__, I found out the issue. "system("service auditd onestatus");" was causing the problem. When I inserted AUDITPIPE_FLUSH after the auditd startup, the tests passed. 
[2018-05-10 21:05:47] <aniketp41> Have a look at this code: https://pastebin.com/GgnNpkd1
[2018-05-10 21:10:26] <somers__> so what was going on?
[2018-05-10 21:13:23] <somers__> "service auditd onestatus" basically just does "ps -ww".  It doesn't do anything particular to audit(4)
[2018-05-10 21:13:27] <aniketp41> I'm not sure, I thought that maybe inclusion of "ad" had to do with this but even after I removed it from au_mask, it still did not pass the test. The only conclusion I have is that "system()" call changes some properties of auditon(2) which renders our local mode auditing useless 
[2018-05-10 21:16:22] <somers__> From the description of AUDITPIPE_FLUSH, it doesn't sound like it would be relevant
[2018-05-10 21:28:44] <aniketp41> @somers__, does it have to do anything with AUDITPIPE_QLIMIT? I know it doesn't make any sense but this is the most probable explanation I could come up with: Since moving "set_preselect_mask" about "system("service auditd onestatus")" made the tests to pass/fail, and since the system call we desired wasn't coming out of auditpipe, it could mean that auditpipe's maximum limit was reached, and that using "AUDITPIPE_FLUSH" cleaned it up. 
[2018-05-10 21:28:44] <aniketp41> I found this in the man-page of auditpipe(4): "In particular, when an audit pipe queue fills, records will be dropped."
[2018-05-10 21:46:48] <somers__> that would make sense
[2018-05-10 21:46:59] <somers__> You can prove it by checking AUDITPIPE_GET_QLEN
[2018-05-10 21:48:39] * somers_ (~somers@63-224-80-166.hlrn.qwest.net) join
[2018-05-10 21:55:24] * somers__ (~somers@63-224-81-231.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-10 22:28:43] <aniketp41> I did an independent experiment for this. AUDITPIPE_GET_QLEN returned "1" when auditd was already running and "3" when it had to be started?
[2018-05-10 22:29:02] <aniketp41> So is this fix legitimate? As in, shall I update the differential?
[2018-05-10 22:29:12] <aniketp41> ping @somers_ 
[2018-05-10 22:30:24] <somers_> Only 3?  It would be very surprising if the limit were that low.
[2018-05-10 22:34:20] <aniketp41> @somers_, here is the makeshift code I used: https://pastebin.com/akTduSVk
[2018-05-10 22:37:05] <somers_> I think you're checking the qlen in the wrong place.  The hypothetical failure condition is that the queue fills up before the test calls check_audit.  So you should check the queue depth at that point, and compare it to the limit
[2018-05-10 22:43:40] <aniketp41> @somers_, so I included random "fc" system calls before checking QLEN, it seems as if each event increases QLEN by 1. While QLIMIT was 128
[2018-05-10 22:43:40] <aniketp41> Have a look at this code and its output: https://pastebin.com/AtVHit1w
[2018-05-10 22:44:04] <aniketp41> QLIMIT seems to be much more than the number of queued events
[2018-05-10 22:45:00] <somers_> But this is just a toy program.  In your real test case, Kyua also creates a bunch of auditable events
[2018-05-10 22:46:08] <aniketp41> Yes, that makes sense. I was monitoring "praudit /dev/auditpipe" from another window while running the test cases, there were huge number of "openat(2)" system calls alongwith the main syscall
[2018-05-10 22:47:48] <aniketp41> So @somers_, will this fix do? Or is there something else that I need to take care of?
[2018-05-10 22:49:01] <somers_> We still aren't 100% sure that this FLUSH fixes the real problem.  I think you need to disable the flush, then check the QLEN after generating all auditable events but before reading from the auditpipe in check_audit
[2018-05-10 22:55:04] <aniketp41> @somers_, But does Kyua let me print values to STDOUT? Or should I just compare QLEN with QLIMIT?
[2018-05-10 22:55:28] <somers_> Sure.  You can printf to your heart's content
[2018-05-11 08:53:45] <rwatson> aniketp41: Note that FLUSH only flushes the current audit pipe's buffer, not the audit event queue from system-call commit
[2018-05-11 08:54:12] <rwatson> aniketp41: I believe if you update selection rules, and flush, you should then only see records after the flush returns that conform to the rules
[2018-05-11 08:54:16] <rwatson> aniketp41: if this is not the case, we may have a bug
[2018-05-11 11:51:43] <aniketp41> Yes @rwatson, flush worked as it is supposed to, we were only getting the audit_events corresponding to the flag & naflag we had set earlier, after flush returns. The issue was that what Q_LEN returned is way less than Q_LIMIT (contrary to what we expected)
[2018-05-11 11:53:22] <aniketp41> Hi @somers_, I placed a ioctl function to return Q_LEN and Q_LIMIT right before we call check_audit(): https://pastebin.com/nEsVnLju
[2018-05-11 11:53:45] <aniketp41> But even now Q_LEN returns 2, (I had removed the flush part earlier)
[2018-05-11 11:54:55] <aniketp41> Note: I couldn't get printf() to show anything on stdout so instead I set the breakpoint as atf_tc_fail() which returned the value of "apple"
[2018-05-11 11:59:07] <aniketp41> My take here is: we've used clock_gettime() a lot of times and it's complement : clock_settime(2) was listed as "ad". So is it possible that clock_gettime fills up the queue?
[2018-05-11 14:24:35] <somers_> @aniketp41 Kyua suppresses stdout from passing test cases.  If you want to see stdout, you can do "kyua debug test_program:test_case"
[2018-05-11 14:38:09] <somers_> Just add this code to check_audit and you will see that the queue does indeed fill up when set_preselect_mode comes before starting auditd:
[2018-05-11 14:38:16] <somers_> void
[2018-05-11 14:38:16] <somers_> check_audit(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-11 14:38:16] <somers_> 	int qlimit, qlen;
[2018-05-11 14:38:16] <somers_> 	ioctl(fd[0].fd, AUDITPIPE_GET_QLIMIT, &qlimit);
[2018-05-11 14:38:16] <somers_> 	ioctl(fd[0].fd, AUDITPIPE_GET_QLEN, &qlen);
[2018-05-11 14:38:16] <somers_> 	printf("qlen=%d qlimit=%d\n", qlen, qlimit);
[2018-05-11 14:38:18] <somers_> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-11 14:38:20] <somers_> 	/* Cleanup */
[2018-05-11 14:38:22] <somers_> 	fclose(pipestream);
[2018-05-11 14:38:24] <somers_> 	close(fd[0].fd);
[2018-05-11 14:38:26] <somers_> }
[2018-05-11 14:38:43] <somers_> Adding the AUDITPIPE_FLUSH at the end of setup fixes the queue length issue, but reveals another problem
[2018-05-11 15:00:01] <aniketp41> @somers_, I added this code snippet to check_audit() and kyua debug provided a good insight into what was actually going on. However, qlen still returns 2 to me. https://pastebin.com/7dkRXnFh
[2018-05-11 15:03:25] <somers_> Did you put set_preselect_mode *before* starting auditd?
[2018-05-11 15:05:14] <aniketp41> Yes @somers_, here is my setup function: https://pastebin.com/W9YnbqCr
[2018-05-11 15:15:56] <aniketp41> Also @somers_, the part where test fails: "when auditd is already running and we don't have any AUDITPIPE_FLUSH", I was also checking the /dev/auditpipe from another window and it seems that "kyua debug" only checks till an openat(2) function which occurs right before "mkdir(2)". 
[2018-05-11 15:16:55] <somers_> You can't check "the auditpipe" from another window.  Every time you open /dev/auditpipe, you're getting a unique device with potentially different configuration
[2018-05-11 15:17:31] <somers_> Kyua will keep reading from auditpipe until your test case either passes or fails; you're in total control of that
[2018-05-11 15:18:39] <aniketp41> Yes so my global config is flag:"fc" and mkdir(2) was being audited there. Not sure why the auditpipe opened from program failed. It's like it was stuck right before mkdir(2) call.  
[2018-05-11 15:20:32] <somers_> The default audit_control configuration is to have both flags and naflags set to "lo,aa".  That's how the test will most often be run, and that's where you should be focusing your efforts too
[2018-05-11 15:22:05] <aniketp41> Okay @somers_, btw was "qlen" equal to "qlimit" in your case? 
[2018-05-11 15:22:31] <somers_> Yes, at 128
[2018-05-11 15:50:15] <aniketp41> @somers_ It still shows qlen=2 for me everytime, and I added few miscellaneous events just to confirm if qlen returns anything other than 2, and it was showing certain increase in its value. However, it never reaches 128.
[2018-05-11 15:50:15] <aniketp41> Is it possible that our code utils.c is different?
[2018-05-11 15:50:15] <aniketp41> Although, I'm also using a variant of the one which is in the current diff
[2018-05-11 15:57:16] <aniketp41> Btw @somers_, you mentioned that this fix reveals another problem. What was it?
[2018-05-11 15:57:48] <somers_> When I add the flush, the test fails with this error, whether or not auditd is already running:
[2018-05-11 15:57:56] <somers_> file-create:symlinkat_success  ->  failed: Incomplete audit record
[2018-05-11 16:00:46] <aniketp41> Was it for this particular case or did all tests fail?
[2018-05-11 16:19:01] <somers_> With auditd stopped, all test cases fail
[2018-05-11 16:27:39] <somers_> But at least 1 is intermittent
[2018-05-11 19:40:38] <aniketp41> Hello @somers_, can you please run the tests again? I've updated the revision. This time, it looks as if the intermittent issue is (hopefully) gone. I also might have found a similar problem in bsmtrace code
[2018-05-11 19:41:08] <somers_> will do
[2018-05-11 20:11:14] <somers_> Now, when audit isn't already running, about 25% of the tests pass and the rest timeout.  But it's a different 25% each time.
[2018-05-11 20:21:21] <aniketp41> @somers_, Not sure why the tests fail for you. I did have a few intermittent audit incomplete errors earlier but now I've tried various things, i.e rebooting my VM and quickly running the tests again but they never seem to fail. I also pushed the limits by running three instances of tests but it passed even then.
[2018-05-11 23:05:35] <aniketp41> Hi @somers_, what should be the course of action now, since we've got conflict in test results?
[2018-05-11 23:06:02] <somers_> You need to figure out why they sometimes time out
[2018-05-11 23:06:27] <somers_> And why you get the "incomplete record" errors
[2018-05-11 23:12:40] <aniketp41> @somers, I haven't been getting any timeout errors recently. I'm not sure how I'd reproduce those errors back. And the "incomplete audit records" errors occur when au_fetch_tok returns "-1". One issue I could come up with was the "reclen-bytes" might be less than "token.len" but you said that it was not possible. So I'm  kind of stuck here..
[2018-05-11 23:12:58] <aniketp41> @somers_ 
[2018-05-11 23:14:07] <somers_> You can look at the implementation of au_fetch_tok and au_read_rec to gain insights about the "incomplete audit record" error.
[2018-05-11 23:14:11] <somers_> It's in contrib/openbsm
[2018-05-12 14:27:15] <aniketp41> Hello @somers_, I had been looking at the code of "au_fetch_tok" and all the subsequent "fetch_header**tok" functions it calls and it looks like the only time it returns (-1) is when the length of a given token (tok->len) along with sizeof(u_int**_t) is more than the third argument of au_fetch_tok(), i.e "reclen  - bytesread". 
[2018-05-12 14:27:15] <aniketp41> Which probably should be the case with the "incomplete audit record" errors you've been getting. 
[2018-05-12 14:31:24] <aniketp41> When I replaced "reclen - bytesread" with "reclen" it seemed to fix the issue since we're never reducing the "len" argument and that length of the entire audit record will obviously be more than any particular token. So the error condition never happened then
[2018-05-12 14:33:27] <aniketp41> I'm not getting timeout errors anymore, but it looks like this might again be similar to what we were getting initially, and that introduction of "AUDITPIPE_FLUSH" seemed to correct it. This time I think maybe placing AUDITPIPE_FLUSH right before calling "check_audit" might help?
[2018-05-12 15:34:04] <aniketp41> ping @somers_ 
[2018-05-12 15:53:06] <somers_> You may not increase the length of au_fetch_tok's third argument beyond the size of the buffer you supply to it.  Buffer overflows are not ok.
[2018-05-12 16:14:01] <aniketp41> Then @somers_, is it possible that au_read_rec might not return the exact length of audit record? That might explain why sometimes "reclen - bytesread" is not greater than or equal to "tok.len"
[2018-05-12 16:14:12] <aniketp41> As in, a bug in that function?
[2018-05-12 16:15:01] <aniketp41> I found this comment by @rwatson here: /*-
[2018-05-12 16:15:01] <aniketp41>  * Copyright 2018 Aniket Pandey
[2018-05-12 16:15:01] <aniketp41>  * All rights reserved.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * Redistribution and use in source and binary forms, with or without
[2018-05-12 16:15:01] <aniketp41>  * modification, are permitted provided that the following conditions
[2018-05-12 16:15:01] <aniketp41>  * are met:
[2018-05-12 16:15:01] <aniketp41>  * 1. Redistributions of source code must retain the above copyright
[2018-05-12 16:15:01] <aniketp41>  *    notice, this list of conditions and the following disclaimer.
[2018-05-12 16:15:01] <aniketp41>  * 2. Redistributions in binary form must reproduce the above copyright
[2018-05-12 16:15:01] <aniketp41>  *    notice, this list of conditions and the following disclaimer in the
[2018-05-12 16:15:01] <aniketp41>  *    documentation and/or other materials provided with the distribution.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
[2018-05-12 16:15:01] <aniketp41>  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
[2018-05-12 16:15:01] <aniketp41>  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
[2018-05-12 16:15:01] <aniketp41>  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
[2018-05-12 16:15:01] <aniketp41>  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
[2018-05-12 16:15:01] <aniketp41>  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
[2018-05-12 16:15:01] <aniketp41>  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
[2018-05-12 16:15:01] <aniketp41>  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
[2018-05-12 16:15:01] <aniketp41>  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
[2018-05-12 16:15:01] <aniketp41>  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
[2018-05-12 16:15:01] <aniketp41>  * SUCH DAMAGE.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * $FreeBSD$
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> #include <sys/ioctl.h>
[2018-05-12 16:15:01] <aniketp41> #include <time.h>
[2018-05-12 16:15:01] <aniketp41> #include <errno.h>
[2018-05-12 16:15:01] <aniketp41> #include <fcntl.h>
[2018-05-12 16:15:01] <aniketp41> #include <atf-c.h>
[2018-05-12 16:15:01] <aniketp41> #include <string.h>
[2018-05-12 16:15:01] <aniketp41> #include <stdlib.h>
[2018-05-12 16:15:01] <aniketp41> #include <unistd.h>
[2018-05-12 16:15:01] <aniketp41> #include <bsm/libbsm.h>
[2018-05-12 16:15:01] <aniketp41> #include <security/audit/audit_ioctl.h>
[2018-05-12 16:15:01] <aniketp41> #include "utils.h"
[2018-05-12 16:15:01] <aniketp41>  * Checks the presence of "auditregex" in auditpipe(4) after the
[2018-05-12 16:15:01] <aniketp41>  * corresponding system call has been triggered.
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static bool
[2018-05-12 16:15:01] <aniketp41> get_records(const char *auditregex, FILE *pipestream)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	uint8_t *buff;
[2018-05-12 16:15:01] <aniketp41> 	tokenstr_t token;
[2018-05-12 16:15:01] <aniketp41> 	ssize_t size = 1024;
[2018-05-12 16:15:01] <aniketp41> 	char membuff[size];
[2018-05-12 16:15:01] <aniketp41> 	char del[] = ",";
[2018-05-12 16:15:01] <aniketp41> 	int reclen, bytes = 0;
[2018-05-12 16:15:01] <aniketp41> 	FILE *memstream;
[2018-05-12 16:15:01] <aniketp41> 	/*
[2018-05-12 16:15:01] <aniketp41> 	 * Open a stream on 'membuff' (address to memory buffer) for storing
[2018-05-12 16:15:01] <aniketp41> 	 * the audit records in the default mode.'reclen' is the length of the
[2018-05-12 16:15:01] <aniketp41> 	 * available records from auditpipe which is passed to the functions
[2018-05-12 16:15:01] <aniketp41> 	 * au_fetch_tok(3) and au_print_flags_tok(3) for further use.
[2018-05-12 16:15:01] <aniketp41> 	 */
[2018-05-12 16:15:01] <aniketp41> 	memstream = fmemopen(membuff, size, "w");
[2018-05-12 16:15:01] <aniketp41> 	reclen = au_read_rec(pipestream, &buff);
[2018-05-12 16:15:01] <aniketp41> 	/*
[2018-05-12 16:15:01] <aniketp41> 	 * Iterate through each BSM token, extracting the bits that are
[2018-05-12 16:15:01] <aniketp41> 	 * required to start processing the token sequences.
[2018-05-12 16:15:01] <aniketp41> 	 */
[2018-05-12 16:15:01] <aniketp41> 	while (bytes < reclen) {
[2018-05-12 16:15:01] <aniketp41> 		if (au_fetch_tok(&token, buff + bytes, reclen) == -1)
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Incomplete audit record");
[2018-05-12 16:15:01] <aniketp41> 		/* Print the tokens as they are obtained, in the default form */
[2018-05-12 16:15:01] <aniketp41> 		au_print_flags_tok(memstream, &token, (char *)del, AU_OFLAG_NONE);
[2018-05-12 16:15:01] <aniketp41> 		bytes += token.len;
[2018-05-12 16:15:01] <aniketp41> 	}
[2018-05-12 16:15:01] <aniketp41> 	free(buff);
[2018-05-12 16:15:01] <aniketp41> 	fclose(memstream);
[2018-05-12 16:15:01] <aniketp41> 	return (atf_utils_grep_string("%s", membuff, auditregex));
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Override the system-wide audit mask settings in /etc/security/audit_control
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> set_preselect_mode(int filedesc, au_mask_t *fmask)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	int fmode = AUDITPIPE_PRESELECT_MODE_LOCAL;
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection mode for auditing */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_MODE, &fmode) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection mode: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection flag corresponding to the audit_event */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_FLAGS, fmask) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection flag: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection flag for non-attributable audit_events */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_NAFLAGS, fmask) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection flag: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Get the corresponding audit_mask for class-name "name" then set the
[2018-05-12 16:15:01] <aniketp41>  * success and failure bits for fmask to be used as the ioctl argument
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static au_mask_t
[2018-05-12 16:15:01] <aniketp41> get_audit_mask(const char *name)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	au_mask_t fmask;
[2018-05-12 16:15:01] <aniketp41> 	au_class_ent_t *class;
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE((class = getauclassnam(name)) != NULL);
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_success = class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_failure = class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE((class = getauclassnam("ad")) != NULL);
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_success |= class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	return (fmask);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Loop until the auditpipe returns something, check if it is what
[2018-05-12 16:15:01] <aniketp41>  * we want, else repeat the procedure until ppoll(2) times out.
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> check_auditpipe(struct pollfd fd[], const char *auditregex, FILE *pipestream)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	struct timespec currtime, endtime, timeout;
[2018-05-12 16:15:01] <aniketp41> 	/* Set the expire time for poll(2) while waiting for syscall audit */
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE_EQ(0, clock_gettime(CLOCK_MONOTONIC, &endtime));
[2018-05-12 16:15:01] <aniketp41> 	endtime.tv_sec += 5;
[2018-05-12 16:15:01] <aniketp41> 	timeout.tv_nsec = endtime.tv_nsec;
[2018-05-12 16:15:01] <aniketp41> 	for (;;) {
[2018-05-12 16:15:01] <aniketp41> 		/* Update the time left for auditpipe to return any event */
[2018-05-12 16:15:01] <aniketp41> 		ATF_REQUIRE_EQ(0, clock_gettime(CLOCK_MONOTONIC, &currtime));
[2018-05-12 16:15:01] <aniketp41> 		timeout.tv_sec = endtime.tv_sec - currtime.tv_sec;
[2018-05-12 16:15:01] <aniketp41> 		switch (ppoll(fd, 1, &timeout, NULL)) {
[2018-05-12 16:15:01] <aniketp41> 		/* ppoll(2) returns, check if it's what we want */
[2018-05-12 16:15:01] <aniketp41> 		case 1:
[2018-05-12 16:15:01] <aniketp41> 			if (fd[0].revents & POLLIN) {
[2018-05-12 16:15:01] <aniketp41> 				if (get_records(auditregex, pipestream))
[2018-05-12 16:15:01] <aniketp41> 					return;
[2018-05-12 16:15:01] <aniketp41> 			} else {
[2018-05-12 16:15:01] <aniketp41> 				atf_tc_fail("Auditpipe returned an "
[2018-05-12 16:15:01] <aniketp41> 				"unknown event %#x", fd[0].revents);
[2018-05-12 16:15:01] <aniketp41> 			}
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		/* poll(2) timed out */
[2018-05-12 16:15:01] <aniketp41> 		case 0:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Auditpipe did not return anything "
[2018-05-12 16:15:01] <aniketp41> 					"within the time limit");
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		/* poll(2) standard error */
[2018-05-12 16:15:01] <aniketp41> 		case -1:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Poll: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		default:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Poll returned an unknown event");
[2018-05-12 16:15:01] <aniketp41> 		}
[2018-05-12 16:15:01] <aniketp41> 	}
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Wrapper functions around static "check_auditpipe"
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> check_audit_startup(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-12 16:15:01] <aniketp41> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> void
[2018-05-12 16:15:01] <aniketp41> check_audit(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-12 16:15:01] <aniketp41> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-12 16:15:01] <aniketp41> 	/* Cleanup */
[2018-05-12 16:15:01] <aniketp41> 	fclose(pipestream);
[2018-05-12 16:15:01] <aniketp41> 	close(fd[0].fd);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> FILE
[2018-05-12 16:15:01] <aniketp41> *setup(struct pollfd fd[], const char *name)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	au_mask_t fmask;
[2018-05-12 16:15:01] <aniketp41> 	fmask = get_audit_mask(name);
[2018-05-12 16:15:01] <aniketp41> 	FILE *pipestream;
[2018-05-12 16:15:01] <aniketp41> 	fd[0].fd = open("/dev/auditpipe", O_RDONLY);
[2018-05-12 16:15:01] <aniketp41> 	fd[0].events = POLLIN;
[2018-05-12 16:15:01] <aniketp41> 	pipestream = fdopen(fd[0].fd, "r");
[2018-05-12 16:15:01] <aniketp41> 	set_preselect_mode(fd[0].fd, &fmask);
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE_EQ(0, system("service auditd onestatus || \
[2018-05-12 16:15:01] <aniketp41> 	{ service auditd onestart && touch started_auditd ; }"));
[2018-05-12 16:15:01] <aniketp41> 	/* This removes any outstanding record on the auditpipe */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(fd[0].fd, AUDITPIPE_FLUSH) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Auditpipe flush: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* If 'started_auditd' exists, that means we started auditd(8) */
[2018-05-12 16:15:01] <aniketp41> 	if (atf_utils_file_exists("started_auditd"))
[2018-05-12 16:15:01] <aniketp41> 		check_audit_startup(fd, "audit startup", pipestream);
[2018-05-12 16:15:01] <aniketp41> 	return (pipestream);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> void
[2018-05-12 16:15:01] <aniketp41> cleanup(void)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	system("[ -f started_auditd ] && service auditd onestop > \
[2018-05-12 16:15:01] <aniketp41> 		/dev/null 2>&1");
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:02] * aniketp41 (~aniketp41@159.65.149.37) quit Excess Flood
[2018-05-12 16:15:17] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-05-12 16:15:35] <aniketp41> Oh sorry that was the wrong paste 
[2018-05-12 16:15:49] <aniketp41> Here: https://github.com/openbsm/openbsm/blob/master/libbsm/bsm_io.c#L4669
[2018-05-12 16:43:55] <aniketp41> Hi @rwatson, is it possible that audit records might not have complete audit tokens or contain few erroneous data?
[2018-05-12 16:45:54] <aniketp41> I had a look at the source code of "au_read_rec" and I couldn't find any anomaly, however if for some reason the audit record is corrupted even before au_read_rec reads it into a buffer, we might not be able to get complete and santized tokens..
[2018-05-12 17:24:40] <somers_> Does your program actually check that au_read_rec doesn't return an error?
[2018-05-12 17:39:00] <aniketp41> Not until now, I've added an ATF_REQUIRE check on au_read_rec function. But my tests aren't failing so I can't see if there is any difference.. @somers_, can you add that check and see if the result is any different?
[2018-05-12 17:39:19] <somers_> Sure
[2018-05-12 17:44:48] <somers_> are you going to send me the code?
[2018-05-12 17:46:41] <aniketp41> Oh, sorry. Yes here is my utils.c : https://pastebin.com/2byYdEJ2
[2018-05-12 17:46:41] <aniketp41> somers_
[2018-05-12 17:48:36] <somers_> It's hard to tell what the difference is.  Can you upload it to Phabricator, or at least send me a diff vs what's in Phabricator?
[2018-05-12 17:54:09] <aniketp41> Okay, @somers_. I've updated the review. Please have a look
[2018-05-12 18:00:54] <somers_> Same as before.  Most tests timed out if auditd wasn't already running.
[2018-05-12 18:03:42] <aniketp41> So there wasn't any "incomplete audit record" error? @somers_ 
[2018-05-12 18:03:42] <aniketp41> Also, about timeout errors, what if we move the flush part right before infinite for loop? Cause if the tests timeout just in case auditd(8) isn't already running, that means we have issue in auditing "audit startup"
[2018-05-12 18:04:24] <aniketp41> And that audit record isn't incomplete since tests pass for "auditd" already running scenario
[2018-05-12 18:05:34] <somers_> I think you're probably still overflowing the queue length.  One thing you could do would be to increase the queue length.  Another would be to flush the queue after the "audit startup" message.  Another would be to deselect the "ad" class after the auditd startup
[2018-05-12 18:05:35] <aniketp41> Though is it possible that even though I update the diff, our "utils.c" is not exactly same? In that case please check the tests by using the utils.c from pastebin
[2018-05-12 18:08:06] <aniketp41> @somers_, tests aren't failing for me so I'll not be able to check any difference. Can you please try these changes on your machine and see if it works. Queue overflow might be an explanation in your case cause when your Q_LEN showed 128, mine was only 2..
[2018-05-12 18:08:08] <somers_> I used exactly what you posted to Phabricator
[2018-05-12 18:09:20] <somers_> Do you run your tests with sudo, or do you login as root?
[2018-05-12 18:09:53] <aniketp41> Yes I'm working as a root. I removed my user as I didn't need it
[2018-05-12 18:14:05] <somers_> It's possible that sudo produces extra auditable events, making it more likely for the queue to overflow
[2018-05-12 18:14:59] <aniketp41> Okay I'll try to run these tests as a user with sudo
[2018-05-12 18:15:05] <aniketp41> @somers_ 
[2018-05-12 18:17:45] <aniketp41> @somers_, they passed as sudo too: https://pastebin.com/eWqHnSDn
[2018-05-12 18:22:12] <aniketp41> @somers_, can we try setting Q_LIMIT to see if it works? or maybe calling AUDITPIPE_FLUSH both before and after "audit_check"
[2018-05-12 18:23:29] <somers_> yeah, I'm trying that now
[2018-05-12 18:33:20] <somers_> Flushing the pipe before and after "audit startup" increases the pass rate.  Raising the queue size has about the same effect.  Doing both results in a really annoying pass rate of 99% or so.
[2018-05-12 18:35:37] <aniketp41> Looks like there are a hell lot events being generated on your machine? Maybe a lot of administrative "ad" events are also getting audited..
[2018-05-12 18:37:26] <aniketp41> BTW @somers_, Is there a limit on how much we can raise Q_LIMIT? maybe we can make it the maximum it can be
[2018-05-12 18:38:00] <somers_> Yeah, there's an ioctl that will tell you what the max is.  That's what I'm using, and it's 1024
[2018-05-12 18:49:39] <aniketp41> @somers_, I think my placement of AUDITPIPE_FLUSH was wrong earlier, I should've placed it once before "audit startup" and another after "check_audit_startup". I placed it between them
[2018-05-12 18:50:45] <aniketp41> I think that might have erased "audit startup" event from your auditpipe in case it was not already running. That might explain why they failed for you?
[2018-05-12 18:50:45] <aniketp41> But if that is the case, then they should've failed for me too?
[2018-05-12 18:51:54] <aniketp41> Or maybe my system wasn't fast enough to remove the trail from auditpipe before auditd started? 
[2018-05-12 18:51:54] <aniketp41> Here is my modifed setup function: https://pastebin.com/BtqiSmwY
[2018-05-12 19:05:49] <aniketp41> ping @somers_ 
[2018-05-12 19:08:20] <somers_> When I move the AUDITPIPE_FLUSH as you suggest, most tests fail with "Incomplete audit record"
[2018-05-12 19:33:08] <aniketp41> That's strange, we had a check in place for au_read_rec(3) to return -1. Not sure why au_fetch_tok(3) is giving an error.
[2018-05-12 19:33:08] <aniketp41> Btw @somers_, can you try replacing "reclen - bytes" with "reclen"? Although that's wrong, but "incomplete audit record" doesn't make any sense now ... 
[2018-05-12 19:34:12] <aniketp41> Btw @somers_, do the tests fail in both scenario? i.e auditd(8) running or not
[2018-05-13 13:56:50] <aniketp41> Hello @somers_, I had been thinking, do we really need that check for "au_fetch_tok" to not be equal to "-1" in every iteration? Cause I've developed about 144 test-cases and for tests of "file-read" audit_class, I was getting a similar "incomplete audit record" error but when I removed that condition all tests passed
[2018-05-13 14:01:37] <aniketp41> Please have a look at the difference in result before and after the if-condition change: https://pastebin.com/ddZ88RAd
[2018-05-13 14:02:55] <aniketp41> @somers_, Please remove the if condition and then run your tests again! 
[2018-05-13 15:23:17] <aniketp41> ping @somers_ 
[2018-05-13 15:32:01] <somers_> It's possible that the only records getting corrupted are extraneous records, like from the "ad" class.  But it would be good to know which.  Could you at least try printing the incomplete record as a warning?  Then we might be able to tell.
[2018-05-13 15:32:24] <somers_> Another thing you could do would be to deselect the "ad" class after auditd startup is complete.
[2018-05-13 15:39:34] <somers_> @aniketp41 with your latest changes, most testcases fail with this error: "failed: /usr/home/somers/freebsd/base/head/tests/sys/audit/utils.c:65: (reclen = au_read_rec(pipestream, &buff)) != -1 not met"
[2018-05-13 16:47:32] <aniketp41> @somers_, is this the right way to remove a flag?: am_success = am_sucess & ~class->ac_class
[2018-05-13 16:48:24] <somers_> Sure.  Though in your case, it would probably be equally easy to simply start from scratch
[2018-05-13 16:48:50] <somers_> Actually, your snippet would be wrong if the syscall under test _is_ in class "ad".
[2018-05-13 16:50:00] <aniketp41> I think @somers_, going by that logic (corrupted extraneous) wouldn't it be right to replace ATF_REQUIRE in au_read_rec with a warn statement? cause I guess those corrupted records might be failing the tests again?
[2018-05-13 16:50:20] <aniketp41> Oops, true! Didn't think of "ad" syscall :D
[2018-05-13 17:13:19] <aniketp41> @somers_, I made few more changes, please have a look at the revision
[2018-05-13 17:23:58] <somers_> I gtg.  I'll look in a couple of hours
[2018-05-13 17:25:01] <aniketp41> Sure
[2018-05-13 18:30:35] <aniketp41> @rwatson, @somers_ what should I do about the syscalls which don't have any manpage? Like for instance I'm having a look at the "file-attribute-access" system calls and quite a lot a them don't have manual pages.
[2018-05-13 21:20:01] <somers_> most of them probably have man pages under a slightly different name, because there's a wrapper in libc.
[2018-05-13 21:21:20] <somers_> You can grep for the syscall's name under lib/libc/gen
[2018-05-13 21:21:40] <somers_> Or just under lib.  Some of them, like the pthreads-related stuff, aren't technically in libc.
[2018-05-14 00:54:46] <aniketp41> Sure @somers_, I'll have a look at the  location for the syscalls. Btw did you have a look at the recent changes?
[2018-05-14 00:55:43] <aniketp41> I've called "set_preselect_mode" twice,. as you suggested for both audit startup abs syscall audit
[2018-05-14 10:23:14] <aniketp41> Hello @somers_, I've created a new revision D15423 as my socsvn account was just configured and I created my new phabricator account with freebsd alias
[2018-05-14 14:04:27] <somers_> I haven't had a chance to review the latest changes yet
[2018-05-14 15:25:28] <aniketp41> Sure I'll update the atf_tc_fail messages. Btw what was the status of the tests ?@somers_
[2018-05-14 15:26:19] <somers_> Occasional failures due to not noticing auditd startup.  The detailed output shows some "incomplete audit record" messages.  I'm going to dig deeper into libbsm now to see if I can figure out what's going on.
[2018-05-14 16:37:21] <aniketp41> @somers_, for the error message? Would something like this work?: "%s not found in auditpipe within the time limit", auditregex. Since we're essentially looking for the regex corresponding to the event we have anticipated. Also, auditregex would be "audit startup" in case of auditd startup..
[2018-05-14 16:48:41] <somers_> Yeah, that sounds great
[2018-05-14 18:51:34] <aniketp41> Hi @somers_, for syscalls like stat(2), I essentially need to declare and allocate memory to a struct stat pointer. So freeing up of the buffer would be done within the test-case body, right? rather than ATF_TC_CLEANUP
[2018-05-14 19:02:05] <aniketp41> Oh, I think pointer would not be required, a simple buffer also worked
[2018-05-14 19:15:31] <somers_> Yeah, struct stat should fit on the stack
[2018-05-15 13:32:17] <aniketp41> Hi @somers_, were you able to identify the cause of occasional test failures?
[2018-05-15 13:32:50] <aniketp41> I have about 252 tests waiting for their own revision :D
[2018-05-15 13:32:50] <aniketp41> after this one is commited
[2018-05-15 14:02:21] <somers_> The occasional failures are due to failure to notice that auditd started up, not due to failure to audit the syscall under test
[2018-05-15 14:03:36] <somers_> I'm 90% sure that it happens when you get an incomplete audit record, and that happened to be the "audit startup" record.  But I don't know why au_read_rec is returning incomplete records
[2018-05-15 14:15:45] <aniketp41> @somers_, although you were against this method and this is essentially a race condition, I feel like maybe delaying the syscall check for a certain amount of time  (which is more than sufficient for auditd startup) would pass the tests in case auditd(8) is not already running. 
[2018-05-15 14:15:45] <aniketp41>  @rwatson had said something like this earlier: "there's no synchronicity requirement that a syscall only return after the record goes out of the audit pipe, so you might need to insert a short delay after the system call before expecting a record to be emitted from /dev/auditpipe"
[2018-05-15 14:15:45] <aniketp41> Maybe that's what is happening in case of auditd startup?
[2018-05-15 14:16:38] <somers_> No, the delay rwatson was talking about is something different
[2018-05-15 14:17:01] <somers_> You already handle that delay with the loop in check_audit
[2018-05-15 14:32:33] <aniketp41> So if au_read_rec() returns incomplete records in case of "auditd startup" but not in case of "syscall audit check" then it looks to me that this might be an issue with audit startup in the system and not with libbsm, unless au_read_rec() is baised against auditd startup.(which should not be!)   
[2018-05-15 14:33:56] <somers_> Not exactly.  There are just a whole lot more messages that get generated during audit startup
[2018-05-15 17:17:01] <aniketp41> Hi @somers_,I was getting an unexpected error on trying to test fstat(2) "fa" system call. Please have a look at my implementation and the error produced: https://pastebin.com/Q7XXRG9d
[2018-05-15 17:18:15] <somers_> what's the problem?  The EINVAL for poll?
[2018-05-15 17:18:24] <somers_> The man page will list the reasons why you might get EINVAL
[2018-05-15 17:19:24] <aniketp41> Yes. Oh I actually understood. The regex I'm comparing is not found in the audit trail. As it takes file descriptor as the input and searching against "fileforaudit"
[2018-05-15 17:23:49] <aniketp41> Btw, what would be the best regex in this case? As there isn't much info produced in the audit trail. I can search against "fstat(2).*return,success" but a lot of successful instances of fstat(2) might be found
[2018-05-15 17:23:52] <aniketp41> @somers_ 
[2018-05-15 17:24:19] <somers_> what are you trying to match?
[2018-05-15 17:25:00] <aniketp41> "fileforaudit.*return,success" but this is wrong
[2018-05-15 17:26:30] <somers_> No, that's the regex.  I mean what text do you want to match?
[2018-05-15 17:29:28] <aniketp41> @somer_ this text: 'header,108,11,fstat(2),0,Tue May 15 22:58:36 2018, + 49 msecargument,1,0x3,fdattribute,755,root,wheel,79,96867,0subject,root,root,wheel,root,wheel,7306,726,52932,10.0.2.2return,success,0trailer,108'
[2018-05-15 17:29:28] <aniketp41> Although I got it to work now, the regex was wrong.
[2018-05-15 17:29:42] <aniketp41> ▶ kyua debug file-attribute-access:fstat_success                                       ✔    04:28:34 
[2018-05-15 17:29:42] <aniketp41> auditd is running as pid 562.
[2018-05-15 17:29:42] <aniketp41> Looking for 'fstat.*return,success' in 'header,108,11,fstat(2),0,Tue May 15 22:58:36 2018, + 49 msecargument,1,0x3,fdattribute,755,root,wheel,79,96867,0subject,root,root,wheel,root,wheel,7306,726,52932,10.0.2.2return,success,0trailer,108'
[2018-05-15 17:29:42] <aniketp41> file-attribute-access:fstat_success  ->  passed
[2018-05-15 17:30:27] <aniketp41> But @somers_ probably this is a wrong method as we're not sure that this record was produced by our code
[2018-05-15 17:31:36] <somers_> Is there an inode number in there somewhere?
[2018-05-15 17:33:22] <aniketp41> No I guess there are just a bunch of user/process IDs and some time reference
[2018-05-15 17:33:22] <aniketp41> And also in the attribute part, it says file descriptor is "fd" whereas I passed in "filedesc"
[2018-05-15 17:33:53] <aniketp41> @somers_ 
[2018-05-15 17:34:31] <somers_> where is the format of that record documented?
[2018-05-15 17:37:02] <aniketp41> @somers_ I've been using this doc as the reference: https://www.freebsd.org/doc/handbook/audit-administration.html
[2018-05-15 17:38:12] <somers_> This would be easier if you put a delimiter between tokens
[2018-05-15 17:40:27] <somers_> You need to figure out what the argument and attribute tokens mean
[2018-05-15 17:42:03] <aniketp41> Sorry, I meant argument earlier:
[2018-05-15 19:41:20] <aniketp41> Hi @somers_, Yes there was inode number in the attribute of audit record. I created a sample program which printed the "inode" of a file which was returned by "stat.st_ino" when used with fstat(2). I guess now I can use the inode in the regex! 
[2018-05-15 19:41:41] <somers_> yes, that would be great
[2018-05-15 19:42:05] <aniketp41> Thanks for pointing that out!
[2018-05-15 20:16:06] <aniketp41> Hello @somers_ I was having a slight issue. The regex I'm supposed to pass to check_audit() should be of type "const char *" but when I'm converting the obtained Inode to a string using "snprintf" it essentially only needs "char *". So while to cast regex to (const char*) so that I can pass it to check_audit. The compiler doesn't let me do it:  error: initializing 'char *' with an expression of type 'const char [22]'
[2018-05-15 20:16:06] <aniketp41>       discards qualifiers [-Werror,-Wincompatible-pointer-types-discards-qualifiers]
[2018-05-15 20:16:06] <aniketp41>  
[2018-05-15 20:16:28] <aniketp41> *trying
[2018-05-15 20:17:33] <somers_> Yep.  If you're dynamically composing the regex, then it's not a "const char*"
[2018-05-15 20:17:59] <somers_> But, the callee doesn't care.  So check_audit's prototype needn't change.
[2018-05-15 20:20:37] <aniketp41> But @somers_, it doesn't let me pass "regex" to check_audit since the types don't exactly match. How should I handle this case?
[2018-05-15 20:21:40] <somers_> You should be able to pass a "char*" to a function that expects "const char*"
[2018-05-15 20:21:48] <somers_> Are you trying to explicitly cast it?  Don't do that.
[2018-05-15 20:43:15] <aniketp41> @somers_ I'm kinda stuck here.. This code gave me the least error: https://pastebin.com/QH1bU6Q1 
[2018-05-15 20:43:15] <aniketp41> I think the string "return.*inode.*return,success" is being recognized as a const char, but since the argument expects "char", this causes error.. 
[2018-05-15 20:44:37] <somers_> Why is it static?
[2018-05-15 20:45:38] <somers_> The error is coming from fstat_failure, but you didn't paste that function
[2018-05-15 20:45:57] <somers_> Looks like it should be a "const char*" in fstat_failure
[2018-05-15 20:47:55] <aniketp41> Yeah I just noticed it was coming from fstat_failure. The whole time I thought "fstat_success" caused the issue.. 
[2018-05-15 20:47:55] <aniketp41> The tests compiled now, thanks
[2018-05-15 21:03:15] <aniketp41> Btw @somers_, is this a right way to test "fstat_failure" https://pastebin.com/uHF1YbYG ? 
[2018-05-15 21:03:15] <aniketp41> As there weren't many failure conditions for "fstat" in the man-page. And I'm not sure how would fstat(2) fail once we have the information (including inode number) of the file..
[2018-05-15 21:04:18] <somers_> yeah, that's about the best that you can do
[2018-05-15 21:22:49] <aniketp41> Btw @somers_, what do you think about the issue of audit startup that we are facing currently. Would it get resolved?
[2018-05-15 21:23:07] <aniketp41> As I have test cases piling up..
[2018-05-15 21:23:29] <somers_> It needs to be
[2018-05-15 21:24:43] <aniketp41> And unless I get stuck somewhere. I should be able to hopefully complete *almost* all system calls within about a month.. (success and failure mode)
[2018-05-15 21:25:15] <somers_> cool
[2018-05-15 21:37:22] <aniketp41> Btw @somers_, I encountered few other system calls that took "file-descriptor" as the input. For e.g fstatfs(2). But the structure it returned didn't have any Inode this time (from the man-page). So what should be the approach in this case?
[2018-05-15 21:37:22] <aniketp41> Though can I simply check against "fstatfs.*return,success" as it looks  unlikely that the auditpipe will contain any other instance of the system call simultaneously (+- 5sec)? 
[2018-05-15 21:38:47] <somers_> best to be specific
[2018-05-15 21:38:56] <somers_> what else does the audit record contain?
[2018-05-15 21:41:22] <aniketp41> header,108,11,fstatfs(2),0,Wed May 16 08:40:12 2018, + 252 msec,argument,1,0x3,fd,attribute,755,root,wheel,79,1795169,3583621,subject,root,root,wheel,root,wheel,20513,9581,54210,10.0.2.2,return,success,0,trailer,108,
[2018-05-15 21:41:22] <aniketp41> I guess I can again check for inode by calling "stat(2)" separately
[2018-05-15 21:54:04] <aniketp41> @somers_, does this look good? https://pastebin.com/BydD8zCX
[2018-05-15 21:54:04] <aniketp41> I used stat(2) to get the inode number and then checked its presence in audit record while testing fstatfs(2)..
[2018-05-15 21:55:19] <somers_> Yeah, that looks fine.  It's a trifle silly, because the inode number isn't really important to fstatfs.  But it's certainly the surest way to exclude false positives from the audit trail
[2018-05-15 21:59:52] <aniketp41> Yes, I felt the same. Although Inode of the file which is present within a filesystem seemed a valid choice to test against..
[2018-05-16 17:12:48] <aniketp41> Hi @somers_, for syscalls such as getfsstat(2), fpathconf(2) the audit record didn't look like it contained anything useful:
[2018-05-16 17:12:48] <aniketp41> It was something like this: header,68,11,getfsstat(2),0,Thu May 17 04:10:34 2018, + 402 msec, subject, root,root,wheel,root,wheel, 3606,2591,38048,10.0.2.2, return,success,2,trailer,68,
[2018-05-16 17:12:48] <aniketp41> Should I search for a simple "syscall.*return,success" regex?
[2018-05-16 17:13:52] <aniketp41> Also, I haven't yet explored "process-control" system calls, is the situation similar for them or does the audit record actually contain some useful stuff?
[2018-05-16 17:14:01] <somers_> There were no attribute or argument tokens?
[2018-05-16 17:15:01] <aniketp41> I checked for two possibilities: 1) getfsstat(NULL, 0, MNT_NOWAIT);      2) getfsstat(buf, fc_count*sizeof(buf[0]), MNT_NOWAIT);
[2018-05-16 17:15:01] <aniketp41> Both had similar record
[2018-05-16 17:15:21] <aniketp41> These possibilities were described in the man-page
[2018-05-16 17:16:14] <somers_> Just match on whatever you can, then.  But keep in mind that a poorly auditable syscall is a bug.  We may need to add details to some of these audit records
[2018-05-16 17:16:17] <aniketp41> Btw @somers_, they return information about the mounted-file systems, right? Why would audit record contain any related info
[2018-05-16 17:16:54] <somers_> Like which file system is being interrogated?
[2018-05-16 17:18:47] <aniketp41> Yes that is the issue. But one thing I noticed is that in a normal situation, some of these syscalls don't recur unless they are being explicitely called. (Not created by any processes)
[2018-05-16 17:18:47] <aniketp41> getfsstat(2) returns the number of mounted file-systems and their data is stored in buff array of statfs structures. i had a hunch the audit records wouldn't contain much
[2018-05-16 17:18:47] <aniketp41> I mean there isn't anything specific to contain here.. @somers_ 
[2018-05-16 17:19:33] <somers_> Oh, my mistake.  I thought getfsstat only worked on a single file system
[2018-05-16 17:21:10] <aniketp41> Although if the audit records contained the return values (which they don't) I guess we could have included the number of mounted file-systems as a regex to confirm our test
[2018-05-16 17:22:07] <somers_> That probably doesn't matter.  The purpose of auditting is to determine what somebody's intention was.  Return values aren't usually necessary for that
[2018-05-16 17:30:19] <somers_> gtg.  Be back in a couple of hours.
[2018-05-16 21:08:22] <aniketp41> Hi @somers_, I tried to audit getfh(2) and lgetfh(2) and looks like I've hit my first instance where the syscalls were not being audited. Also, just to check if they belong to some other audit class, I set the flag to "all" following which, getfh(2) was audited as "nfs_getfh" which belongs to "ad". lgetfh(2) was not audited at all..
[2018-05-16 21:08:29] <aniketp41> Is this a possible bug?
[2018-05-16 21:09:14] <somers_> But getfh was not audited when the class was set to ad?
[2018-05-16 21:10:20] <aniketp41> No it was, but the record showed "nfs_getfh"
[2018-05-16 21:10:35] <aniketp41> Wait, I didn't check it against "ad"
[2018-05-16 21:10:57] <aniketp41> I'll do that now. I just checked it for "all" just to see if it did
[2018-05-16 21:11:20] <aniketp41> @somers_ 
[2018-05-16 21:17:31] <aniketp41> Yes @somers_, when I set the system wide audit flag as "ad", it was audited:
[2018-05-16 21:17:31] <aniketp41> header,128,11,nfs_getfh(2),0,Thu May 17 08:17:15 2018, + 778 msec
[2018-05-16 21:17:31] <aniketp41> path,/root/test/src/fileforaudit
[2018-05-16 21:17:31] <aniketp41> attribute,644,root,wheel,79,578221,0
[2018-05-16 21:17:31] <aniketp41> subject,root,root,wheel,root,wheel,3334,2960,56418,10.0.2.2
[2018-05-16 21:17:31] <aniketp41> return,success,0
[2018-05-16 21:17:31] <aniketp41> trailer,128
[2018-05-16 21:18:17] <aniketp41> I even tried syscall(SYS_getfh, ...) but to no avail, the results were similar again
[2018-05-16 21:26:42] <somers_> Are you expecting a different syscall name in the audit record?
[2018-05-16 21:26:59] <somers_> Or still having trouble with lgetfh?
[2018-05-16 21:36:59] <aniketp41> @somers_, lgetfh doesn't show up normally or in "ad" class. When I set flag to "all" so as expected a lot of events are generated so I can't find any event generated by triggering lgetfh(2). For "getfh", I grep'ed for "fh" and nfs_getfh showed up. 
[2018-05-16 21:36:59] <aniketp41> Doing so in case of lgetfh, nothing shows up whatsoever
[2018-05-16 21:37:51] <aniketp41> Though it might be possible that some other syscall of some other class was generated which no maching of name with lgetfh?
[2018-05-16 21:39:45] <somers_> according to /etc/audit_event, it's supposed to be called "lgetfh"
[2018-05-16 21:40:36] <somers_> If you want to be sure it's getting called, then run your test while in another window doing "sudo dtrace -i syscall:freebsd:lgetfh:entry"
[2018-05-16 21:43:27] <aniketp41> Yes, lgetfh(2) showed up using the above command. But why doesn't it show up in audit record? Doesn't make sense..
[2018-05-16 21:43:27] <aniketp41> @somers_, I tried the above command with getfh(2) and that showed up too
[2018-05-16 21:43:44] <somers_> Then that sounds like an audit bug
[2018-05-16 21:46:07] <aniketp41> @somers_, can you please try once in your machine too? Here is the makeshift code I used: https://pastebin.com/1guze6Dz
[2018-05-16 21:46:35] <somers_> And how did you audit that?
[2018-05-16 21:47:04] <aniketp41> praudit -l /dev/auditpipe | grep "getfh"
[2018-05-16 21:47:10] <aniketp41> @somers_ 
[2018-05-16 21:47:23] <aniketp41> With "all" flag
[2018-05-16 21:47:38] <somers_> The "all" flag where?
[2018-05-16 21:48:01] <aniketp41> In /etc/security/audit_control file
[2018-05-16 21:48:26] <aniketp41> The other window had /dev/auditpipe open via "praudit"
[2018-05-16 21:49:25] <aniketp41> I guess in this case "ad" works too. As is correctly mentioned here: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L79
[2018-05-16 21:49:42] <somers_> the snippet you sent me has "getfh".  I thought you were worried about "lgetfh" ?
[2018-05-16 21:49:43] <aniketp41> @somers_ 
[2018-05-16 21:50:08] <aniketp41> Yeah, I tried that too, replaced getfh with lgetfh and fileforaudit with its symlink
[2018-05-16 21:50:23] <somers_> so what do you want me to run?
[2018-05-16 21:51:17] <aniketp41> I mean, how do you normally check/run audits? Like I simply start audit, have praudit running in one window, while in the other, I execute the binary..
[2018-05-16 21:51:53] <somers_> But I'm asking you: what do you want me to run?
[2018-05-16 21:53:09] <aniketp41> I mean, like running that code, or maybe if you have a better way of testing "getfh/lgetfh"?
[2018-05-16 21:53:55] <somers_> That's why I'm asking what do you want me to test?  You complained about lgetfh, then sent me a snippet that only calls getfh.  If you want me to test lgetfh, then you should send me code that actually uses lgetfh
[2018-05-16 22:03:27] <aniketp41> @somers_, here is the code for lgetfh(2), I modified the previous code a bit: https://pastebin.com/EwstzSUz
[2018-05-16 22:06:01] <somers_> Nope, I don't see an audit record for it either
[2018-05-16 22:43:59] <aniketp41> So @somers_, should we report this as a bug then? What would be the best way to do it?
[2018-05-17 06:49:59] * gnn (~quassel@f373.x.rootbsd.net) quit se.hub irc.underworld.no
[2018-05-17 13:25:50] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-05-17 14:17:46] <somers_> bugs.freebsd.org
[2018-05-17 18:43:46] <aniketp41> Hi @somers @rwatson, I was trying to test the family of "extattr" system calls dealing with the extended attributes of a file. The syscalls required a attribute namespace (which can be EXTATTR_NAMESPACE_USER in my case) and a name of the attribute. But how would I know which extended attributes exist for that file.
[2018-05-17 18:43:46] <aniketp41> I tried random values for attribute name, e.g "name", "inode", "author" but all were audited as :  "return,failure : Attribute not found"
[2018-05-17 18:43:59] <aniketp41> @somers_ 
[2018-05-17 18:44:33] <somers_> lsextattr
[2018-05-17 18:44:49] <somers_> that will show you what already exists
[2018-05-17 18:45:27] <somers_> Look at usr.sbin/extattr/tests for examples of valid names
[2018-05-17 18:50:38] <aniketp41> But @somers_, for the kyua tests, I'll need to create a file myself, so will there be any extended attribute by default? 
[2018-05-17 18:50:38] <aniketp41> Like "lsextattr -q user myfilename" does not give me anything
[2018-05-17 18:51:09] <somers_> There are none by default.  You'll have to create one.
[2018-05-17 19:00:04] <aniketp41> Sure @somers_ , I used extattr_set_* to set a random attribute
[2018-05-17 19:09:03] <aniketp41> @somers_, does it ever happen that audit record might contain return value of a syscall?
[2018-05-17 19:10:01] <aniketp41> I think extattr_get_file/fd() do that
[2018-05-17 19:11:40] <aniketp41> @somers_, can you see "123245" here: header,101,11,extattr_get_fd(2),0,Fri May 18 06:11:14 2018, + 578 msec,argument,2,0x3,fd,text,user,text,authorname,subject,root,root,wheel,root,wheel,9972,7530,56286,10.0.2.2,return,success,12345,trailer,101,
[2018-05-17 19:12:33] <aniketp41> after return,success. That is the size of buffer I pass into the function. I guess I should use it into the regex?
[2018-05-17 19:34:54] <somers_> Why do you need such a big buffer?
[2018-05-17 20:25:30] <aniketp41> No @somers_, I was just testing it to make sure it actually stores the return value (sizeof the buffer).Here is the test case: https://pastebin.com/gARzsAdA
[2018-05-17 20:27:35] <aniketp41> err, "%lu" instead of "%d" for sizeof() in the snippet
[2018-05-17 23:30:00] <aniketp41> ping @somers_, does the testcase look okay?
[2018-05-17 23:57:49] <somers_> yeah, it looks fine
[2018-05-18 15:54:27] <aniketp41> Hi @somers_, as of now I have 270 test-cases and it's been successfully passing everytime: https://pastebin.com/LeQafAdF
[2018-05-18 15:54:27] <aniketp41>  I have also been commiting to the socsvn repository here: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/
[2018-05-18 15:54:59] <aniketp41> @somer_ can you check if it works for you this time?
[2018-05-18 15:55:21] <aniketp41> i.e with large number of test-cases,how many of them cause the issue?
[2018-05-18 15:55:24] <somers_> if what works for me?
[2018-05-18 15:57:50] <aniketp41> @somers_, I was curious about how the problem which has been recurring lately fares out with these many tests run at once.
[2018-05-18 15:58:29] <somers_> You mean you want me to run all of the tests with auditd not already running, to see what the pass rate is?
[2018-05-18 15:59:36] <aniketp41> Yes, that would be great. Although they do take up about 5 minutes now..
[2018-05-18 15:59:49] <aniketp41> @somers_ 
[2018-05-18 16:00:59] <somers_> ok.  It'll take awhile to check out the SVN tree, though
[2018-05-18 16:01:26] <somers_> what is the SVN url?
[2018-05-18 16:01:34] <somers_> for the repository I mean, not the web interface
[2018-05-18 16:03:38] <aniketp41> I guess I used the same url, which was provided at this link you had earlier sent me: https://wiki.freebsd.org/SummerOfCodeSubversion
[2018-05-18 16:03:38] <aniketp41> Btw, I even keep the tests updated in my git repository so that might be a lot quicker I guess: https://github.com/aniketp/AuditTestSuite/tree/master/src
[2018-05-18 16:04:00] <aniketp41> @somers_ 
[2018-05-18 16:04:54] <somers_> Ok, looks like anonymous access works
[2018-05-18 16:07:50] <aniketp41> OKay, although I think Gavin had added you and @gnn in the soc-2018 group: https://svnweb.freebsd.org/socsvn/svnadmin/conf/authz?revision=337226&view=markup#l6
[2018-05-18 16:09:04] <aniketp41> @somers_ 
[2018-05-18 16:22:17] <aniketp41> Btw @somers_, I had a few observations and a doubt: I couldn't find any reference to audit_events i.e, xstat(2), lxstat(2), statvfs(2) in freebsd src. So am I missing something or can I safely assume that they don't exist in FreeBSD.
[2018-05-18 16:22:17] <aniketp41> Also, there was a family of "fa" audit events related to access control lists. All relevant documentation mentioned them as library functions but the audit event list mentions them as the syscalls. : https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L225
[2018-05-18 16:22:17] <aniketp41> Also, I couldn't audit them nor dtrace (the command you had sent me) showed any probe match...
[2018-05-18 16:22:34] <aniketp41> @rwatson @somers_ 
[2018-05-18 16:23:57] <somers_> xstat doesn't exist on FreeBSD AFAIK.  But you probably shouldn't worry about it.  What you should worry about is ensuring that every syscall that does exist gets audited, whether or not it's listed in audit_events
[2018-05-18 16:25:17] <somers_> As for stuff like statvfs, look in lib/libc to see what it's really doing, and what underlying syscalls it uses
[2018-05-18 16:25:19] <aniketp41> So are events like: acl_get_fd, acl_get_file etc considered syscalls? I guess they are library functions and my observations is that they don't get audited. @somers_ , what should I do about it
[2018-05-18 16:26:09] <somers_> Just worry about the list of actual syscalls; not the list of audit events.  The most important thing to do is to find any syscalls that aren't auditted.
[2018-05-18 16:33:25] <aniketp41> Okay @somers_, will do that. So till now the issue is with lgetfh(2).
[2018-05-18 16:33:25] <aniketp41> Btw even statvfs(3) was not audited.
[2018-05-18 16:33:53] <aniketp41> Weird how no library function is being audited
[2018-05-18 16:36:26] <somers_> Not so weird.  The audit functionality is implemented at the syscall interface
[2018-05-18 16:38:01] <aniketp41> Okay. So I think I should move on to file-attribute-modify audit class. Since all possible syscalls have been tested I think..
[2018-05-18 16:40:09] <somers_> Did you look in sys/kern/syscalls.master ?
[2018-05-18 16:40:32] <somers_> Also, sys/compat/freebsd32/syscalls.master?
[2018-05-18 16:41:12] <somers_> There's also the Linuxulator: sys/amd64/linux/syscalls.master
[2018-05-18 16:43:04] <aniketp41> As in, look for syscalls?
[2018-05-18 16:43:37] <somers_> yeah
[2018-05-18 16:44:00] <aniketp41> @somers_, but how will I identify the audit_classes. I used syscalls.master for reference to cross validate some syscalls which I thought did not exist. Like creat(2)
[2018-05-18 16:44:01] <somers_> Oh, and have you auditted ioctl(2)?
[2018-05-18 16:44:13] <aniketp41> That is under "io" I think
[2018-05-18 16:44:23] <aniketp41> I haven't moved to it yet
[2018-05-18 16:44:55] <aniketp41> I've just done "fc", "fw", "fr", "fd", "fa" and some in "fm"
[2018-05-18 16:45:20] <aniketp41> "nt", "pc", "ad", "io" and some others are left
[2018-05-18 16:45:53] <somers_> Well, regardless of the order in which you do things, one way or another you need to test every syscall.  Going through syscalls.master files is the only way to cover them all.
[2018-05-18 16:46:39] <aniketp41> Yeah, I'll keep it as a reference to make sure that I don't miss any in the end
[2018-05-18 16:49:56] <aniketp41> Btw @somers_, did you try running the tests? Hopefully they should give a better insight on maybe which tests are failing..
[2018-05-18 16:50:09] <somers_> still checking out svn
[2018-05-18 16:52:31] <aniketp41> Hmm, when I checked out for the first time, with the connection I had, I watched an entire movie and it finished checking out :D
[2018-05-18 16:53:05] <somers_> that's surprising.  Do you not live at the University?
[2018-05-18 16:53:55] <aniketp41> Yes I'm currently at here. Although connection at the lab is way faster than at the hostel rooms. So maybe that was the issue.
[2018-05-18 16:57:11] <somers_> could be.  SVN is also pretty latency-sensitive
[2018-05-18 16:57:29] <aniketp41> Btw @somers_, what happened to Shivansh's smoketestsuite project? Last we talked, he said that there was some issue with the last differential which would place the test generation tool within tools/tools
[2018-05-18 16:58:04] <somers_> I don't recall.  Check Phabricator.
[2018-05-18 19:49:32] <aniketp41> Hi @somers_, any updates on the test?
[2018-05-18 19:49:47] <somers_> Still checking out
[2018-05-18 22:40:06] <somers_> Done checking out.  6h10m.  But the tests don't compile on FreeBSD 12
[2018-05-18 22:40:16] <somers_>       format specifies type 'unsigned int' but the argument has type 'ino_t'
[2018-05-18 22:40:16] <somers_>       (aka 'unsigned long') [-Werror,-Wformat]
[2018-05-18 22:40:16] <somers_>         snprintf(regex, 30, "fstat.*%u.*return,success", statbuff.st_ino);
[2018-05-18 22:40:16] <somers_>                                     ~~                   ^~~~~~~~~~~~~~~
[2018-05-18 22:40:18] <somers_>                                     %lu
[2018-05-18 22:40:20] <somers_>       format specifies type 'unsigned int' but the argument has type 'ino_t'
[2018-05-18 22:40:22] <somers_>       (aka 'unsigned long') [-Werror,-Wformat]
[2018-05-18 22:40:24] <somers_>         snprintf(regex, 30, "fstatfs.*%u.*return,success", statbuff.st_ino);
[2018-05-18 22:40:26] <somers_>                                       ~~                   ^~~~~~~~~~~~~~~
[2018-05-18 22:40:28] <somers_>                                       %lu
[2018-05-18 22:48:47] <aniketp41> @somers_ so will it be %lu instead of %u for st_ino?
[2018-05-18 22:50:12] <somers_> ino_t grew from 32 to 64 bits in FreeBSD 12.
[2018-05-18 22:50:41] <somers_> Your tests must be committed into 12 first, then they can be backported to 11.  So you should make them compile on 12.
[2018-05-18 23:08:09] <aniketp41> So @somers_, should I install a completely new "12-CURRENT" as you had said earlier that I can't updated it from 11-RELEASE-p4?
[2018-05-18 23:08:43] <aniketp41> Is there a way to check my tests on 12 without having to upgrading to it?
[2018-05-18 23:08:52] <aniketp41> *upgrade
[2018-05-18 23:10:16] <aniketp41> I had the freebsd src "/usr/src" and that's where I've been compiling my tests till now
[2018-05-18 23:15:24] <somers_> You can build 12 from 11.1, but you have to build the entire thing
[2018-05-18 23:15:39] <somers_> cd /usr/src; make -jwhatever buildworld
[2018-05-18 23:15:50] <somers_> And you won't be able to run the tests that way.
[2018-05-18 23:16:07] <somers_> In the long term, it's probably better to setup a 12.0 VM
[2018-05-19 16:04:37] * somers__ (~somers@63.224.80.52) join
[2018-05-19 16:11:20] * somers_ (~somers@63-224-80-166.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-19 18:40:55] <aniketp41> Hi @somers_, I setup a "12.0-CURRENT" VM and placed my tests within /usr/src/tests/sys/audit and tried to compile but it gave me the same error. So I fixed it and the compilation was successful. But this time it didn't generate any Kyuafile for me. Also after doing "make" in the audit directory, nothing seemed to change. SO how would I generate projects binary this way?
[2018-05-19 18:42:31] <aniketp41> @somers__ 
[2018-05-19 20:13:42] <somers__> You have to do "make install"
[2018-05-19 20:32:33] <aniketp41> Hi @somers_, I tried make install but it for some reason looks for presence of "file-create" in the test-suite, which is apparently non-existent:
[2018-05-19 20:32:33] <aniketp41> (cd /usr/src/tests/sys/audit &&  DEPENDFILE=.depend.file-create  NO_SUBDIR=1 make -f /usr/src/tests/sys/audit/Makefile _RECURSING_PROGS=t   PROG=file-create  install)
[2018-05-19 20:32:33] <aniketp41> install  -s -o root -g wheel -m 555   file-create /usr/tests/sys/audit/file-create
[2018-05-19 20:32:33] <aniketp41> install: /usr/tests/sys/audit/file-create: No such file or directory
[2018-05-19 20:33:02] <aniketp41> ping @somers__ 
[2018-05-19 20:34:54] <somers__> Check it into your svn location and I'll take a look
[2018-05-19 20:44:54] <aniketp41> Yes @somers__, I had updated it earlier: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/file-attribute-access.c?r1=337233&r2=337240&pathrev=337240
[2018-05-19 20:55:28] <somers__> I'm unable to make a connection.  Can you?
[2018-05-19 21:39:08] <aniketp41> Yes @somers__, I was able to access the url..
[2018-05-20 01:40:08] * somers (~somers@2602:3f:e050:3400:e23f:49ff:fe44:d7b6) join
[2018-05-20 01:40:09] * somers__ (~somers@63.224.80.52) quit Read error: Connection reset by peer
[2018-05-20 02:20:12] <somers> I had no problem building your test suite.  Make sure you don't have any object files in the source directory
[2018-05-20 08:43:10] <aniketp41> Wow, I got my first kernel panic :D => https://pastebin.com/u3DqGTS1
[2018-05-20 08:43:10] <aniketp41> Most of the hex addresses were similar to your case earlier: Although in my case the cpuid is 1
[2018-05-20 08:43:10] <aniketp41> @somers 
[2018-05-20 08:52:17] <aniketp41> I was able to install the tests in /usr/tests and ran the tests from there. Although the tests were successful in case auditd is already running, I got this kernel panic when auditd is not already running...
[2018-05-20 08:53:02] <aniketp41> Btw @somers, what is the recommended way to get out of the kernel panic? Like I had to forcefully shut down the VM and in process lost all unsaved data :/
[2018-05-20 13:09:53] <somers> @aniketp41 That panic is the one whose patch is here: https://reviews.freebsd.org/D15381
[2018-05-20 13:10:06] <somers> If you type "reboot" at the panic prompt, your VM will reboot
[2018-05-20 13:10:23] <somers> You can also type "dump" to take a kernel dump before you reboot
[2018-05-20 13:11:43] <aniketp41> Yes @somers_, I had seen the patch. Also, I was wondering how I can fix the recurring panic. Like you had deleted one line in the patch so do I have to build the kernel after introducing that change?
[2018-05-20 13:11:55] <aniketp41> Sorry, @somers 
[2018-05-20 13:12:18] <somers> yep
[2018-05-20 13:14:38] <aniketp41> Okay will do that. Btw @somers, what was the status of the tests? You were able to build the test-suite right?
[2018-05-20 13:14:38] <aniketp41> Also, I had created a bug about another syscall that I noticed, wasn't audited: chflagsat(2) https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228374
[2018-05-20 15:45:16] <somers> I"ve been running the tests on loop ever since last night.  No failures yet
[2018-05-20 16:44:50] <aniketp41> That's good news! So should I update the diff with all the latest tests or wait for it to get commited first? Afaiu, D15381 will need to be commited before D15286, right?
[2018-05-20 16:44:50] <aniketp41> Also @somers, I included my tests in the /tests/sys/audit and then ran buildworld. It failed with some error messages that mentioned my test-cases.. Do I need to make some more changes apart from what is there in D15286 already? 
[2018-05-20 16:48:59] <somers> what were the buildworld error messages?
[2018-05-20 16:58:58] <aniketp41> @somers well I had closed the shell. I'm running it again
[2018-05-20 18:39:24] <aniketp41> Btw @somers, my disk space seems to have filled up. Is there some outdated files I can delete after "installworld"? I saw some commands like: "make delete-old-libs"
[2018-05-20 18:40:03] <somers> that won't help
[2018-05-20 18:40:22] <somers> You can delete stuff in /usr/obj, but you'll just have to recreate it when next you buildworld
[2018-05-20 18:41:25] <somers> You should probably just increase your VM's disk size.  Expanding the root file system is possible with both root on UFS and root on ZFS
[2018-05-20 20:46:46] <aniketp41> Hi @somers, currently I've expanded VM space and I'm doing "buildworld". Also, checked in some more tests. (Total 306 now). 
[2018-05-20 20:46:46] <aniketp41> For chflagsat(2), I've added a "atf_tc_expect_fail()". Is it fine, considering that it does not get audited?
[2018-05-20 20:47:24] <somers> Yep
[2018-05-20 20:53:18] <aniketp41> Btw @somers, isn't kernel development a bit too cumbersome? As in, do you have to build the kernel for every change in source code? Is there a way to make this process a bit faster? (Cause I couldn't do much other than just trying to build the kernel)
[2018-05-20 20:53:44] <somers> Yep.  Do "make -DKERNFAST -jwhatever buildkernel"
[2018-05-20 20:54:02] <somers> The -DKERNFAST means don't do a clean first, and don't rescan dependencies either
[2018-05-20 20:54:59] <aniketp41> And the "buildworld" is not done more than once, right? Cause it looks to me that doing it more than once would be very unfeasible
[2018-05-20 20:55:17] <somers> You don't need to repeat buildworld if you're testing a kernel change
[2018-05-20 20:55:29] <somers> Nor do you need to repeat buildworld if you're only testing a small part of world
[2018-05-20 21:04:58] <aniketp41> Okay sure, I'll keep this mind the next time. Btw @somers shall I add all these new tests for review? (In D15286)
[2018-05-20 21:05:05] <aniketp41> *in
[2018-05-20 21:05:27] <somers> No, let's not.  That review is so close that I'd rather not add anything
[2018-05-20 21:06:50] <aniketp41> Hmm okay. Btw doing this would probably take up a lot of time in reviewing and revising the changes (5875 SLOC) 
[2018-05-20 21:11:17] <aniketp41> Btw @somers, how did the issues get resolved? I mean, I haven't done any changes in the "utils.c" or the test-cases. A while back they were inconsistent, now they are all passing in your case.
[2018-05-20 21:12:55] <somers> Yeah, but they didn't fail consistently either.  The "incomplete audit record" bug has always been intermittent.
[2018-05-20 23:20:18] <aniketp41> Hi @somers, I rebooted into the newly built kernel and the kernel panic seems to have gone. But when I installed the tests in the test-suite, for the very first time I got some wide-range of test-failures (most of them: broken test body (never occurred before)): https://pastebin.com/ETaDqXBT
[2018-05-20 23:20:38] <aniketp41> I'm running them again and the number of test failures reduced but they are still there
[2018-05-20 23:21:49] <somers> The signal 11 and signal 10 failures are the most interesting.  Those are both segfaults.  Have you tried debugging either?
[2018-05-20 23:22:15] <somers> Oh, this could also happen if your world is newer than your kernel.  How did you install the VM, and how did you reinstall the kernel?
[2018-05-20 23:25:48] <aniketp41> They're random everytime, not sure how to debug a specific test-case. I also got a lot of "Audit init control failed " messages in the main VM window.
[2018-05-20 23:25:48] <aniketp41> @somers I grabbed a 12-CURRENT iso image https://download.freebsd.org/ftp/snapshots/amd64/amd64/ISO-IMAGES/12.0/, installed it normally. 
[2018-05-20 23:25:48] <aniketp41> For reinstallation, "cd /usr/src" > "make -j4 buildworld" > "make -j4 buildkernel" > "make installkernel" > "reboot" > "make installworld" > "reboot"
[2018-05-20 23:27:04] <somers> Your best bet to debug is probably to get a core file
[2018-05-20 23:27:39] <somers> Actually, you did leave a few steps out, though in this case you can probably get away with it
[2018-05-20 23:28:14] <aniketp41> Oh, @somers I followed the guide here: https://www.freebsd.org/doc/handbook/makeworld.html
[2018-05-20 23:28:20] <somers> Before doing "installworld", you should do "mergemaster -p -U"
[2018-05-20 23:28:31] <somers> After doing installworld, you should do "mergemaster -U"
[2018-05-20 23:29:42] <aniketp41> Okay @somers, although now that I've done "installworld", how should I get to the stage before doing "installworld"?
[2018-05-20 23:30:20] <somers> You can't.  Just do "mergemaster -U"
[2018-05-20 23:33:23] <aniketp41> Okay, I ran the command and after that I'm currently running the tests: file-attribute-access:extattr_get_fd_success  ->  broken: Premature exit; test case received signal 6 (core dumped)  [0.413s]
[2018-05-20 23:33:23] <aniketp41> @somers, I got another one now
[2018-05-20 23:33:41] <aniketp41> Probably there are more to come, since the test is running
[2018-05-21 00:04:52] <somers> Ok, now try to debug the core with gdb
[2018-05-21 09:37:44] <aniketp41> @somers, I couldn't find any core file. Wouldn't Kyua just clean them up after completion?
[2018-05-21 11:28:25] <aniketp41> Btw @somers, I did "installkernel" > "mergemaster -p -U" > "installworld" > "mergemaster -U" and I've run them twice now and only one test-case has failed yet:
[2018-05-21 11:28:25] <aniketp41> (Second time all passed) 
[2018-05-21 11:52:57] <aniketp41> Third time one failed: "file-attributre-modify:open_write_creat_trunc_success". On using kyua debug for that particular test case, I saw that once in a while a lot of auditon(2) events were being generated by audit startup, that caused it to timeout maybe? 
[2018-05-21 11:53:38] <aniketp41> Otherwise on most runs tests do pass for me. And those segfaults seem to have gone away
[2018-05-21 12:48:24] <aniketp41> Okay, after 5-6 runs after the first, none tests failed. I'm not sure why one or two failed initially..
[2018-05-21 15:26:31] <aniketp41> So megaTherion: Is it different from UFS? As in, I don't have much experience regarding various file-systems in FreeBSDx
[2018-05-21 16:49:38] <somers> who or what is megaTherion?
[2018-05-21 18:18:18] <aniketp41> Hi @somers, I was trying to understand about "whiteout" objects in union filesystem as I would need it to audit "undelete(2)". So I had asked a question regarding that on #freebsd channel on freenode
[2018-05-21 18:18:49] <aniketp41> It turns out, I can't do that in UFS (which I am currently using)
[2018-05-21 18:19:11] <somers> Yikes.  unionfs doesn't work very well.  Pretty much nobody uses it anymore.
[2018-05-21 18:36:50] <aniketp41> Okay, so I guess I can skip "undelete(2)" then? 
[2018-05-21 18:36:50] <aniketp41> Also, I was having another weird issue. I can't get mprotect(2) to fail, no matter whatever I do. Like passing in invalid memory buffers or invalid lengths or invalid flags. It always compiles and always returns 0. :/
[2018-05-21 18:36:50] <aniketp41> @somers, can you suggest some way to do it? https://pastebin.com/PZEnHa6e
[2018-05-21 18:37:52] <somers> Better not to skip it entirely.  You can still audit the failure case.
[2018-05-21 18:38:52] <somers> Look at the source.  Function kern_mprotect in file sys/vm/vm_mmap.c
[2018-05-21 18:39:06] <somers> that'll show you how to make it fail
[2018-05-21 20:14:42] <aniketp41> @somers I looked at the code and tried to figure out a way to make it fail, and the only possible way it seemed was when (addr + size) > addr ; or when size is negative. But even very large negative values don't fail the tests.
[2018-05-21 20:14:42] <aniketp41> Btw is it possible to use mmap(2) to manipulate mprotect(2) to fail?
[2018-05-21 20:15:07] <aniketp41> *is not >
[2018-05-21 20:15:32] <somers> By far the easiest way is that first EINVAL clause
[2018-05-21 20:15:56] <aniketp41> Yes, that is the condition of comparing addr and size, right?
[2018-05-21 20:15:56] <somers> what values did you try?
[2018-05-21 20:16:00] <somers> yeah
[2018-05-21 20:16:17] <aniketp41> mprotect(NULL, -400000, PROT_NONE);
[2018-05-21 20:16:38] <aniketp41> And valid malloc'd buffer in place of NULL too
[2018-05-21 20:21:21] <somers> Well, the NULL case obviously isn't going to work.  NULL is 0, and nothing is going to be less than that.
[2018-05-21 20:21:44] <somers> Why don't you try using a hardcoded (invalid) addr?
[2018-05-21 20:27:52] <aniketp41> Okay, I got it to work using invalid addr (-1) :) . But the compiler generated warning: "-Wint-conversion" 
[2018-05-21 20:28:36] <aniketp41> @somers, is there a workaround the warning?
[2018-05-21 20:29:02] <aniketp41> Cause I think the compiler will always notice the invalid addr
[2018-05-21 20:29:44] <somers> Yeah.  Use SIZE_MAX instead of -1.  The compiler is complaining because you're coercing a signed value to an unsigned
[2018-05-21 20:31:44] <aniketp41> I think any integer value should give this warning: "warning: initialization makes pointer from integer without a cast "
[2018-05-21 20:34:01] <somers> Yeah.  But you can handle that just with a (void*)
[2018-05-21 20:36:15] <aniketp41> Oh right, I had tried casting it earlier, but for some reason it didn;t work. (I guess that was because I forgot to enclose -1 with (void *)).
[2018-05-21 20:36:15] <aniketp41> Now it's working, thanks @somers!
[2018-05-21 20:36:20] <somers> np
[2018-05-21 20:39:18] <aniketp41> But the audit record still doesn't contain anything useful: "header,68,11,mprotect(2),0,Tue May 22 02:07:59 2018, + 353 msec,subject,root,root,0,root,0,2938,2839,60856,10.0.2.2,return,failure : Invalid argument,4294967295,trailer,68,
[2018-05-21 20:39:18] <aniketp41> "
[2018-05-21 20:39:18] <aniketp41> This might work for failure case but a lot of similar successful audit records were created for success case
[2018-05-21 20:40:26] <somers> Are you using a 32-bit VM?
[2018-05-21 20:44:08] <aniketp41> No it's amd64
[2018-05-21 20:44:12] <aniketp41> @simers
[2018-05-21 20:44:18] <aniketp41> @somers 
[2018-05-21 20:44:45] <somers> Then where did the 4294967295 come from?
[2018-05-21 20:45:30] <aniketp41> I'm not really sure. I've noticed very large numbers in every test-failure case. For success case most contained return values @somers 
[2018-05-21 20:46:42] <somers> It would be good to track that down.
[2018-05-21 20:47:36] <somers> In general, when you're auditing stuff for security purposes, you need to know what _everything_ means.  Because nefarious stuff often looks confusing
[2018-05-21 20:50:56] <aniketp41> Yes @somers, I'd try to do that. Btw for success case, notice the 0: header,68,11,mprotect(2),0,Tue May 22 02:18:54 2018, + 414 msec,subject,root,root,0,root,0,3866,2839,60856,10.0.2.2,return,success,0,trailer,68,
[2018-05-21 20:50:56] <aniketp41> Also, have a look at this implementation in which I used the return value to pin-point to the system call instance triggered by us: https://github.com/aniketp/AuditTestSuite/blob/master/src/file-attribute-modify.c#L109
[2018-05-21 20:52:44] <aniketp41> @somers I got it: 4294967295 is (2^32 - 1) which is the limit for "int"
[2018-05-21 20:53:04] <somers> Yeah, but why?  None of those arguments are int
[2018-05-21 20:53:33] <aniketp41> return is int, right? So this should make sense?
[2018-05-21 20:54:09] <aniketp41> I mean, maybe the audit record can't contain negative values so they circled back to largest int?
[2018-05-21 20:54:50] <somers> Ok.  I saw "argument" and assumed that field was related to the arguments.  If it's actually the return value, then it makes sense
[2018-05-21 20:54:55] <aniketp41> The format of audit record can be: "return,{return-status},{return-value}"
[2018-05-21 20:54:58] <somers> Still, I don't know why it's formatted as unsigned
[2018-05-22 01:51:07] * somers_ (~somers@63-224-81-229.hlrn.qwest.net) join
[2018-05-22 01:52:33] * somers (~somers@2602:3f:e050:3400:e23f:49ff:fe44:d7b6) quit Ping timeout: 252 seconds
[2018-05-23 00:41:41] <aniketp41> Hi @somers_, I'm trying to audit revoke(2) which simply requires a const char *path as the argument. But passing any path always returns in a failure: return,failure : Invalid argument
[2018-05-23 00:41:56] <aniketp41> What might I be missing here?
[2018-05-23 01:18:13] <somers_> revoke(2) is normally only used on terminal devices.  Try creating a pseudotermina;l
[2018-05-23 01:43:37] <aniketp41> Sure, will try to do that. Btw @somers_, aren't we allowed to dynamically allocate memory in Kyua test cases? I tried to do so for munmap(2). and this code returns 0 but kyua test case returns segfault https://pastebin.com/dsdxhgrV
[2018-05-23 02:01:06] <aniketp41> Okay, I got it to work, I first mapped a memory segment using mmap(2) and then simply un-mapped it
[2018-05-23 16:37:37] <aniketp41> Hi @somers_, the man-page of execve(2) syscall says that successful call has no process to return to. So will it ever show up, "return,success" in the audit record?
[2018-05-23 16:37:37] <aniketp41> I've been trying various implementations and the obvious errors return failure with appropriate reasons but the code which looked right always returned "return,failure: Unknown error". Is it because successful execve(2) call never returns? 
[2018-05-23 16:38:35] <somers_> Are you saying that you did in fact get an audit record for a successful invocation?
[2018-05-23 16:38:56] <aniketp41> Nope, never. Been trying to get one
[2018-05-23 16:39:39] <aniketp41> I mean, it always rteturns failure. For what looks a correct approach, @somers_ 
[2018-05-23 16:39:41] <somers_> So what returned "return,failure: Unknown error"
[2018-05-23 16:39:53] <aniketp41> Okay, I'll show you the code
[2018-05-23 16:40:03] <somers_> Does it return a failure record for a successful invocation?
[2018-05-23 16:41:55] <aniketp41> Man page says execve(2) doesn't have a success return. It simply overlays the calling process. @somers_ 
[2018-05-23 16:42:33] <somers_> Yeah.  But I don't understand what you're problem is.  What are you expecting to happen, and what is happening instead?
[2018-05-23 16:44:18] <aniketp41> If the invocation was successful, it should not continue with the original program. 
[2018-05-23 16:44:18] <aniketp41> So my question was whether my analogy is wrong? or will it never actually return success. I'm thinking it does "Unknown error" when the invocation was successful since the original process never returns?
[2018-05-23 16:45:33] <somers_> what does "Unknown error" ?
[2018-05-23 16:46:15] <aniketp41> This snippet: https://pastebin.com/kGTDV27h
[2018-05-23 16:46:50] <somers_> I mean, "what is printing the error message"?
[2018-05-23 16:46:57] <somers_> Evidently not Kyua
[2018-05-23 16:48:00] <aniketp41> Yeah, I used those programs (in pastebin link) and checked auditpipe from a separate window. 
[2018-05-23 16:48:00] <aniketp41> header,142,11,execve(2),0,Wed May 23 16:33:45 2018, + 375 msec,exec arg,script,hello,world,path,/root/test/script,attribute,755,root,0,77,4574855,9149967,subject,root,root,0,root,0,1626,752,50338,10.0.2.2,return,failure: Unknown error: 201,4294967295,trailer,142,
[2018-05-23 16:49:22] <somers_> So you're saying that even when execve succeeds, auditpipe reports that it failed?
[2018-05-23 16:50:16] <aniketp41> Like, the execution of the above programs never prints the final printf() statement, suggesting the invocation was successful and still auditpipe returned "Unknown error"
[2018-05-23 16:50:16] <aniketp41> @somers_, Yes, precisely! Although I thought I might be wrong in my analogy
[2018-05-23 16:51:26] <somers_> Well, I don't know why it prints that.  You'd have to look into the implementation.
[2018-05-23 16:53:28] <aniketp41> Well what I think happens is that, since the program (in successful invocation) never returns (The new process takes over). Kyua doesn't have an explicit return value to check whether it passed or failed. It simply returns "Unknown error". 
[2018-05-23 16:54:11] <aniketp41> Maybe like the default part of any switch statement, where you don't know what happened 
[2018-05-23 16:55:01] <somers_> I thought you said this had nothing to do with Kyua?
[2018-05-23 16:56:13] <aniketp41> Sorry, auditpipe
[2018-05-23 16:57:35] <somers_> You'd have to look at the code to see what's going on.  I was under the impression that the kernel generated the entire audit record when the system call returned, but evidently that's not true.
[2018-05-23 16:57:56] <somers_> Have you tried _exit(2) ?
[2018-05-23 16:59:36] <aniketp41> I'll try that next @somers_ 
[2018-05-23 16:59:36] <aniketp41> Btw when I make deliberate error: Like wrong script name: It actually returns, printing the final printf() statement in the "pastebin code" and auditpipe shows this:
[2018-05-23 16:59:36] <aniketp41> header,116,11,execve(2),0,Wed May 23 16:57:55 2018, + 294 msec,exec arg,script,hello,world,path,/root/test/script.sh,subject,root,root,0,root,0,2238,752,50338,10.0.2.2,return,failure : No such file or directory,4294967295,trailer,116,
[2018-05-23 17:11:29] <aniketp41> @somers_, btw is it possible that any command line utility causes kernel panic?
[2018-05-23 17:11:29] <aniketp41> Cause I have an "exa" (port) alias for "ls" and when I do that, Kernel panics. While actual "ls" command doesn't cause one
[2018-05-23 17:12:31] <somers_> Sure.  Just do "sysctl debug.kdb.panic=1"
[2018-05-23 17:13:20] <aniketp41> It says: "Acquiring blockable sleep lock with spinlock or critical section held evclass_lock @ /usr/src/sys/security/audit/audit_bsm_db.c:119"
[2018-05-23 17:14:40] <somers_> suspicious location.  Do you have any local kernel modifications?  Are you running with the patch from D15381 ?
[2018-05-23 17:15:31] <aniketp41> Yes, @somers_, I removed that line and built the entire world. And then I've been running it since
[2018-05-23 17:15:57] <aniketp41> *the line removal on D15381
[2018-05-23 17:15:58] <somers_> but no other changes?
[2018-05-23 17:16:48] <aniketp41> No I think not..
[2018-05-23 17:17:16] <aniketp41> It just happened after I created a sample C program with "_exit(2)" but didn't run it yet..
[2018-05-23 17:17:36] <aniketp41> Before that it was wokring perfectly. The change doesn't make sens
[2018-05-23 17:18:23] <somers_> Do you get the panic when auditd is stopped?
[2018-05-23 17:28:00] <aniketp41> No @somers_, it only happened when it was running. And another observation. It only happens when I set system wide audit flag as "pc" (To check _exit(2)'s audit). In normal cases, it doesn't happen whether auditd is running or not 
[2018-05-23 17:30:24] <somers_> Good info.  Go ahead and file a bug.  Make sure to include the full stack trace.
[2018-05-23 17:30:45] <somers_> I gtg.  Back in a few
[2018-05-23 18:20:31] <aniketp41> Sure, btw @somers_, "sysctl debug.kdb.panic=1" also causes kernel panic. Irrespective of audit mask or whether auditd is running or not
[2018-05-23 18:22:31] <aniketp41> Also, I didn't find any "_exit" in the audit record (assuming audit mask has flag="pc"), either with _exit(1) or _exit(0).
[2018-05-23 18:22:31] <aniketp41> However, there were a bunch of "exit(2)" in the record. However, they all returned "success"
[2018-05-23 20:24:41] <aniketp41> @somers_, I created a bug report: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228444
[2018-05-23 20:24:41] <aniketp41> I couldn't assign the bug to you so added you to subscribers
[2018-05-23 20:25:51] <somers_> thanks
[2018-05-23 20:26:06] <somers_> BTW, causing a panic is exactly what "sysctl debug.kdb.panic=1" is supposed to do
[2018-05-23 20:33:56] <aniketp41> Okay, I see. It got me worried as to why that was happening. 
[2018-05-23 20:36:12] <aniketp41> Also, @somers_, for execve, I'll need a shell script to execute (which should be in the same directory). So do I need to specify something in the Makefile so as to ensure that the "make install" places it in the test-suite?
[2018-05-23 20:36:53] <somers_> Nah, you don't need a shell script.  Just call fork() in the testcase, have the child execve(), and have the parent wait() on the child
[2018-05-23 20:37:01] <aniketp41> uname -a: FreeBSD bsdtest 12.0-CURRENT FreeBSD 12.0-CURRENT #1: Mon May 21 20:10:48 IST 2018     root@bsdtest:/usr/obj/usr/src/amd64.amd64/sys/GENERIC  amd64
[2018-05-23 20:37:33] <somers_> paste it into the issue
[2018-05-23 20:37:45] <aniketp41> Yeah I did already
[2018-05-23 20:38:51] <aniketp41> Not sure why uname shows the wrong date. Although it is correctly set
[2018-05-23 20:39:33] <somers_> That's the date when the kernel was compiled
[2018-05-23 20:44:03] <aniketp41> Oh, okay. Makes sense now!
[2018-05-23 20:52:33] <aniketp41> @somers_, in the test-case, why do we need fork() & wait() along with execve(). Can't we evaluate the execve() syscall directly?
[2018-05-23 20:52:51] <aniketp41> As in, why do we need to create a child process?
[2018-05-23 20:53:05] <somers_> Doing that will quit the Kyua process, and you don't want to do that
[2018-05-23 20:55:23] <aniketp41> Okay so even if I'm calling execve() from child process, I'll need an executable to call as the first argument of execve(), that is why I was asking about the script. 
[2018-05-23 20:55:45] <aniketp41> Or is there any workaround that? @somers_ 
[2018-05-23 20:56:41] <somers_> Well, any executable will work.  Like /usr/bin/true
[2018-05-23 20:58:27] <aniketp41> Yes I initially thought about it. But in case that executable is not-present in the system, the tests might fail. Like, it's possible that I can just remove that particular executable. So will that be the right approach then? 
[2018-05-23 21:06:11] <aniketp41> Also, @somers_, what should I do about the "return,failure: Unknown error". I'm positive that it only happens when execve() successfully overlays the current process and the current process never returns. Which essentially means our test was successful
[2018-05-23 21:07:10] <somers_> You can count on pretty much anything in /usr/bin being present
[2018-05-23 21:07:28] <somers_> A few things you shouldn't count on.  Those are the things that can be disabled by src.conf.  But true(1) is not among them.
[2018-05-23 21:07:56] <somers_> You should figure out why audit(4) is returning the wrong thing
[2018-05-23 21:20:18] <aniketp41> Okay, btw @somers_, where in openbsm can I find the relevant code? Which actually decides what should be in the audit record..
[2018-05-23 21:20:38] <aniketp41> Then I will have a look why its returning a failure
[2018-05-23 21:20:57] <somers_> In this case, you probably need to look in the kernel, not openbsdm
[2018-05-23 22:17:27] <aniketp41> @somers_, I had a look at the "sys/kern/kern_exec.c"'s implementation of execve(). Assuming everything was successful. The flow order to me looked something like:  sys_execve() -> pre_execve() -> exec_copy_args() -> kern_execve() -> do_execve(). Now, do_execve() is where most of the magic happened. And I looked the various return possibilities in do_execve() and it looked as if it only returned when we had some error defined by errno:
[2018-05-23 22:17:27] <aniketp41> return (error == 0 ? EJUSTRETURN : error);
[2018-05-23 22:17:27] <aniketp41> https://github.com/freebsd/freebsd/blob/master/sys/kern/kern_exec.c#L969
[2018-05-23 22:20:29] <aniketp41> So it looks like execve() never returns in the successful invocation. And since audit(4) doesn't get any return value. It probably returns the default case: Unknown error
[2018-05-23 22:21:16] <aniketp41> But I need to be sure of it. Can you please point me to the code where audit(4) checks for return of the event while creating the audit record. I'm kinda unable to find it
[2018-05-23 22:23:59] <aniketp41> @somers_ I also found this interesting comment in kern_execve(): https://github.com/freebsd/freebsd/blob/master/sys/kern/kern_exec.c#L337
[2018-05-23 22:36:37] <somers_> Checkout security/audit/audit_bsm.c:977 and security/audit/audit.c:680
[2018-05-23 23:37:54] <aniketp41> Hi @somers_, I had a look at the code of every file within "security/audit" and I had few observations:
[2018-05-23 23:37:54] <aniketp41> 1) This here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_token.c#L890
[2018-05-23 23:37:54] <aniketp41> the second argument is probably responsible for the 4294967295 instead of (-1): "u_int32_t ret"   [Same for 2 wrapper functions of 32/64 bit representations] which have return value as unsigned.
[2018-05-23 23:37:54] <aniketp41> 2) The part responsible for appending return status and value to the audit record here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L1737 
[2018-05-23 23:37:54] <aniketp41> passes the function "au_errno_to_bsm" for return status. 
[2018-05-23 23:37:54] <aniketp41> 3) au_errno_to_bsm() in audit_errno.c looks through the database of errno values within the same file for appropriate return status. But for our case, since there probably wasn't any return value, it simply passes the control to this part: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_errno.c#L727
[2018-05-23 23:37:54] <aniketp41> 4) Now here is the issue: I'm confident that the "Unknown error" is coming due to BSM_UNKNOWN_ERRNO but I can't find the string representation which is presented in the audit record.
[2018-05-23 23:37:54] <aniketp41> 5) But I did find this: 
[2018-05-23 23:37:54] <aniketp41> #define	BSM_ERRNO_UNKNOWN		250	/* OpenBSM-specific. */"
[2018-05-23 23:37:54] <aniketp41> at https://opensource.apple.com/source/xnu/xnu-1504.7.4/bsd/bsm/audit_errno.h but I'm not sure how that's helpful
[2018-05-23 23:40:03] <somers_> I believe the string representations are somewhere in contrib/openbsm
[2018-05-23 23:42:40] <somers_> should the `case AUE_EXECVE` code set ar_errno?  If it can determine that `execve` was successful, then it probably should.
[2018-05-23 23:58:20] <aniketp41> I think ar->ar_errno is simply passed to the function kaudit_to_bsm() whereas the switch case adds arguments for corresponding ar->ar_event. So case AUE_EXECVE doesn't do anything to the ar_errno. It simply adds the *argv, and *env arguments to the audit record which is confirmed here:
[2018-05-23 23:58:20] <aniketp41> header,138,11,execve(2),0,Wed May 23 21:14:26 2018, + 67 msec,exec arg,script,hello,world,path,/usr/bin/true,...
[2018-05-23 23:58:20] <aniketp41> But the part :
[2018-05-23 23:58:20] <aniketp41> 	tok = au_to_return32(au_errno_to_bsm(ar->ar_errno), ar->ar_retval);
[2018-05-23 23:58:20] <aniketp41> 	kau_write(rec, tok);  /* Every record gets a return token */
[2018-05-23 23:58:20] <aniketp41> writes the return status, value which for our case is Unknown
[2018-05-23 23:59:55] <aniketp41> Here, au_errno_to_bsm(ar->ar_errno) has this lookup function: bsm_lookup_errno_local(errno) which fails in our case and hence returns BSM_ERRNO_UNKNOWN
[2018-05-24 00:00:42] <aniketp41> But I still can't find the string representation to confirm my suspicion: Unknown error
[2018-05-24 00:00:48] <aniketp41> @somers_ 
[2018-05-24 00:04:23] <somers_> Yeah, but it _could_ change ar_errno.  The question is, should it?
[2018-05-24 00:04:55] <aniketp41> Oh you mean, implementing the feature?
[2018-05-24 00:05:13] <somers_> yeah
[2018-05-24 00:06:09] <aniketp41> But that would go against what other cases have been doing. And it's possible many more audit events behave similarly. It would be better to know which one's do it, maybe? 
[2018-05-24 00:06:32] <somers_> That's why _exit is so interesting
[2018-05-24 00:15:36] <aniketp41> Oooh, yes. It seems to be adding the retval as one of the members of "ar" and not as the conventional return status in the end (like the other functions), because it doesn't have any return (as in the man-page)
[2018-05-24 00:16:37] <aniketp41> And I guess this part here has something to do with it too: https://github.com/freebsd/freebsd/blob/master/contrib/openbsm/libbsm/bsm_token.c#L395
[2018-05-24 00:17:13] <aniketp41> Oh no it's not special ^
[2018-05-24 00:27:19] <aniketp41> But @somers_, assuming both execve() and _exit() don't return in a particular scenario. Should exit also not return  BSM_ERRNO_UNKNOWN?
[2018-05-24 00:27:19] <aniketp41> also it doesn't modify its ar_errno..
[2018-05-24 00:27:42] <aniketp41> Record: header,77,11,exit(2),0,Thu May 24 00:26:17 2018, + 163 msec,exit,Error 0,0,subject,root,root,0,root,0,4301,4202,38646,10.0.2.2,return,success,0,trailer,77,
[2018-05-24 00:28:15] <aniketp41> So in place of arguments, AUE_EXIT has return value and status too
[2018-05-24 00:45:11] <aniketp41> ping @somers_ 
[2018-05-24 02:00:24] <aniketp41> Hi @somers_, I got a failure for execve(2) test-case. On debugging, the reason doesn't make sense https://pastebin.com/GuMEXViR
[2018-05-24 02:32:10] <somers_> Probably the incomplete audit record error
[2018-05-24 02:32:29] <somers_> Oh wait, no.
[2018-05-24 02:33:19] <somers_> That's EFAULT.  It's documented in execve's man page
[2018-05-24 02:40:46] <aniketp41> Yes I intentionally made it a Bad address, for failure case. I'm wondering why doesn't the regex match with the string. It should in this case, right?
[2018-05-24 02:40:55] <aniketp41> @somers_ 
[2018-05-24 02:41:22] <somers_> What is the regex?  Is it simply "execve" ?
[2018-05-24 02:42:22] <aniketp41> Yes, initially it was bigger but it didn't match. i made it smaller to see where is the issue. But even execve doesn't match
[2018-05-24 02:42:53] <aniketp41> Technically it should since the execve is present in the audit record @somers_ 
[2018-05-24 02:43:30] <somers_> Well, this should be an easy problem to solve.  You've got the regex and the string; you should be able to figure it out.  Maybe there's an unprintable character in there or something.
[2018-05-24 02:47:30] <aniketp41> Okay will check that issue. Btw about the issue with ar_errno for execve(). What do you think of it. Shouldn't _exit() also have that error (since it doesn't return anythin) but _exit() conatins the return,success in the audit record @somers_ 
[2018-05-24 02:48:05] <somers_> There's special code to handle _exit, because it actually terminates the process
[2018-05-24 02:49:46] <aniketp41> Oh, that makes sense. I guess we can change ar,_errno in the switch case for execve. That should hopefully work
[2018-05-24 03:26:42] <somers_> But only if we can know for sure that execve suceeded
[2018-05-24 12:10:19] <aniketp41> @somers_, I checked in the test-cases for execve(2) in both success and failure mode. (I had figured out the issue for regex not matching and fixed it). Please give the tests a run just to be sure they work for you too.
[2018-05-24 12:10:19] <aniketp41> https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/exec.c?revision=337248&view=markup
[2018-05-24 12:13:09] <aniketp41> Funny thing is these two tests complete the exec "ex" audit class.
[2018-05-24 12:56:01] <aniketp41> Hi @somers_, I think there might be another bug in audit/audit_ioctl.h.
[2018-05-24 12:56:01] <aniketp41> The structure here https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_ioctl.h#L41 needs <bsm/libbsm.h> and the include isn't present there
[2018-05-24 12:56:52] <aniketp41> When I'm trying to test ioctl(2), this gives me compilation error and to resolve that I have to include<bsm/libbsm.h> before it
[2018-05-24 13:54:05] <somers_> Missing headers in header files aren't usually bugs.  That's usually deliberate, in order to reduce header pollution.  What symbol from audit_ioctl.h were you trying to use?
[2018-05-24 13:55:02] <somers_> Whichever it was, its man page should've specified which headers you should include
[2018-05-24 13:58:46] <aniketp41> I was only using the AUDITPIPE_FLUSH. But the audit_ioctl.h also declared a "struct auditpipe_ioctl_preselect" which is supposed to be used as the third argument in some ioctl. But the "au_mask_t" is declared in the <bsm/libbsm.h>. So that header should also be present in the ioctl header right?
[2018-05-24 13:58:53] <aniketp41> @somers_ 
[2018-05-24 13:59:26] <aniketp41> Also, @somers_, have a look at the test for ioctl(2): https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/ioctl.c?revision=337249&view=markup
[2018-05-24 14:00:09] <aniketp41> I'm using the hex value of file-descriptor (which was present as it is in the audit record). To eliminate the false positives
[2018-05-24 14:03:58] <aniketp41> @somers_ if you are using something pre-declared in a header file, you need to include it's declaration header right?
[2018-05-24 14:42:20] <somers_> I don't understand the question
[2018-05-24 14:57:13] <aniketp41> So if a header file uses a struct which is declared somewhere else. Should the header file not include the header file which declares the struct @somers_ 
[2018-05-24 14:57:43] <aniketp41> I mean, instead of asking people to do it..
[2018-05-24 14:58:31] <somers_> Unlike a lot of projects FreeBSD doesn't have that rule, because it leads to overinclusion and namespace pollution.  The general rule is "#include whatever the man page tells you to"
[2018-05-24 15:00:27] <aniketp41> So afaik, the ioctls are used jn auditpipe(4) but there wasn't any mention in there.
[2018-05-24 15:00:44] <aniketp41> * manpage of auditpipe
[2018-05-24 15:03:38] <aniketp41> Still @somers_ I thought it would be nice to have one #include <bsm/libbsm.h> in there
[2018-05-24 15:03:51] <aniketp41> https://github.com/openbsm/openbsm/blob/master/sys/bsm/audit.h#L36 its done here for example
[2018-05-24 15:04:03] <somers_> If the entire file is not #includeable without first #including another, then it makes sense to #include from the header file.  (Or move the offending symbol into audit.h, but that would be more invasive)
[2018-05-24 17:07:39] <aniketp41> It's impossible to include <audit_ioctl.h> without <bsm/audit.h> so we'll have to include that anyway in our program. But as you said it's also possible to move the struct definition into <bsm/audit.h> and include the header in audit_ioctl.h.
[2018-05-24 17:07:39] <aniketp41> @somers_, "au_mask_t" is not defined in audit_ioctl.h so using it without any include looks erroneous to me 
[2018-05-24 17:08:17] <somers_> yeah
[2018-05-24 17:08:32] <aniketp41> Maybe moving the struct definition along with other struct definitions in "bsm/audit.h" would be a better and feasible approach?
[2018-05-24 17:08:48] <somers_> Yes, moving the struct definition is probably better
[2018-05-24 19:23:47] <aniketp41> Hi @somers_,just to confirm, syscalls {putmsg(2), getmsg(2), putpmsg(2), getpmsg(2)} are not defined in FreeBSD, right? I couldn't find any man-page or locate them in the src repo
[2018-05-24 19:25:05] <somers_> Never heard of them.  Where did you see a reference?
[2018-05-24 19:25:36] <aniketp41> Same old audit_event list: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L207
[2018-05-24 19:29:40] <aniketp41> @somers_ 
[2018-05-24 19:33:54] <somers_> Ahh, that list is shared between freebsd and darwin
[2018-05-24 19:34:48] <aniketp41> Then @somers_, should the syscalls not be defined in the darwin's list: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L294
[2018-05-24 19:34:57] <aniketp41> If they are present in Darwin
[2018-05-24 19:35:19] <aniketp41> They are defined before Darwin's syscalls start
[2018-05-24 19:36:23] <aniketp41> Oh I see, the Darwin list conflicts with Solaris. Okay it makes sense now
[2018-05-24 19:36:37] <somers_> Well, it's standardized, even if not supported by freebsd:http://pubs.opengroup.org/onlinepubs/009695299/functions/xsh_chap02_06.html#tag_02_06
[2018-05-24 19:55:09] <aniketp41> Also, @somers_, if a syscall is not present in that list, does it mean that it does not get audited? Like very famous ones getpeername(2)
[2018-05-24 19:55:25] <aniketp41> There might be many more in other audit classes
[2018-05-24 20:21:55] <aniketp41> Also, @somers_, have a look at this revision: https://reviews.freebsd.org/D15561
[2018-05-24 22:39:09] <aniketp41> @somers_, If I'm creating a socket in a Kyua test case, do I need to close the socket descriptor myself or will Kyua do it for me while cleaning up? 
[2018-05-24 23:55:58] <somers_> what about AUE_GETPEERNAME ?
[2018-05-24 23:56:36] <somers_> If you create a socket in a Kyua test case, you need to close it yourself in a successful test.
[2018-05-25 00:05:36] <aniketp41> @somers_, AUE_GETPEERNAME isn't present in the list of audit event. I'll try to see if it gets audited nevertheless 
[2018-05-25 00:06:40] <aniketp41> Yes @somers_, did here: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337251&view=markup#l56
[2018-05-25 13:03:02] <aniketp41> Hi @somers_, does it happen that we are not allowed to create a pair of sockets using socketpair(2) .
[2018-05-25 13:03:02] <aniketp41> "socketpair(PF_INET, SOCK_STREAM, IPPROTO_TCP, &tr)" this always gives: "Operation not supported"
[2018-05-25 14:01:13] <aniketp41> Also @somers_, just to confirm, we would need to select() the client socket for writing, right?
[2018-05-25 14:45:03] <somers_> @aniketp41 try PF_UNIX instead of PF_INET
[2018-05-25 14:45:36] <somers_> For a very small amount of data, you can get away without doing select, because the kernel's sockbuf won't fill up.
[2018-05-25 18:42:04] * aniketp41 nick aniketp
[2018-05-25 19:08:06] <aniketp> @somers_ though why does it not work with PF_INET? like apart from PF_UNIX I tried PF_LOCAL and it worked for both cases. Also, it didn't make sense as to why two IPv4 sockets are not supported..
[2018-05-25 19:08:53] <somers_> PF_UNIX == PF_LOCAL
[2018-05-25 19:09:23] <somers_> There simply aren't many (any?) use cases where you would need a pair of connected inet sockets
[2018-05-25 19:10:25] <somers_> And if you did create a pair of inet sockets, what ports would they use?
[2018-05-25 19:10:47] <aniketp> @somers_ I tried making the connection without using select() , but everytime it gives back EINPROGRESS. This didn't happen in FreeBSD-11. I guess doing a select would be a better choice then?
[2018-05-25 19:11:38] <somers_> I'm not sure what you mean.  I'd have to see the code to understand.
[2018-05-25 19:15:09] <aniketp> Here is the makeshift code I've been using : https://pastebin.com/Pp3wBMCV @somers_ 
[2018-05-25 19:15:49] <somers_> Oh, I thought this had something to do with socketpair
[2018-05-25 19:16:30] <somers_> which syscall are you trying to exercise?
[2018-05-25 19:16:36] <aniketp> No, in this case I was referring to testing "connect(2)" for which I thought I'd need select()
[2018-05-25 19:17:16] <aniketp> And all that come post to connect(), e.g accept(), readfrom() etc
[2018-05-25 19:17:30] <somers_> Try removing the O_NONBLOCK part for the client socket
[2018-05-25 19:21:59] <aniketp> Thanks @somers_, it worked!
[2018-05-25 19:21:59] <aniketp> Though, can we get away with the client being "blocking" later on? I'll have to read the man-pages of syscalls similar to "send()" and "recv()" to be sure but I think when trying to alternate between server and client while sending and receiving data, is it possible that client blocks the process in some cases?  
[2018-05-25 19:23:03] <somers_> It might block on writes, but if your writes are small enough it won't.  And it might block on reads, but not if you've already written to the other end.
[2018-05-25 19:55:37] <aniketp> Hi @somers_, please have a look at the "connect_success" test case: https://pastebin.com/HsTTRg9i 
[2018-05-25 19:55:37] <aniketp> Here is the whole "network" test-program till now: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337252&view=markup
[2018-05-25 19:55:37] <aniketp> Is the approach fine? I think the size of individual test cases might get larger for all pending network syscalls
[2018-05-25 19:57:26] <somers_> In general, a lot more things can go wrong with inet sockets than unix sockets.  Where possible, you should prefer to use unix sockets
[2018-05-25 19:57:30] <somers_> They're faster, too.
[2018-05-25 19:57:46] <aniketp> Okay, will change that part!
[2018-05-25 20:04:17] <aniketp> @somers_ on replacing PF_INET with PF_UNIX, half of the tests failed: https://pastebin.com/rCiHf1n6
[2018-05-25 20:05:49] <somers_> You can't use TCP with PF_UNIX
[2018-05-25 20:05:51] <somers_> Use 0 instead
[2018-05-25 20:05:57] <aniketp> Yeah figured that out
[2018-05-25 20:06:08] <aniketp> Now it works @somers_ 
[2018-05-25 20:06:32] <aniketp> Had faced the similar problem in socketpair(2)
[2018-05-25 21:03:18] <aniketp> Hi @somers_, PF_UNIX now caused issue while bind(2)ing in most test-cases: https://pastebin.com/5URkxXZG
[2018-05-25 21:03:18] <aniketp> While it worked with PF_INET
[2018-05-25 21:04:17] <somers_> How did you create the server variable?
[2018-05-25 21:09:29] <aniketp> Yes sorry, it should've been AF_UNIX instead of AF_INET
[2018-05-25 21:10:14] <aniketp> But still the tests failed. Maybe the addresses are assigned in a different way for AF_UNIX @somers_ ?
[2018-05-25 21:10:14] <aniketp> I'll try to figure out what is the right way to do so
[2018-05-25 21:10:52] <aniketp> "server->sun_family = AF_UNIX;"
[2018-05-25 21:11:14] <somers_> Yes, addresses are quite different.  You need to use a sockaddr_un, and the address is actually a path on the filesystem
[2018-05-25 21:11:52] <aniketp> Here's how I did it @somers_: https://pastebin.com/gVSAnvZR
[2018-05-25 21:12:16] <somers_> Yeah, that totally won't work for AF_UNIX
[2018-05-25 21:43:44] <aniketp> So @somers_, setsockopt(2) is essentially useless for host internal protocols right? Since we're unlink()ing the server address after every run
[2018-05-25 21:44:22] <aniketp> But even though it was not required, it still showed up in the audit record as a success return
[2018-05-25 21:44:28] <somers_> I wouldn't say that
[2018-05-25 21:44:42] <somers_> some options apply to PF_UNIX sockets
[2018-05-25 21:45:06] <somers_> Oh, you mean SO_REUSEADDR?  Yeah, that's useless.  Actually, I'm not sure why you used that for PF_INET in the first place
[2018-05-25 21:45:51] <aniketp> Oh one reason was that I needed to test the audit of setsockopt(2) :P 
[2018-05-25 21:46:21] <aniketp> And I thought maybe in case the port 9000 is busy it might free it.
[2018-05-25 21:48:35] <somers_> SO_REUSEADDR doesn't have anything to do with addresses that you explicitly bind(2).  It's only for the local port.  The port you usually don't care about.
[2018-05-25 23:46:36] <aniketp> Hi @somers_ does shutdown() work with PF_UNIX sockets? AS after accept() with the client, I assumed that shutdown should've worked but it still shows: "Socket is not connected"
[2018-05-25 23:47:26] <aniketp> The implementation notes section in the man-pages shows few scenarios all of which use PF_INET/PF_INET6
[2018-05-25 23:47:48] <somers_> I don't know.
[2018-05-26 00:09:34] <aniketp> @somers_ I got it. I was using shutdown() on the wrong socket. I should've used it on the socket descriptor which is returned when a connection is made.
[2018-05-26 10:30:24] * somers_ (~somers@63-224-81-229.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-05-26 10:31:45] * somers (~somers@63.224.81.229) join
[2018-05-26 14:03:13] <aniketp> Hi @somers, would you advise on using a separate variadic function for closing socket descriptors? There are upto 3 socket descriptors in each test case and I was thinking of closing them in a separate function..  
[2018-05-26 14:23:41] <aniketp> @somers, the test-case for syscalls concerned with sending and receiving data seem to be getting quite heavy. Can you suggest some further optimizations in this test case : https://pastebin.com/piBhETHs
[2018-05-26 14:23:41] <aniketp> I already made 3 static functions.
[2018-05-26 14:24:38] <aniketp> Or shall I leave them as it is?
[2018-05-26 15:42:05] <somers> Well, you could certainly combine check_readfs and recvfrom
[2018-05-26 15:42:35] <somers> Would it help to create a socketpair-like helper function?
[2018-05-26 15:42:54] <somers> Actually, why don't you just use socketpair?  It should work in this case, because you're using PF_UNIX sockets
[2018-05-26 18:15:42] <aniketp> @somers actually the issue is that the function check_readfs will be shared by recv(2), recvfrom(2), and recvmsg(2) so I separated that part.
[2018-05-26 18:15:42] <aniketp> Yes socketpairs might actually do the job since I have a similar set of sockets each for both client and server. I'll try that out!
[2018-05-26 21:12:05] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) join
[2018-05-26 21:18:48] * somers (~somers@63.224.81.229) quit Read error: Operation timed out
[2018-05-26 21:38:55] <aniketp> Hi @somers_, @rwatson, does the condition here : https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L1721 [""BSM conversion requested for unknown event %d\n""] imply that "ar->ar_event" was supposed to be implemented but couldn't be?
[2018-05-26 21:38:55] <aniketp> I've got this particular exception condition for setfib(2) & chflagsat(2) till now
[2018-05-26 21:40:34] <aniketp> They both are mentioned in the audit_event list and are supposed to be audited but are not.
[2018-05-26 21:40:34] <aniketp> Also, @somers_, would a "atf_tc_expect_fail()" suffice for "setfib(2)" just like chflagsat(2) and lgetfh(2)? 
[2018-05-26 21:46:23] <somers_> Yeah, that's definitely a missing case
[2018-05-26 21:46:42] <somers_> but I don't understand your second question
[2018-05-26 21:48:10] <aniketp> As in should I implement a test-case for setfib(2) as "atf_tc_expect_fail()" like chflagsat(2) or should I leave it out for now? @somers_ 
[2018-05-26 21:48:51] <somers_> Oh, you mean auditing setfib doesn't work?  Then yes, mark it as an expected failure
[2018-05-26 21:49:13] <somers_> BTW, setfib(2) will fail if you don't have any extra fibs available.  What argument are you giving it?
[2018-05-26 21:51:33] <aniketp> Yeah, it doesn't. Now after understanding the code of audit/audit_bsm.c I can figure out why was it not audited. My main VM window printed out "BSM conversion requested for unknown event 43209" which confirmed my suspicion.
[2018-05-26 21:51:33] <aniketp> @somers_, for simplicity I implemented it as: setfib(1); where int fib = 1;
[2018-05-26 21:51:54] <aniketp> But even if it was wrong, it should have audited the failed event @somers_ 
[2018-05-26 21:52:08] <somers_> what does "sysctl net.fibs" show?
[2018-05-26 21:53:05] <somers_> By default it should be 1.
[2018-05-26 21:53:16] <somers_> If you want to increase it, you have to set it in /boot/loader.conf
[2018-05-26 21:53:54] <aniketp> "net.fibs: 1". Which means my argument was wrong
[2018-05-26 21:53:56] <somers_> However, you should probably just set fib=0 for your test.  I think that would be auditable
[2018-05-26 21:54:14] <aniketp> Yes I did that now > Even that doesn't get audited
[2018-05-26 21:54:43] <aniketp> "BSM conversion requested for unknown event 43228"
[2018-05-26 21:55:10] <somers_> And it is in /etc/security/audit_events, you say?
[2018-05-26 21:55:15] <aniketp> This time its different from "43209"
[2018-05-26 21:55:23] <aniketp> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L588
[2018-05-26 21:55:31] <aniketp> Yes @somers_ 
[2018-05-26 21:56:30] <aniketp> @somers_ same result for syscalls related to sctp_peeloff [None of them get audited] https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L591
[2018-05-26 22:36:25] * somers__ (~somers@63-224-81-235.hlrn.qwest.net) join
[2018-05-26 22:43:06] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-26 22:44:55] <aniketp> Also, @somers__, shall I also audit getfh(2) (nfs_getfh(2) in a different audit class) as a expected failure in "fa" audit class?
[2018-05-26 22:45:09] <aniketp> *which is audited as nfs_getfh(2)
[2018-05-26 22:48:29] <somers__> If there's no audit record, then it's a failure
[2018-05-26 22:53:28] <aniketp> Okay, but what about the audit class being different? @somers__ 
[2018-05-26 22:53:44] <somers__> what do you mean?
[2018-05-26 22:54:00] <aniketp> nfs_getfh(2) is within the "ad" audit class
[2018-05-26 22:54:16] <aniketp> While "getfh(2)" is "fa" @somers__ 
[2018-05-26 22:55:13] <somers__> So you think that getfh and nfs_getfh should be in the same audit class?
[2018-05-26 22:59:03] <aniketp> I'm not sure how nfs_getfh(2) is different from getfh(2). (Maybe something to do with Network File System maybe?). So I wondered if they ought to be in the same audit class. 
[2018-05-26 22:59:03] <aniketp> It could be that they are intentionally in different audit classes. But it's strange to me how one syscall gets audited as another with a completely different audit class. 
[2018-05-26 22:59:03] <aniketp> I've had such situations before, e.g open(2) as openat(2). close(2) as closefrom(2). But they were within the same audit class. This case is unique..
[2018-05-26 22:59:11] <aniketp> @somers__ 
[2018-05-26 22:59:53] <somers__> what do you mean "one syscall gets audited as another"?
[2018-05-26 23:00:32] <aniketp> @somers__, when I try to audit "getfh(2)", nfs_getfh(2) shows up in the audit record
[2018-05-26 23:01:09] <somers__> Have a look in lib.  Is getfh really a wrapper around nfs_getfh?
[2018-05-26 23:08:59] <aniketp> @somers__, I found the man page but couldn't find the source code https://github.com/freebsd/freebsd/blob/f5d95e1f8d32db4ccccfd5ad9cecb21ed07a695d/lib/libc/sys/getfh.2. 
[2018-05-26 23:08:59] <aniketp> Can you please point me to it?
[2018-05-26 23:09:40] <aniketp> Also, I found out why open gets audited as openat(2). libc converts it to openat(2): https://github.com/freebsd/freebsd/blob/master/lib/libc/sys/open.c#L58
[2018-05-26 23:17:17] <aniketp> Also, @somers__, I completed all syscalls for "nt" audit class taking reference from audit_events list. Please checkout the tests and have a look at them: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337254&view=markup 
[2018-05-26 23:44:18] <somers__> It's in kern/init_sysent.c:213
[2018-05-26 23:46:56] <somers__> There is no nfs_getfh syscall; I don't know why they call it that.
[2018-05-26 23:54:16] <aniketp> @somers__, here its mentioned it as AUE_NFS_GETFH,https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L813
[2018-05-26 23:54:16] <aniketp> maybe that's why it gets audited as nfs_getfh
[2018-05-26 23:55:36] <somers__> No, the reason is that init_sysent.c says that the getfh syscall uses the AUE_NFS_GETFH audit event, and /etc/security/audit_event stringifies that as "nfs_getfh"
[2018-05-27 00:02:59] <aniketp> @somers__ I think it might not be a bug. I've been trying to audit getfh(2) but's its listen in audit_event list within the "Darwin-Solaris" section. So it could be like, I'm only supposed to audit getfh(nfs_getfh) within the "ad" audit class?
[2018-05-27 00:03:16] <aniketp> *listed
[2018-05-27 00:30:20] <somers__> Yeah, it's not a bug.  Perhaps a "questionable design decision", but not really a bug
[2018-05-27 00:32:42] <aniketp> Sure. Btw @somers__, which audit class would you recommend testing next? (As in general order in difficulty ). I have "process-control", "administrative" and "inter-process-communication" left
[2018-05-27 00:38:47] <somers__> It's up to you.  Each group has its own challenges.
[2018-05-27 00:38:59] <somers__> Personally, I think IPC is more fun though.
[2018-05-27 00:43:25] <aniketp> Sure, I'l start with IPC then. And I'm currently having trouble with msgctl(2), though I'll try to figure out what's the issue.
[2018-05-27 00:44:06] <aniketp> Btw @somers__, about the review: https://reviews.freebsd.org/D15561 . Did you have a look at it?
[2018-05-27 00:49:33] <somers__> Yeah.  It looks mostly ok, but it needs build testing.  I'll do that now
[2018-05-27 00:50:05] <somers__> Actually, you can do it yourself.  Just do "make universe".  However, it takes around 8 hours even on good hardware.  On your laptop, probably longer.
[2018-05-27 00:50:21] <somers__> But the project has some build servers for just this purpose
[2018-05-27 01:08:58] <aniketp> @somers__, the headers, "audit/audit_ioctl.h" and "bsm/audit.h" are connected in a way that I couldn't separate them even after a lot of thought. There's no way we can use "audit_ioctl.h" without "bsm/audit.h". One of the ioctl parameters uses a struct defined in bsm/audit.h which is also used by a lot more files. So we possibly can't move the "au_mask_t" out of "bsm/audit.h" into "audit_ioctl.h".
[2018-05-27 01:08:58] <aniketp> I also added a typedef for struct auditpipe_ioctl_preselect to make it consistent with the other struct definitions 
[2018-05-27 01:09:45] <aniketp> "au_mask_t" <= "struct au_mask"
[2018-05-27 02:17:11] <somers__> Does it use the whole struct, or just a pointer to the struct?
[2018-05-27 02:20:58] <somers__> Because if it only really needs a pointer, then you can forward-declare the struct
[2018-05-27 03:23:02] * somers_ (~somers@63-224-80-209.hlrn.qwest.net) join
[2018-05-27 03:29:52] * somers__ (~somers@63-224-81-235.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-27 03:35:08] * somers__ (~somers@63-224-81-23.hlrn.qwest.net) join
[2018-05-27 03:40:41] * somers_ (~somers@63-224-80-209.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-27 03:56:21] <aniketp> @somers__, this seems to be using the struct instead of a pointer to the struct : https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_ioctl.h#L65
[2018-05-27 03:57:52] <aniketp> Also, even if we are forward declaring a struct, would we still not need to know where its members are coming from? (I guess for that we'll still need bsm/audit.h)
[2018-05-27 12:11:04] <somers__> When you forward declare a struct, you don't need to know anything but its name.
[2018-05-27 12:11:28] <somers__> But the only thing you can do with it is make a pointer to it.
[2018-05-27 13:16:02] <aniketp> @somers__ I think it needs the whole struct instead of just a pointer to it.
[2018-05-27 13:16:18] <aniketp> "#define	AUDITPIPE_GET_PRESELECT_AUID	_IOR(AUDITPIPE_IOBASE, struct auditpipe_ioctl_preselect)"
[2018-05-27 13:16:57] <aniketp> #define _IOR(AUDITPIPE_IOBASE, 10, struct auditpipe_ioctl_preselect)
[2018-05-27 15:20:08] <somers__> It depends on what that macro does
[2018-05-27 15:20:16] <somers__> Have you looked it up?
[2018-05-27 16:57:46] <aniketp> Hi @somers__, If I'm creating a message queue using msgget(2) do I need to destroy that message myself using msgctl(2) or wil Kyua do it for me? I'm not too familiar with message queues so can't figure it out.
[2018-05-27 16:58:24] <somers__> On succes, you need to cleanup everything just like a regular program, as if Kyua weren't involved.
[2018-05-27 17:35:47] <aniketp> Yes @somers__, I learned that the hard way. While creating test programs, to check whether msgctl(2) was being audited. I didn't explicitly delete the queues and as a result it exceeded the system limit
[2018-05-27 17:36:08] <somers__> lol
[2018-05-27 18:00:42] <aniketp> @somers__, I created initial 12 tests for message queue syscall family: https://github.com/aniketp/AuditTestSuite/blob/master/src/inter-process.c. Please have a look.
[2018-05-27 19:50:22] <aniketp> Btw @somers__, is there any cleaner way to organize the Makefile? It looks a bit cluttered after 11 test programs: https://github.com/aniketp/AuditTestSuite/blob/master/src/Makefile
[2018-05-27 19:51:56] <somers__> For TEST_METADATA, any bits that are the same for all files can be declared simply like "TEST_METADATA+=  foo=bar".  No need to specify it separately for each test program
[2018-05-27 19:52:45] <somers__> You could try replacing all of the "SRCS.*+=" line with a single "SRCS+=utils.c" line.  I'm not sure if that would work
[2018-05-27 19:53:09] <aniketp> Okay, will try that..
[2018-05-27 20:35:04] <aniketp> @somers__, "SRCS+=utils.c" doesn't work. I get that familiar linker error: https://pastebin.com/CrRksVbM
[2018-05-27 23:19:03] <aniketp> Hi @somers__, Is "ushort" acceptable data type or shall I use something else in place?
[2018-05-27 23:19:47] <somers__> Best to use the standardized types.
[2018-05-28 02:43:04] <aniketp> Hi @somers__, while trying to audit shm_open(2) and shm_unlink(2), I couldn't get them to pass on a relative path , e.g const char *path = "pathname"; But the result was successful when I replaced "pathname" with "/pathname". Is this approach fine for Kyua test case since I'm kind of creating an absolute path
[2018-05-28 03:02:46] <somers__> shm does not use a real filesystem path
[2018-05-28 03:02:49] <somers__> It's a separate namespace
[2018-05-28 03:03:23] <somers__> The easiest thing to do would probably be to use getcwd to build an absolute path
[2018-05-28 06:42:44] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-05-28 06:42:54] * mpts_ nick mpts
[2018-05-28 18:33:36] <aniketp> Hi @somers__, the pipe(2) syscall creates a lot of noise [A lot of other processes are creating pipes at the same time apparently]. And the audit record doesn't contain anything to pin point to the syscall we triggered. 
[2018-05-28 18:33:36] <aniketp> "header,68,11,pipe(2),0,Mon May 28 18:27:19 2018, + 761 msec,subject,root,root,0,root,0,746,742,32814,10.0.2.2,return,success,0,trailer,68,"
[2018-05-28 18:33:36] <aniketp> So shall I simply match against "pipe.*return,success" in the test case, considering there is not much I can do here
[2018-05-28 18:45:10] <somers__> what are all those other numbers?
[2018-05-28 18:46:14] <aniketp> From the doc: " The subject token stores the audit user ID, effective user ID and group ID, real user ID and group ID, process ID, session ID, port ID, and login address"
[2018-05-28 18:46:57] <aniketp> Maybe I can use the user id or the process id?
[2018-05-28 18:47:02] <aniketp> @somers__ 
[2018-05-28 18:47:18] <somers__> Yeah, the process ID should be a pretty good filter
[2018-05-28 18:49:00] <aniketp> Oh, I should have thought about it earlier. Maybe using the PID would have been a better option for all syscalls that didn't have much info in their audit record. I'll have a look at my previous test cases an try to implement this part @somers__ 
[2018-05-28 18:52:26] <aniketp> Yeah, just need to add the regex matching with the output of getpid(). This extracted out the target pipe(2) audit record
[2018-05-28 18:58:20] <aniketp> @somers__, that seemed to work: "Looking for 'pipe.*12310.*return,success' in 'header,68,11,pipe(2),0,Mon May 28 18:57:32 2018, + 497 msecsubject,root,root,wheel,root,wheel,12310,742,32814,10.0.2.2return,success,0trailer,68'"
[2018-05-28 18:59:03] <somers__> good
[2018-05-28 19:42:45] <aniketp> Hi @somers__, apart from some issues which I've compiled here: https://pastebin.com/J3G1WaQv 
[2018-05-28 19:42:45] <aniketp> It looks like all possible auditable events for IPC are done: https://github.com/aniketp/AuditTestSuite/blob/master/src/inter-process.c
[2018-05-28 19:42:55] <aniketp> Have a look in case I missed something..
[2018-05-28 20:04:26] <aniketp> Also @somers__ I was having a look at the functionalities of some of the administrative system calls. It looks like most of them do some important changes in the system. So how should I go about testing them. Like the most obvious syscall in this case that I can think of is reboot(2). We can't reboot the system with "kyua test" obviously :P
[2018-05-28 20:14:38] <somers__> that seems fast
[2018-05-28 20:15:29] <somers__> lol yeah, reboot would be hard to test
[2018-05-28 20:21:31] <somers__> I think you should test the failure case for reboot, and a comment explaining why the success case is untested
[2018-05-28 20:53:08] <aniketp> Hi @somers__, I got notified that you committed https://reviews.freebsd.org/rS334296. Does it mean we can review the pending D15286?
[2018-05-28 20:54:18] <somers__> The big issue with that review is still the incomplete record bug.  We never got to the bottom of that one.
[2018-05-28 21:02:18] <aniketp> But @somers__ wasn't that the issue with corrupted records of the extraneous events being generated at the audit startup? The events generated by the system call in question were always valid, and that's what we needed to check for case. So isn't it like, the purpose of the test-cases is served? 
[2018-05-28 21:03:50] <aniketp> I guess initially I had that "if condition" on every audit record that was being generated. It seems redundant to do that now
[2018-05-28 21:12:57] <somers__> But we could never be sure when auditd startup was complete.
[2018-05-28 21:18:11] <aniketp> Well if the issue is with auditd taking more than 5 seconds to complete, we can increase the poll timeout for auditd startup. (But leave it as 5 secs for syscalls) . As the test case timeout is 30 secs .anyway. @somers__ 
[2018-05-28 21:18:53] <somers__> It's not.  The issue is that the audit startup event gets corrupted
[2018-05-28 21:23:53] <aniketp> So @somers__, if we're sure that the auditd will start but for some rare event, the audit startup event gets corrupted and the tests fail eventually. Can't we do it like, if "audit startup" regex is not found in the audit record by a _certain_ amount of time, let the test case continue?. (Because by adding the poll(2) for audit startup we're just eliminating the race condition, why fail the tests when there is no race in the first place :P)
[2018-05-28 21:24:47] <aniketp> And if the auditd actually doesn't start by 5 secs. Then I believe there is some serious issue with the audit system...
[2018-05-28 21:25:09] <aniketp> Or maybe 10 secs. Sometime around it
[2018-05-28 21:25:41] <somers__> No, that's no sufficient.  If the "audit startup" message can be corrupted, then why can't any message be corrupted?
[2018-05-28 21:26:22] <somers__> The whole purpose of this exercise is to find bugs in the audit subsystem, after all.
[2018-05-28 21:28:43] <aniketp> Cause @somers__ we've never had any "incomplete audit record" condition when the auditd was already running. Atleast I didn't. 
[2018-05-28 21:28:43] <aniketp> Yes indeed, maybe there is some issue with the "ad" audit class or for auditon(2) event. But the other syscalls seem to be doing fine
[2018-05-28 21:29:21] <somers__> I doubt it.  I think the bug is probably triggered by the high volume of audit events during auditd startup.
[2018-05-28 21:30:21] <aniketp> Yes, Btw I got "qlen=qlimit" (in an earlier exercise) in FreeBSD 12. There were a lot of events being generated for me too @somers__ 
[2018-05-28 21:43:00] <somers__> We need to fix this.  Worst case, if we can't reproduce it frequently enough to fix, then we need to add enough debugging info to the code so that whoever runs into the issue next will be able to figure it out
[2018-05-28 22:03:14] <aniketp> Btw @somers__ I've been recently getting "broken: Test case body timed out" on about random 1-5 of 429 test-cases, when auditd is not already running. What could this mean? (This only happens on first 2 -3 runs, post that, they never fail) What could be the reason for this?
[2018-05-28 22:03:45] <somers__> sounds like an incomplete audit record to me.
[2018-05-28 22:06:27] <aniketp> @somers__ did you get such errors before? This has been happening after I rebuilt after D15381 on FreeBSD-12. On FreeBSD-11 there were only "incomplete audit record" and "not found within the time-limit error"
[2018-05-28 22:07:34] <somers__> At some point you changed "atf_tc_fail("Incomplete audit record")" to a mere "printf("Incomplete audit record")".  That's why you're seeing timeouts now
[2018-05-28 22:08:29] <somers__> Also, I don't see any of the qlen stuff in D15286.  Why didn't you add that code?
[2018-05-28 22:23:58] <aniketp> @somers__ will do that.
[2018-05-28 22:23:58] <aniketp> Btw do you think that adding an extra "ad" class just for audit startup is causing an issue with the timeout?
[2018-05-28 22:24:27] <somers__> Causing, now.  Aggravating, yes, because it increases the volume of auditted events.
[2018-05-28 22:25:13] <aniketp> I did a kyua debug with that feature enabled vs it commented out: https://pastebin.com/19py66j2
[2018-05-28 22:26:34] <aniketp> I think changing audit mask from "ad" to "fc (example)" took a bit of time and there are still a lot of auditon(2) events being generated
[2018-05-28 22:26:39] <aniketp> @somers__ 
[2018-05-28 22:26:54] <somers__> With what commentted out?  The ad audit class?  How can you receive the audit startup event if you do that?
[2018-05-28 22:27:15] <aniketp> Audit startup turns up on any audit class
[2018-05-28 22:27:35] <aniketp> @somers__ it is there in the second case. Have a look
[2018-05-28 22:28:10] <aniketp> I think "audit startup" and "audit shutdown" show up everytime 
[2018-05-28 22:29:22] <aniketp> And @somers__ note that the auditon(2) events are being generated _after_ audit startup. So I think adding "ad" class did not serve our purpose
[2018-05-28 22:29:32] <somers__> Interesting.  Are you sure?  Because it's listed in class "ad" in /etc/security/audit_events.  Are you sure that the ad class was disabled for the entire duration of that program?
[2018-05-28 22:31:59] <aniketp> Yeah it is. Actually I think I'm sure. When I started learning audit system and was playing around with "praudit /dev/auditpipe". I noticed audit startup and audit shutdown everytime. [Note: I was not even aware of the administrative events at that time]
[2018-05-28 22:32:31] <aniketp> And yes, you can see no auditon(2) events in the second instance of the pastebin link. Which means "ad" was disabled
[2018-05-28 22:32:34] <aniketp> @somers__ 
[2018-05-28 22:33:34] <aniketp> And @somers__ not a single test failed post that change: 429/429 passed (0 failed)
[2018-05-28 22:33:55] <aniketp> I had two runs with the audit system stopped initially
[2018-05-28 22:38:58] <aniketp> Yeah, the auditon(2) events seem to have gone away. And I also observed the decrease in the time taken for the tests to complete post removing the auditon event
[2018-05-28 22:46:33] <aniketp> ping @somers__  
[2018-05-28 22:47:14] <somers__> what do you mean "removing the auditon event"?
[2018-05-28 22:48:54] <aniketp> Sorry, "removing the set_preselect_mode("ad") line from utils.c"
[2018-05-28 22:49:38] <somers__> And by "auditon(2) events have gone away" do you mean "auditon(2) events except for audit startup" ?
[2018-05-28 22:52:22] <aniketp> Yes, the line "Looking for 'audit startup' in 'header,56,11,audit startup,0,Mon May 28 22:35:59 2018, + 947 msectext,auditd::Audit startupreturn,success,0trailer,56'" is always there in any "kyua debug". 
[2018-05-28 22:52:22] <aniketp> Which means that audit startup does show up always.
[2018-05-28 22:52:22] <aniketp> Btw @somers__ can you run the latest tests (I've checked them in on my svn branch ) and remove "set_preselect_mode(fd[0].fd, &aumask);" from utils.c to see it the result is same for you?
[2018-05-28 22:53:01] <somers__> What are you expecting me to see?
[2018-05-28 22:55:40] <aniketp> Whether you get any timeouts or not @somers__ . It could be that there might be something I might not have noticed while running the tests
[2018-05-28 22:56:01] <somers__> are you hoping that I'll get fewer?
[2018-05-28 22:56:51] <somers__> Minimizing timeouts is not what you should be focused on right now.  Rather, you should be doing the opposite: maximizing timeouts.  We need to be able to reproduce the incomplete audit record bug so we can fix it.
[2018-05-28 22:56:58] <aniketp> I'm not sure. Did you run the tests before? For my case the errors seem to have dissappeared
[2018-05-28 22:58:21] <aniketp> Yeah but what if they dissappear? @somers__ 
[2018-05-28 22:58:21] <aniketp> If none occur for you then we can be pin-point to "ad" class or auditon(2) as the mischief for th e "incomplete audit record" bug
[2018-05-28 22:58:45] <somers__> No.  Absence of evidence is not evidence for absence.
[2018-05-28 22:59:21] <somers__> We need to reproduce the bug reliably.  Only then can we debug it.
[2018-05-28 23:01:38] <aniketp> Okay. @somers__ I'll try creating test cases for "ad" audit class events. Specially auditon(2) and run them repeatedly. If the timeouts come-back (without the extra "ad" for audit startup) then can we reason that maybe "ad" has something to do with it? 
[2018-05-28 23:02:52] <somers__> You previously had a setup that reproduced the bug occasionally.  I think you should go back to that, then tinker with it to try to reproduce the bug more frequently.
[2018-05-28 23:03:01] <somers__> You could try reducing the qlen, for example
[2018-05-28 23:25:34] <aniketp> @somers__ the qlimit_max is 1024 right? 
[2018-05-28 23:25:57] <somers__> I don't know.  Don't you look it up ?
[2018-05-28 23:27:17] <aniketp> Well I thought it might be different for different systems. I was trying to set various values for q_limit to see if the audit pipe fills up 
[2018-05-28 23:27:54] <aniketp> You once remarked that it is 1024 so I thought I should confirm @somers__ 
[2018-05-29 00:37:01] <aniketp> Hi @somers__ I've been trying to reproduce the errors for the past hour. Even on shifting to "atf_tc_fail("Incomplete audit record")" from "printf("Incomplete audit record")", I never get "incomplete audit records". However when I set "ad" for audit startup and check the qlen after check_audit function , it generally returns something around 300. 
[2018-05-29 00:37:01] <aniketp> On setting it to max and eliminating "ad". Tests pass 100% of the time
[2018-05-29 00:38:10] <aniketp> But reducing qlen to something like "10" times out 100% of the time when "ad" is present and passes everytime when "ad" is absent
[2018-05-29 00:45:28] <aniketp> So essentially it looks to me that qlen and the extraneous "ad" setttings are the only thing that are causing the issue
[2018-05-29 00:46:22] <aniketp> ping  @somers__ . Can you think of any way I can reproduce the "incomplete audit record" error? Only way I could do it was to negate the if condition :P
[2018-05-29 01:24:58] <somers__> You just have to experiment, trying different things.
[2018-05-29 01:25:15] <somers__> For now, leave "ad" present, because it's always been present whenever we've seen this bug before.
[2018-05-29 01:25:21] <somers__> You might try intermediate values of qlen
[2018-05-29 01:27:57] <somers__> Also, you should print errno whenever you get an incomplete audit record
[2018-05-29 01:28:04] <somers__> The usual way to do that is with perror(3)
[2018-05-29 01:29:15] <aniketp> But @somers__, I've never encountered "audit incomplete record" bug. Even when I had FreeBSD 11. I changed it to printf() statement only because the tests failed for you because of this reason.
[2018-05-29 01:29:39] <somers__> Those timeouts you had earlier today were probably caused by incomplete audit records
[2018-05-29 01:32:18] <aniketp> But they've gone away after I increased the qlimit to qlimit_max. Also, just to be sure that actually "incomplete audit record" was the reason for the test case timeout, I reset everything back to its initial condition and replaced "printf" with "atf_tc_fail". So @somers__ if it was due to incomplete audit record, it should have failed straight away, right? 
[2018-05-29 01:32:52] <somers__> Not necessarily, because the error has always been intermittent
[2018-05-29 01:33:36] <aniketp> Also, when I set qlimit to 0 and 1. I got the timeouts 100% of the time. 
[2018-05-29 01:33:50] <somers__> That's to be expected
[2018-05-29 01:34:54] <somers__> You might also try running on FreeBSD 12.0-CURRENT.  That's where I observed the errors.  It's also better in general to run there, because that's where the code needs to be committed first.
[2018-05-29 01:36:36] <aniketp> @somers__ I'm running FreeBSD 12: uname -a: FreeBSD bsdtest 12.0-CURRENT FreeBSD 12.0-CURRENT #1: Mon May 21 20:10:48 IST 2018     root@bsdtest:/usr/obj/usr/src/amd64.amd64/sys/GENERIC  amd64
[2018-05-29 01:36:36] <aniketp> Also, I got all my kernel panics and the broken test case body in FreeBSD-12
[2018-05-29 01:38:49] <aniketp> Prior to that, everything worked fine. Also, I'm not sure how the errors are related. @somers__ so you mean that since the "incomplete audit record" is intermittent, it is causing timeouts. But don't we already have that "if condition" check in place? How could the incomplete record bypass that check? 
[2018-05-29 01:39:43] <somers__> Weren't you just 'printf'ing on au_read_rec failure?
[2018-05-29 01:40:26] <somers__> My understanding is that you were.  If so, then any incomplete audit record for records we don't care about would go unnoticed.  But if the "audit startup" record were the incomplete one, then we would timeout waiting for audit startup
[2018-05-29 01:40:34] <somers__> That's why I saw the last time that I was able to reproduce the failure
[2018-05-29 01:40:37] <aniketp> Also, even on FreeBSD 12, I've never had "incomplete audit timeouts". I initially had some segfaults, timeouts and broken testcase body.
[2018-05-29 01:40:37] <aniketp> No I shifted to "atf_tc_fail" as soon as I started debugging
[2018-05-29 01:41:13] <aniketp> @somers__ 
[2018-05-29 01:44:55] <aniketp> @somers__ actually I mentioned this one of the previous messages, I have enabled the "atf_tc_fail" condition so essentially any "incomplete record" cannot get past. And I have not had a single instance of incomplete audit record since I changed to atf_tc_fail condition.
[2018-05-29 01:45:56] <aniketp> And the timeouts are all dependent on the combination of "ad" setting and "qlimit". So it looks like these issues are not even related.
[2018-05-29 01:47:33] <somers__> The timeouts that you see from manipulating the qlen are very predictable.  But I think there is a sweet spot that produces the incomplete audit records.
[2018-05-29 01:48:11] <somers__> The last time I was able to reproduce them, it was when you had a "printf" in there, and they showed up as a timeout.  Inspection of the detailed test output showed that the "audit startup" record was never found.
[2018-05-29 01:50:17] <aniketp> Okay @somers__, how often did you get the incomplete records with atf_tc_fail() check enabled?
[2018-05-29 01:50:26] <somers__> You certainly have encountered the "incomplete audit record bug".  You talk about it in the dicussion of D15286.
[2018-05-29 01:50:58] <somers__> At its most frequent, I saw the error about once for every 3 or so test runs
[2018-05-29 01:52:44] <aniketp> Yes I did but post some change they vanished. Also, after some point, they vanished entirely (might have been some change that fixed for me). But even then you were getting the errors so I changed the atf_tc_fail() to printf() so that they don't occur for you.
[2018-05-29 01:53:48] <aniketp> But it looks like they still occur for you, and once in a while a corrupted audit record, which happens to be of the audit startup, timeouts the test for you
[2018-05-29 01:53:52] <aniketp> @somers__ 
[2018-05-29 01:54:46] <somers__> I haven't seen them at all lately
[2018-05-29 01:59:32] <aniketp> I guess if they have vanished, then the issue with me was due to qlen and "ad". (Because atf_tc_fail("incomplete audit record") ) never exited for me. 
[2018-05-29 01:59:32] <aniketp> @somers__ did it stop happening for you after you checkout approximately 200 tests from my branch?
[2018-05-29 01:59:39] <aniketp> *checkedout
[2018-05-29 02:00:34] <aniketp> Because I think I made some changes to the "utils.c" prior to checking in my tests
[2018-05-29 02:00:56] <somers__> I haven't seen it in that branch, no.  But I also don't see it in the current version of D15286
[2018-05-29 02:02:55] <aniketp> Now that is totally weird :D
[2018-05-29 02:02:55] <aniketp> I think maybe because of the "printf()" statement in current D15286, they've stopped occuring for you {That was my last change I think}
[2018-05-29 02:04:20] <aniketp> But it is highly possible that printf() might've hid the corrupted "audit startup" message and it caused the error for you. [It could be very rare and that might explain why I'm not gettting any incomplete audit record]
[2018-05-29 02:05:03] <aniketp> But again, if audit records were indeed being produced, why would it not exit on the atf_tc_fail() condition for me.., @somers__ 
[2018-05-29 02:05:12] <aniketp> This is confusing
[2018-05-29 02:06:23] <aniketp> I think maybe increasing "qlimit" and removing the "ad" should make the tests error free? @somers__ 
[2018-05-29 02:07:09] <aniketp> Now since even on atf_tc_fail() check there hasn't been any incomplete audit record?
[2018-05-29 02:13:49] <somers__> We don't want the test to be error free.  We want to reproduce the error so we can fix the root cause.
[2018-05-29 02:38:32] <aniketp> So @somers__ can you please checkout the current branch and  run the tests after introducing the atf_tc_fail statement instead of printf?
[2018-05-29 02:38:59] <aniketp> It might be possibke that errors recur for you..
[2018-05-29 02:39:07] <aniketp> But not for me
[2018-05-29 02:40:25] <somers__> I just did that.  I ran it for 15 runs with no errors
[2018-05-29 02:40:33] <somers__> On D15286, that is
[2018-05-29 02:40:41] <somers__> Now I'm trying earlier versions of D15286
[2018-05-29 02:47:03] <aniketp> Sure, I'll also have a run through the versions after I wake up
[2018-05-29 02:47:49] <somers__> Shit, you're still awake at 8:17 AM ?
[2018-05-29 02:47:59] <somers__> Ahh, to be young and responsibilityless
[2018-05-29 12:50:57] <somers__> I figured out how to reproduce it
[2018-05-29 12:51:12] <somers__> The incomplete audit records had the same root cause as the panic I fixed.
[2018-05-29 12:51:31] <somers__> I just had to back out my fix, recompile with INVARIANTS off, and I immediately got incomplete audit records
