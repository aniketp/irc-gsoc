[2018-04-24 15:02:14] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-04-24 15:02:14] * efnet.port80.se mode +n
[2018-04-24 15:02:14] * efnet.port80.se mode +t
[2018-04-24 15:22:42] * somers_ (~somers@63-224-81-165.hlrn.qwest.net) join
[2018-04-24 22:58:37] <aniketp41> Hi Alan, am I supposed to get an email with FreeBSD for mailing list communication? The page here mentioned setting up the Project Wiki and Self page along with FreeBSD email address. https://wiki.freebsd.org/SummerOfCodeStudentChecklist
[2018-04-25 05:26:45] * somers__ (~somers@63-224-81-204.hlrn.qwest.net) join
[2018-04-25 05:28:39] * somers_ (~somers@63-224-81-165.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-25 05:30:06] <aniketp41> Hi Alan, did you see the previous message before ping timeout?
[2018-04-25 19:22:29] <aniketp41> ping @somers__ 
[2018-04-25 19:24:26] <somers__> I don't know what you're "supposed" to get
[2018-04-25 19:24:29] <somers__> what are you expecting?
[2018-04-25 19:25:09] <somers__> BTW aniketp41, if you want to get my attention on IRC, you should mention my nick.  I sit in some high traffic rooms, so my client doesn't alert me unless my nick gets mentioned
[2018-04-25 20:25:21] <aniketp41> somers__ The checklist page mentioned about a username for SVN SummerOfCode repository which would also be used as the email, so I wonmdered if is it provided or would I need to create one for myself?
[2018-04-25 20:25:21] <aniketp41> Also, I have created a WikiPage "AniketPandey" and the page says to ask a FreeBSD developer to include my account in the Contributer's Group. So I was wondering if you could do that..
[2018-04-25 21:48:42] <aniketp41> ping somers__
[2018-04-25 22:02:48] <somers__> Ahh, to get your SVN account you'll have to email soc-admins@freebsd.org, as detailed at https://wiki.freebsd.org/SummerOfCodeSubversion
[2018-04-25 22:03:21] <somers__> Tell them you'll need a branch of the src tree
[2018-04-25 22:05:07] <somers__> Where is your "AniketPandey" wiki page?  I can't find it.
[2018-04-25 22:06:20] <aniketp41> Oh, guess it isn't created yet. I created my account but I can't create my page as I don't have the edit access.
[2018-04-25 22:08:40] <somers__> Ok, try again
[2018-04-25 22:32:33] <aniketp41> Thanks somers__ ! I created a basic page and would keep it updated throughout the project
[2018-04-25 22:32:33] <aniketp41> https://wiki.freebsd.org/AniketPandey
[2018-04-25 22:43:28] <aniketp41> Btw @somers__ , Would you advise on testing auditdistd(8) as well? A contributer Mateusz Piotrowski emailed me asking about it.
[2018-04-26 03:11:32] <somers__> aniketp41 I would consider auditdistd to be a stretch goal.  Testing the auditing itself is more important.
[2018-04-26 15:14:58] * somers__ (~somers@63-224-81-204.hlrn.qwest.net) quit Remote host closed the connection
[2018-04-26 16:07:57] * somers (~somers@2602:3f:e051:cc00:e23f:49ff:fe44:d7b6) join
[2018-04-26 23:07:07] * somers_ (~somers@63-224-81-240.hlrn.qwest.net) join
[2018-04-26 23:08:35] * somers (~somers@2602:3f:e051:cc00:e23f:49ff:fe44:d7b6) quit Ping timeout: 252 seconds
[2018-04-27 00:40:28] <aniketp41> Hi @somers_, Does your work at Spectra involve FreeBSD? I was just curious. As I've noticed that quite a few FreeBSD devs contribute to it as a part-time hobby, while others use it at work. 
[2018-04-27 13:08:39] * somers__ (~somers@63-224-80-23.hlrn.qwest.net) join
[2018-04-27 13:09:14] <somers__> Yeah, Spectra's products run on FreeBSD
[2018-04-27 13:10:49] * somers_ (~somers@63-224-81-240.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-27 16:15:36] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) join
[2018-04-27 16:17:49] * somers__ (~somers@63-224-80-23.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-29 13:36:29] <aniketp41> Hi @somers_, I mailed the soc-admins about getting a subversion account and a branch in socsvn repository. Also, my semester exams ended today so I'll regularly update you on my work from now on
[2018-04-29 13:39:32] * rwatson (robert@fledge.watson.org) join
[2018-04-29 14:04:21] <somers_> cool
[2018-04-29 14:47:36] <aniketp41> Btw @somers_, how much time does it take to "buildworld" the freebsd kernel by a single job? I was trying to build my tests by compiling the "/usr/src" and its been running for the last 10 minutes..
[2018-04-29 14:48:25] <aniketp41> Although I later realized that the guide here https://www.freebsd.org/doc/handbook/makeworld.html recommended four jobs (-j4)
[2018-04-29 14:48:38] <somers_> Depends on what kind of machine you have.  "buildworld" can take anywhere from 10 minutes to 2.5 hours on typical hardware
[2018-04-29 14:49:00] <somers_> But once you've built it once, you can do "make -DNO_CLEAN buildworld" on subsequent invocations
[2018-04-29 14:51:30] <somers_> The number of jobs should be at least equal to the number of CPU cores.  If you're I/O is slow, then use up to 2x number of cores for your job number
[2018-04-29 14:51:33] <aniketp41> I created a separate VM for specifically this task and it does not have very good specs. so by what you said it might take a long time
[2018-04-29 14:51:39] <somers_> Is your source directory mounted over NFS?
[2018-04-29 14:52:46] <aniketp41> No it is simple UFS
[2018-04-29 14:53:24] <somers_> Ok, that's fine then.  Just give your VM as much CPU and RAM as you can, set the jobs number appropriately, and wait.
[2018-04-29 15:04:37] <aniketp41> Wow, it's building quite fast, my main machine had 8 cores and 16 gigs of ram which allowed me to allocate 4 cores and about 10 gigs to my VM. With 8 jobs it's doing well!
[2018-04-29 15:05:04] <somers_> cool!  What kind of storage does it have?
[2018-04-29 15:09:43] <aniketp41> I think its HDD, although the Virtualbox showed an option to have an SSD partition
[2018-04-29 15:10:07] <somers_> What's important is the physical device, not how VirtualBox displays it
[2018-04-29 15:10:20] <aniketp41> Though my main machine has 256 gigs SSD
[2018-04-29 15:10:52] <somers_> If you have SSD storage and 4 cores, then 8 build jobs is too many.  Just use 5-6
[2018-04-29 15:15:56] <aniketp41> Okay, I'll keep it in mind the next time I try building the kernel
[2018-04-29 15:53:04] <aniketp41> So it took 46 minutes approx to buildworld. Now doing buildkernel with 6 jobs now
[2018-04-30 00:36:54] <aniketp41> Hi @somers_, I was reading about non-blocking sockets for testing network APIs as you suggested in a previous mail. But I couldn't come up with any idea about how this would help me in writing the test program. For instance, to have all system calls in one place, I'll need to have both client and server running in the single program, but how would using non-blocking socket help me? AFAIK it would just prevent accept(2), recv(2) from blocking the connection. 
[2018-04-30 00:42:38] <aniketp41> I also had another idea about the approach that I might follow. Till now I've been testing the file-create/read audit_events independently, so what if I use the same approach for network system calls that don't need a client (or a server, the other way), like socket(2), bind(2), setsockopt(2), listen(2) etc. Once I've confirmed their audit, I can simply close the socket as I don't really need a connection here.
[2018-04-30 00:42:38] <aniketp41> As for syscalls like accept(2), connect(2), send(2), recv(2) etc, that need a connection, I can have a separate binary which I can execute using system(3) and them call the syscall from my kyua test-case, and finally poll into auditpipe(4) to check if that particular syscall is audited or not? This approach is a bit weird since I will need external socket-programs, but might actually work! Please provide your inputs for this.. 
[2018-04-30 03:42:12] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-04-30 03:43:37] * somers_ (~somers@63.224.80.107) join
[2018-04-30 03:44:09] * somers_ (~somers@63.224.80.107) quit Remote host closed the connection
[2018-04-30 03:45:41] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) join
[2018-04-30 06:14:38] * somers__ (~somers@63-224-80-93.hlrn.qwest.net) join
[2018-04-30 06:16:56] * somers_ (~somers@63-224-80-107.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-30 07:37:37] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) join
[2018-04-30 07:39:47] * somers__ (~somers@63-224-80-93.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-04-30 13:47:25] <aniketp41> ping @somers_
[2018-04-30 14:08:34] <somers_> I don't think you should use external helper programs
[2018-04-30 14:09:25] <somers_> All of the networking syscalls should be testable using a single thread, with nonblocking sockets
[2018-04-30 14:09:35] <somers_> Is there one in particular that you're having trouble with?
[2018-04-30 14:13:08] <aniketp41> So like if I have a server with non-blocking socket, how would I connect(2) using the client? I'm not sure how I would put the client within the same program.
[2018-04-30 14:15:18] <somers_> The "server" would set its socket to be nonblocking, and call listen.  Then the "client" would set its end to nonblocking, and call connect.  Finally, the "server" would call accept.
[2018-04-30 14:16:09] <somers_> I'm not sure if the connect call would succeed, or return EINPROGRESS.  I think it would succeed as long as the socket is listening.
[2018-04-30 15:26:14] <aniketp41> Hi @somers_, The method you suggested worked. I followed the same pattern, server->listen, client->connect, server->accept and all the basic network APIs were audited
[2018-04-30 15:26:16] <aniketp41> https://pastebin.com/Pp3wBMCV
[2018-04-30 15:26:45] <aniketp41> Please ignore the formatting as I'll improve it in the formal program!
[2018-04-30 15:28:31] <aniketp41> Audit result: https://pastebin.com/g15LQ9gM
[2018-04-30 15:31:03] <aniketp41> But on my Linux main machine it returns EINPROGRESS: Connect error: Operation now in progress
[2018-04-30 16:20:18] <aniketp41> @somers_, would polling be a solution for EINPROGRESS issue here? Although this this did not happen in my FreeBSD machine, but it did in Linux 
[2018-04-30 16:26:53] <aniketp41> Also, @somers_, @rwatson,  I was testing unlink(2) and unlinkat(2) system call which is under "ad": administrative audit_class but the audit was unsuccessful on setting "ad" as the audit flag while on setting the flag as "all", it was successful  
[2018-04-30 16:27:12] <aniketp41> Is "ad" really the audit_class for unlink(at)(2)?
[2018-04-30 16:27:49] <aniketp41> Oh sorry its fd, my mistake!
[2018-04-30 18:13:46] <aniketp41> ping @somers_
[2018-04-30 18:27:30] <somers_> Yes?
[2018-04-30 18:31:56] <somers_> @aniketp41 in your connect test, it looks like the client is trying to connect to 0.0.0.0:9000.  I'm not even sure what it means to connect to 0.0.0.0.  Your results might be more portable if it connects to 127.0.0.1
[2018-04-30 18:35:36] <somers_> But the error on Linux probably means that the connection attempt is in progress, and you should use select(2) to know when it's complete
[2018-04-30 18:57:13] <aniketp41> Yes @somers_, I think I'll have to change this "server.sin_addr.s_addr = "INADDR_ANY" to "inet_addr("127.0.0.1")"
[2018-04-30 19:03:15] <aniketp41> It might have been trying to connect to all available interfaces (i.e 0.0.0.0)
[2018-05-01 03:19:56] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-05-01 03:20:03] <gnn> aniketp41: Hello.
[2018-05-01 08:28:56] <aniketp41> Hello @gnn, thanks for joining the channel!
[2018-05-01 10:37:03] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-05-01 16:18:52] <aniketp41> Hi @gnn, I'm working in the organization of files in the test-suite as I arranged it as such before I started creating Kyua test-cases. 
[2018-05-01 21:38:02] <aniketp41> Hi @somers_, how did you compile the Kyua test-program that I shared with you once? 
[2018-05-01 21:38:02] <aniketp41> I'm currently having a trouble with linking the <atf-c.h> header with the main program
[2018-05-01 21:38:22] <aniketp41> Here is the link to the error produced https://pastebin.com/La8Wvexh
[2018-05-01 21:39:16] <aniketp41> I tried compiling with the example shown here https://github.com/jmmv/kyua/wiki/Quickstart-atf-c-test#atf_tests2c---test-program-with-multiple-test-cases but it doesn't seem to work
[2018-05-01 21:41:28] <somers_> @aniketp41 I put the program in tests/sys/audit and wrote this to tests/sys/audit/Makefile:
[2018-05-01 21:41:45] <somers_> ESTSDIR=       ${TESTSBASE}/sys/audit
[2018-05-01 21:41:45] <somers_> ATF_TESTS_C+=   mkdir-atf0
[2018-05-01 21:41:45] <somers_> TEST_METADATA.mkdir-atf0+= timeout="30"
[2018-05-01 21:41:45] <somers_> CFLAGS+=        -I${.CURDIR:H:H}
[2018-05-01 21:41:45] <somers_> WARNS?= 6
[2018-05-01 21:41:46] <somers_> .include <bsd.test.mk>
[2018-05-01 21:46:00] <aniketp41> Yes I followed a similar makeshift procedure of putting the tests in /usr/src/sbin/devd/tests and replaced the content of its Makefile to test mkdir-atf0.c instead of client-test.c and it worked.
[2018-05-01 21:46:00] <aniketp41> But now that I'm trying to separate the setup functions in a separate C file so that I can share it with multiple test programs but I'm unable to link it properly. Can you suggest me a way to do so?
[2018-05-01 21:46:20] <aniketp41> Possibly making some modifications to the Makefile?
[2018-05-01 21:48:49] <somers_> So you want to build a single binary from two .c files?  Then you need to specify the SRCS variable.  Take a look at sys/geom/class/eli/Makefile
[2018-05-01 21:49:03] <somers_> err, tests/sys/geom/class/eli/Makefile
[2018-05-01 21:55:24] <aniketp41> @somers_, is there supposed to be a Makefile in the test-suite? I only found a bunch of tests and a Kyuafile.. 
[2018-05-01 21:55:39] <aniketp41> at /usr/tests/sys/geom/class/eli
[2018-05-01 21:55:49] <somers_> I'm talking about the source directory
[2018-05-02 01:51:16] <aniketp41> @somers_, using the Makefile you provided was giving quite a lot of errors which I didn't get before, some of them referenced no extern declaration for non-static global variables, which made sense. But a lot of the other errors should've been a warning (shadowing global scope) unless its too strict. Here is the list: https://pastebin.com/wPAxNJat
[2018-05-02 02:37:41] <aniketp41> Hi @somers_, I made a few changes to remove all the errors, please have a look at the changes and suggest any improvements https://github.com/aniketp/AuditTestSuite/commit/b456c15c7dc2a8728b764f49d8429fbee8fb37f9
[2018-05-02 02:37:46] <somers_> Yeah, those are all errors in your code.
[2018-05-02 02:38:36] <somers_> We should switch from reviewing on Github to using Phabricator, now that you've got a full src tree setup
[2018-05-02 02:38:59] <somers_> https://wiki.freebsd.org/Phabricator
[2018-05-02 02:42:33] <aniketp41> src tree setup in socsvn repository branch? I didn't receive any notification about it..
[2018-05-02 02:43:22] <somers_> Do you have an svn account yet?  You can create the branch yourself if so
[2018-05-02 03:00:22] <aniketp41> I don't think I have an SVN account yet, was waiting for confirmation from the soc-admins. But I had created an account earlier in FreeBSD's Phabricator. i.e https://reviews.freebsd.org/
[2018-05-02 03:40:01] <aniketp41> Btw @somers_, adding SRCS+=filename.c to the above Makefile do the job?
[2018-05-02 03:40:13] <aniketp41> *will adding
[2018-05-02 03:41:45] <somers_> try it and see
[2018-05-02 09:04:11] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) quit Remote host closed the connection
[2018-05-02 09:05:40] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) join
[2018-05-02 12:21:20] <aniketp41> @somers_, @gnn Generally how long does it take to get a reply back from soc-admins@ ? I'm unable to setup my svn work-area as I don't have an account yet!
[2018-05-02 14:08:10] <aniketp41> Hi @somers_, I've been trying to separate the setup functions from main test program and tried to modify the Makefile to include "SRCS+=setup". But from the errors it seems that the test-program is not able to identify the function declaration in setup.h https://pastebin.com/1CyZii70
[2018-05-02 14:08:46] <aniketp41> Here is the directory organisation within usr/src/tests/sys/audit: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 14:16:49] <somers_> you simply forgot to include setup.h in setup.c
[2018-05-02 14:18:48] <aniketp41> Oops, right! Correcting it now
[2018-05-02 14:21:22] <aniketp41> Now it's giving me a bunch of linker errors (same as what I got when I tried independently compiling the tests). Maybe there is an issue with my Makefile, I guess?
[2018-05-02 14:21:22] <aniketp41> Most of the linker error is like this: "undefined reference to `atf_tc_<some-api>"
[2018-05-02 14:22:08] <aniketp41> https://pastebin.com/R7t1JXJw
[2018-05-02 14:23:06] <somers_> Try "SRCS.file-create+=setup" in your Makefile
[2018-05-02 14:26:08] <aniketp41> @somers_, similar error again :/
[2018-05-02 14:26:39] <aniketp41> Is it not able to link to atf-c.h?
[2018-05-02 14:27:06] <somers_> You don't link to header files.  Show me your Makefile and error message
[2018-05-02 14:31:39] <aniketp41> Here is the Makefile: https://github.com/aniketp/AuditTestSuite/blob/restructure/src/Makefile
[2018-05-02 14:31:39] <aniketp41> And the error message after modifying the Makefile: https://pastebin.com/XNABQ9V0
[2018-05-02 14:33:33] <somers_> then try explicitly setting all of SRCS.  "SRCS.file-create=file-create.c setup.c"
[2018-05-02 15:38:45] <gnn> aniketp41: Should be a day or so.
[2018-05-02 15:38:55] <gnn> If more than that email again and cc me again and I'll talk to them.
[2018-05-02 15:39:02] <gnn> They are, as most of us, overworked.
[2018-05-02 16:38:04] <aniketp41> Hi @somers_, I made the change in Makefile, "SRCS.file-create=file-create.c setup.c". The linker issue was gone but it also generated a bunch of new errors. Some of them weirdly pointing to implicit declaration of ATF_TC_* functions. 
[2018-05-02 16:38:04] <aniketp41> Here is the error log: https://pastebin.com/FVBZq4vn
[2018-05-02 16:38:04] <aniketp41> And the code: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 16:39:11] <somers_> You forgot to include atf.h
[2018-05-02 16:41:05] <aniketp41> Ohh, I included it in the wrong file again. It should be in file-create.c instead of setup.c. Thanks!
[2018-05-02 16:47:48] <aniketp41> @somers_, Is it alright that I move all includes in setup.h seeing all the fuss which is being created?
[2018-05-02 16:47:48] <aniketp41> Btw the tests are passing again!
[2018-05-02 16:48:37] <somers_> Header bloat is frowned upon.  In FreeBSD, the convention is for file to #include only what it needs.
[2018-05-02 16:50:23] <aniketp41> Okay then I'll have a careful look at what is needed where and move the includes appropriately..
[2018-05-02 17:07:04] <aniketp41> @somers_, I made the appropriate changes in inclusions: Please have a look the current code: https://github.com/aniketp/AuditTestSuite/tree/restructure/src
[2018-05-02 17:09:15] <aniketp41> Also, according to the list of audit_events corresponding to audit_class (fc: file-create), I've made basic test-cases for all 12 syscalls in both failure mode. Shall I create a differential once I get my svn account?
[2018-05-02 17:09:15] <aniketp41> Unless you want me to test some other functionalities of "fc" audit_class before I move on to other classes?
[2018-05-02 17:09:36] <aniketp41> *in both failure and success mode
[2018-05-02 17:09:58] <somers_> please do
[2018-05-02 18:21:00] * somers (~somers@63-224-80-52.hlrn.qwest.net) join
[2018-05-02 18:21:59] * somers_ (~somers@63-224-81-79.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-05-02 19:44:46] * somers_ (~somers@63-224-81-246.hlrn.qwest.net) join
[2018-05-02 19:51:12] * somers (~somers@63-224-80-52.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-03 17:59:47] <aniketp41> Hi @somers_, shall I simply add these files to tests/sys/audit (including the Makefile) while creating a differential? I'm working with a fork of https://github.com/freebsd/freebsd
[2018-05-03 18:00:16] <aniketp41> https://github.com/aniketp/AuditTestSuite/tree/master/src
[2018-05-03 19:39:35] <aniketp41> Ping @somers_
[2018-05-03 20:12:42] <somers_> Yeah, you can add files in a differential revision
[2018-05-03 22:09:30] <aniketp41> Hi @somers_, I created a diff here: https://reviews.freebsd.org/D15286. Please have look. And since this is my first review, please do point out if I messed up somewhere!  
[2018-05-04 15:22:40] <aniketp41> @somers_, what should we do about the non-root issue, since auditpipe does not seem to work here?
[2018-05-04 15:23:35] <somers_> Have you seen anything in the docs about auditing as a non-root user?  Presumably you would be restricted to auditing your own events only.
[2018-05-04 15:30:30] <aniketp41> The doc here https://www.freebsd.org/doc/handbook/audit-administration.html#idp69949288 mentions that the audit trails and the auditpipe(4) is available to the group "audit". I was able to pass the tests when I added myself to that group. Apart from that, I couldn't find any way to access audit facility as a normal user..
[2018-05-04 15:37:06] <somers_> Well, you can certainly skip the tests on the basis of group membership
[2018-05-04 15:37:53] <somers_> Actually, the stuff in /var/audit looks like it's available to group audit, but /dev/auditpipe is only available to root
[2018-05-04 15:43:28] <aniketp41> Oh apologies, the tests produced the same results (bad file descriptor) from audit group too, I guess I must've run the tests as root user, that's how it must have passed (I have SSHd into my VM from two windows, one as root, other as a normal user, so might have inverted the test windows :D )
[2018-05-04 15:43:28] <aniketp41> So, for now, shall I skip the tests for non-root users?
[2018-05-04 15:43:55] <aniketp41> Since no group can actually access /dev/auditpipe..
[2018-05-04 15:44:14] <somers_> Yeah.  Just like you do for the mknod test
[2018-05-04 16:27:24] <aniketp41> Hi @somers_, please have a look at the changes, https://reviews.freebsd.org/D15286
[2018-05-04 22:24:07] * somers__ (~somers@63-224-81-22.hlrn.qwest.net) join
[2018-05-04 22:30:45] * somers_ (~somers@63-224-81-246.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-05 13:53:06] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) join
[2018-05-05 13:59:58] * somers__ (~somers@63-224-81-22.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-05 20:11:29] <aniketp41> ping @somers_.
[2018-05-05 22:48:39] <somers_> Hello @aniketp41.  I haven't forgotten about the review
[2018-05-06 23:36:15] <aniketp41> Hi @somers_, I too had the issue of auditpipe(4) not giving any output which resulted in this : "Auditpipe did not return anything within the time limit"
[2018-05-06 23:36:15] <aniketp41> But on doing it again it seemed to work. I figured that was due to auditd(8) not initializing properly
[2018-05-06 23:36:30] <aniketp41> Currently the tests are working on my machine
[2018-05-07 00:31:53] <aniketp41> @somers_, I made the formatting corrections: https://github.com/aniketp/AuditTestSuite/commit/e03991b8d18011615d7c3038926cce86d28dbda4
[2018-05-07 00:31:53] <aniketp41> If these are alright then I'll update the revision?
[2018-05-07 00:32:33] <somers_> auditd doesn't really have anything to do with auditpipe
[2018-05-07 00:33:07] <somers_> maybe there's a race or something
[2018-05-07 00:43:35] <aniketp41> Hmm, weird, the tests were passing for me. The function check_audit() is the heart of this approach and it is called right after triggering the system call we want to audit (as it should be). And since we've already opened "/dev/auditpipe" before the system call, I can't think of a reason auditpipe(4) should miss the syscall trigger. And since we have ATF_REQUIRE check in place, that means the system call was successfully triggered
[2018-05-07 00:43:43] <aniketp41> Unless I'm missing something
[2018-05-07 06:59:23] <rwatson> aniketp41: there's no synchronicity requirement that a syscall only return after the record goes out of the audit pipe, so you might need to insert a short delay after the system call before expecting a record to be emitted from /dev/auditpipe
[2018-05-07 06:59:51] <rwatson> aniketp41: what approach are you using to narrow down the events returned on the audit pipe to try to select only those of interest for capture?
[2018-05-07 09:26:33] <aniketp41> Hi @rwatson, during the initial setup, we've set the local mode preselection parameters to override the system-wide audit mask setting (using this function: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L91) , i.e "file-create (fc)" in our case. That narrows down to the system call of interest.
[2018-05-07 09:26:33] <aniketp41> Next, we ppoll(2) onto the auditpipe(4) with an infinite loop and set the timeout as 5 seconds. Since, it's highly possible that the first audit_event to be emitted from /dev/auditpipe might not be what we want, so for that we have a check in place which passes the test if we get the desired system call else continue the loop, i.e here: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L164
[2018-05-07 09:32:15] <aniketp41> Hello @somers_, is it possible that the code which led to the failure of tests in your case might not be the same as mine? Like, an issue while applying the patch.
[2018-05-07 09:32:15] <aniketp41> Cause I've tried many different situations to run the tests, i.e auditd(8) running, not running, root, not root, various combinations of auditd(8) startup right before starting the tests, SSH into VM, directly from VM. All these scenarios produced expected results.
[2018-05-07 09:32:15] <aniketp41> Also, we eliminated the race condition by the infinite loop so theoretically this should work, right?
[2018-05-07 11:00:18] <rwatson> aniketp41: Are you definitely setting it to audit both successful and failed events?
[2018-05-07 11:00:30] <rwatson> it's been quite a long time since I wrote the audit-pipe code. I might need to refresh my memory.
[2018-05-07 11:05:41] <aniketp41> Yes @rwatson, I'm setting both success and failure bits as the required audit_mask
[2018-05-07 11:05:41] <aniketp41> Here is the snippet: https://github.com/aniketp/AuditTestSuite/blob/master/src/utils.c#L145
[2018-05-07 11:06:42] <aniketp41> I used getauclassman(3) as @somers_, suggested, to fetch the audit class mask
[2018-05-07 14:04:14] * somers__ (~somers@63-224-81-231.hlrn.qwest.net) join
[2018-05-07 14:10:32] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-07 14:12:44] <somers__> @aniketp41 I blew away my tests/sys/audit directory, then recreated it with "arc patch D15286".  So I'm using the same code as what's in the review
[2018-05-07 14:16:29] <aniketp41> Its weird, it passes for me no matter how I test it. I remember the only time it misbehaved was when my audit system spewed non-stop audit records in live-auditing mode (I guess that was because of recursive auditing as I has SSHd)
[2018-05-07 14:25:32] <somers__> It doesn't fail for me 100%.  Last night it was failing.  Today it's passing.  That's why I suspect a race somewhere
[2018-05-07 14:27:26] <aniketp41> @somers__, did the tests fail for both cases, i.e auditd(8) already running and not running?
[2018-05-07 14:27:26] <aniketp41> Cause for me the first test-case failed and by the error message it seemed auditd(8) startup was not poll(2)ed at auditpipe.
[2018-05-07 14:27:26] <aniketp41> But then rest 23 test-cases passed without any issue
[2018-05-07 14:28:12] <aniketp41> *The time I had this issue, everything works fine as of now (hopefully)
[2018-05-07 14:42:56] <somers__> I think there's a bug in the audit filtering mechanism.
[2018-05-07 14:43:28] <somers__> If I remove an audit class from `flags` and `naaflags` in /etc/security/auditcontrol, then do `audit -s`, those events still turn up in the audit log
[2018-05-07 14:43:39] <somers__> (Adding classes seems to work; only removing classes does not)
[2018-05-07 15:20:02] <aniketp41> @somers__, I tried doing the same, but for me "audit -s" does not update the flags whether I remove an audit_class or add it. The changes only take effect when I logout of my SSH session and log back in.
[2018-05-07 15:20:02] <aniketp41>  
[2018-05-07 15:23:12] <somers__> weird; it did the same for me.
[2018-05-07 15:25:37] <aniketp41> @rwatson might have an idea about this issue?
[2018-05-07 15:27:38] <aniketp41> Btw @somers__, I added 24 more test cases (open(2) and openat(2) for various combination of O_RDONLY, O_WRONLY, O_RDWR, O_TRUNC) along with O_CREAT (for "fc": audit class) in both success and failure mode: https://pastebin.com/qP5GR4Pj
[2018-05-07 15:27:53] <aniketp41> Code: https://github.com/aniketp/AuditTestSuite/blob/master/src/file-create.c
[2018-05-07 15:27:59] <somers__> cool
[2018-05-07 15:38:22] <aniketp41> Also, @somers__, since various modes of open(2) are categorized within multiple audit_classes , e.g "74:AUE_OPEN_RT:open(2) - read,trunc:fd,fr,fa,fm", would you suggest I test this particular case for all fd, fr, fa, fm classes or just any random audit_class would do?
[2018-05-07 15:39:23] <somers__> I suppose we probably ought to test them all
[2018-05-09 12:33:32] <aniketp41> Hi @somers__, @rwatson, is there any variant of "copyfile(2)" system call? It was mentioned in the audit_event list but i couldn't find any man-page or info about it..
[2018-05-09 12:33:32] <aniketp41> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L411
[2018-05-09 13:12:30] <somers__> copyfile is only for OSX.  And it's not a syscall really, just a library function
[2018-05-09 13:15:12] <aniketp41> Okay, so are the man-page sections different for OSX? Cause afaiu, (2) is only for syscalls in FreeBSD.. 
[2018-05-09 13:15:40] <somers__> I don't know how OSX man pages are organized
[2018-05-09 14:21:07] <rwatson> somers__: there is a copyfile(2) system call in XNU
[2018-05-09 14:21:13] <rwatson> somers__: But there is also a library call
[2018-05-09 14:21:31] <rwatson> somers__: the reason for the system call is server-side copy in some distributed filesystems
[2018-05-09 14:21:37] <rwatson> somers__: e.g., AFP and maybe CIFS?
[2018-05-09 14:22:00] <somers__> I see.  But the library call does the work for local filesystems?
[2018-05-09 14:22:15] <rwatson> somers__: I can never remember. :-) I think so, and also for inter-filesystem copies
[2018-05-09 14:22:26] <rwatson> somers__: it's very .. layered
[2018-05-09 14:22:56] <somers__> In any case, it isn't relevant for Aniket's project
[2018-05-09 14:23:01] <rwatson> indeed.
[2018-05-09 14:23:16] <rwatson> I'd focus on freebsd system calls and freebsd userspace parts such as authentication
[2018-05-09 14:23:25] <rwatson> and, of course, on mechanisms such as audit pipes, preselection, etc.
[2018-05-09 14:23:37] <rwatson> but simply iterating over system calls seems a good and productive activity.
[2018-05-09 14:23:46] <somers__> I agree
[2018-05-09 16:12:34] <aniketp41> Hi @somers__, I created 32 more test cases for "file-read" audit class, (mostly "readlink" and "open") :https://github.com/aniketp/AuditTestSuite/blob/master/src/file-read.c
[2018-05-09 16:12:34] <aniketp41> Also would it be right do define those "fileforaudit" strings in "utils.h" since I'll using them in multiple files? Or shall I leave them as it is?
[2018-05-09 16:13:24] <aniketp41> Quite a lot of test-cases already! https://pastebin.com/014VkGG9
[2018-05-09 17:09:17] <somers__> Isn't "fileforaudit" restricted to utils.c?
[2018-05-09 17:16:24] <aniketp41> Nope it's used in test-cases as the "path" 
[2018-05-09 17:16:49] <aniketp41> So it's used in almost every test-case I've developed till now
[2018-05-09 19:01:18] <aniketp41> Ping @somers__. Is there anything left to do with D15286? I was thinking of opening another differential as know I have more than triple the test-cases. And I guess reviewing them might also take a bit of time..
[2018-05-09 19:01:26] <aniketp41> *now
[2018-05-09 19:01:56] <somers__> We can't commit D15286 until we solve the intermittency bug
[2018-05-09 19:02:39] <somers__> If you understand the bug well enough that you can cause it to fail 100% of the time, then we can commit tests with "atf_expect_fail" statements.  But we can't commit intermittent tests.
[2018-05-09 19:18:08] <aniketp41> So @somers__, in that scenario what should be the best approach for me? Shall I keep adding tests or try to figure out the issue. Do you think it can be resolved without much hassle?
[2018-05-09 19:20:01] <somers__> Well, it seems fairly easy to reproduce.  For me, it seems to happen whenver I boot with the default /etc/security/audit_control.  I can make it go away by adding fc to the flags in audit_control, and the bug does not return when I revert audit_control (even if I do audit -s).
[2018-05-09 19:20:22] <somers__> However, the bug likely lies in the kernel.  Want to learn some kernel programming?
[2018-05-09 19:25:58] <aniketp41> I tried my hands on writing device drivers once, but was quite unsuccessful. I can try but I'm not too sure if I can get it right :D 
[2018-05-09 19:34:23] <aniketp41> @somers__, I set "flags:nt" in audit_control, confirmed that network events were being emitted from auditpipe, rebooted the VM and ran the tests, it seemed to work somehow. 
[2018-05-09 19:35:14] <aniketp41> Btw, what flags did you have in your default audit_control?
[2018-05-09 19:35:51] <somers__> You shouldn't need to set those flags in /etc/security/audit_control, because we're overriding them with AUDITPIPE_SET_PRESELECT_FLAGS
[2018-05-09 19:37:25] <aniketp41> But @somers__, you said that adding "fc" to /etc/security/audit_control seemed to pass the tests for you? So isn't it being affected by the audit_control file? 
[2018-05-09 19:37:35] <somers__> Hm, I wonder if the problem is because you don't do AUDITPIPE_SET_PRESELECT_NAFLAGS
[2018-05-09 19:37:50] <somers__> It is, but it shouldn't be.  That's the bug.
[2018-05-09 19:39:37] <aniketp41> @somers__, I'll try adding "AUDITPIPE_SET_PRESELECT_NAFLAGS" too but at the moment I'm not able to reproduce the bug.. It just happened once a while back but never again. 
[2018-05-09 19:39:55] <somers__> ok.  I'll try it out once you update the review
[2018-05-09 19:50:09] <aniketp41> @somers__, Is it possible that auditpipe(4) does not emit "audit startup" for the very first test-case?
[2018-05-09 19:50:09] <aniketp41> I got this weird issue for the first time: https://pastebin.com/V8caGFww
[2018-05-09 19:50:53] <aniketp41> I had "praudit /dev/auditpipe" running in an other window and it did not output anything for link_failure case, as expected because of that issue
[2018-05-09 19:51:43] <somers__> What's weird about it?  That just means that get_records returned false
[2018-05-09 19:54:07] <aniketp41> That means "audit startup" string was not found in the memstream, so audit startup was not logged right? Or does it signify something else? 
[2018-05-09 19:55:08] <aniketp41> Cause the one time I had an issue was that I got "Poll: auditpipe did not return anything within the time limit" for every system call. 
[2018-05-09 20:26:19] <somers__> Yep
[2018-05-09 20:46:33] <aniketp41> So @somers__, are such kind of errors (which I just got, but it seems to have gone away again) allowed with Kyua philosophy?
[2018-05-09 20:46:33] <aniketp41> Also, I updated the differential: https://reviews.freebsd.org/D15286
[2018-05-09 21:11:30] <somers__> What "Kyua philosophy"?
[2018-05-09 21:15:29] <aniketp41> As in, is the error acceptable?
[2018-05-09 21:35:21] <somers__> It's not ok for a test to intermittenly fail, if that's what you're asking
[2018-05-09 21:38:25] <somers__> I think the NAFLAGS change fixed the tests's intermittency
[2018-05-09 21:48:28] <aniketp41> Quite cool! I'll remove the curly braces and update the diff
[2018-05-09 21:58:20] <aniketp41> @somers__ updated, https://reviews.freebsd.org/D15286
[2018-05-09 22:13:24] <aniketp41> @somers__ how are you able to segregate the tabs and spaces? I have set 8 hard width tab in my IDE but sometimes when I'm editing it on the fly with some other editors I miss the tab requirement..
[2018-05-09 22:13:35] <aniketp41> *between
[2018-05-09 22:13:59] <aniketp41> It's also hard to notice the difference and spot the mistake
[2018-05-09 22:14:33] <somers__> In vim, I used this search string to find errant space indentation: "^\t*  "
[2018-05-09 22:46:40] <aniketp41> @somers__, the tests seemed to work without this line: "SRCS.file-create+= file-create.c"
[2018-05-09 22:47:00] <aniketp41> i.e, it worked with simply: SRCS.file-create+= utils.c
[2018-05-09 22:51:48] <somers__> Makes sense
[2018-05-09 22:57:41] <aniketp41>  Okay I'll update the differential
[2018-05-09 23:00:19] <somers__> I think I figured out why you were getting the errors in check_audit_startup
[2018-05-09 23:00:36] <somers__> It's because the preselect mask wasn't set to include class "ad", which is the class for the "audit startup" messages.
[2018-05-09 23:05:04] <aniketp41> Oh, right! this one -> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L674
[2018-05-09 23:05:15] <somers__> Unfortunately, when I try to include it, I get a reproducible panic:
[2018-05-09 23:05:21] <somers__> panic: Bad tailq NEXT(0xfffff80047450ec8->tqh_last) != NULL
[2018-05-09 23:05:22] <somers__> cpuid = 1
[2018-05-09 23:05:22] <somers__> time = 1525906488
[2018-05-09 23:05:22] <somers__> KDB: stack backtrace:
[2018-05-09 23:05:22] <somers__> db_trace_self_wrapper() at db_trace_self_wrapper+0x2b/frame 0xfffffe00264488a0
[2018-05-09 23:05:22] <somers__> vpanic() at vpanic+0x18d/frame 0xfffffe0026448900
[2018-05-09 23:05:24] <somers__> panic() at panic+0x43/frame 0xfffffe0026448960
[2018-05-09 23:05:26] <somers__> kaudit_to_bsm() at kaudit_to_bsm+0x5265/frame 0xfffffe0026448a10
[2018-05-09 23:05:28] <somers__> audit_worker() at audit_worker+0x30d/frame 0xfffffe0026448a70
[2018-05-09 23:05:30] <somers__> fork_exit() at fork_exit+0x84/frame 0xfffffe0026448ab0
[2018-05-09 23:05:32] <somers__> fork_trampoline() at fork_trampoline+0xe/frame 0xfffffe0026448ab0
[2018-05-09 23:05:42] <somers__> I'll update my VM and try to figure out what's going on.
[2018-05-09 23:06:20] <aniketp41> Are these kernel errors? I haven't seen them before..
[2018-05-09 23:06:31] <aniketp41> Oh I understand now, kernel panic
[2018-05-09 23:08:31] <aniketp41> @somers__, do I need to to add preselection flag as "ad" for audit startup. I guess I can "OR" it with the audit mask I'm passing as the argument
[2018-05-09 23:10:44] <somers__> Yes, that's what I think you should do.
[2018-05-09 23:11:48] <aniketp41> Okay on it! I guess I'll need to tweak the order of the code of "utils.c"
[2018-05-09 23:17:01] <aniketp41> Btw, @somers__, is it allowed to set the local preselection flags once then change them later on in the same program?
[2018-05-09 23:17:01] <aniketp41> Cause I was wondering that if we really need to set "fd" when auditd(8) was already running.. 
[2018-05-09 23:17:17] <aniketp41> *ad
[2018-05-09 23:17:40] <somers__> No, because if auditd(8) is already running, then we don't need to check for auditd startup
[2018-05-09 23:17:47] <somers__> But it won't hurt.
[2018-05-10 12:31:23] <aniketp41> @somers__, I tried what you suggested, taking a bitwise OR of "class" and "ad" and then calling the function "set_preselect_mode" before audit_startup, so that we've basically converted the audit_startup_check to local mode with "fc | ad" flags. 
[2018-05-10 12:31:23] <aniketp41> But it looks like audit of audit_startup doesn't work in local mode. 
[2018-05-10 12:31:23] <aniketp41> i.e here are the changes in two functions: https://pastebin.com/usn7R72U  
[2018-05-10 12:32:46] <aniketp41> This time, the tests pass when auditd(8) is already running but get this: "get_records(auditstring, pipestream) not met" when it needs to be started from out program
[2018-05-10 12:32:55] <aniketp41> *our
[2018-05-10 15:25:35] <somers__> Hey Aniket.  What FreeBSD release are you using?
[2018-05-10 15:25:45] <somers__> ping @aniketp41
[2018-05-10 15:47:01] <aniketp41> uname -a gives: "11.1-RELEASE-p4"
[2018-05-10 15:47:31] <aniketp41> I got the latest VM image that @gnn had given me initially
[2018-05-10 15:48:21] <somers__> That's why you didn't see the panic that I did
[2018-05-10 15:48:37] <somers__> I'm using 12.0-CURRENT, which has extra sanity checks enabled
[2018-05-10 15:53:48] <aniketp41> Oh I see, I'm using the same VM image since the time I started using FreeBSD, so never had to update it
[2018-05-10 15:53:48] <aniketp41> Btw does it fix the issue of non-emitting of "audit_startup" in auditpipe(4)?
[2018-05-10 15:54:06] <somers__> nope.  I'm looking at that one now
[2018-05-10 15:54:42] <somers__> And BTW, 12.0-CURRENT isn't on the upgrade path from 11.1-RELEASE.  12.0-CURRENT is the bleeding edge image built from SVN head.  It's never officially released
[2018-05-10 16:03:37] <somers__> Uh, it looks like the preselect filters are working fine, but you get a few extra events before "audit startup"
[2018-05-10 16:05:13] <somers__> So I think you just need to loop in check_audit_startup
[2018-05-10 16:08:28] <aniketp41> Okay, so I essentially need to do the similar stuff as in "check_audit" function, right? somers__
[2018-05-10 16:08:37] <somers__> yep
[2018-05-10 16:08:55] <aniketp41> Okay, on it!
[2018-05-10 16:36:34] <aniketp41> Yes @somers__, the looping worked! So basically I reused "check_audit" in case of changing the "check_audit_startup" (as the code is same in both) and changed a bit of logic. Instead of while(true), I'm doing while("a variable") which is initialized by 1. When get_records() returns true, I'm changing the variable to 0, to end the while loop. (As I can't do "atf_tc_pass()" for audit checkup)
[2018-05-10 16:36:51] <aniketp41> *in case -> instead
[2018-05-10 16:41:14] <somers__> makes sense.  Is it ready for review?
[2018-05-10 17:00:00] <aniketp41> Just a sec. Making some final changes
[2018-05-10 17:03:54] <aniketp41> @somers__, there was one small issue. Since I'm doing two rounds of "check_audit" now, I can't close the file descriptors in that function as doing that after first round would fail the tests. Is there any work-around this?
[2018-05-10 17:04:20] <aniketp41> Like passing another boolean argument to "check_audit"
[2018-05-10 17:05:36] <somers__> How about check_audit and check_startup are both wrappers around a static function that has such as boolean argument.  That way you won't be exposing an argument to the test cases that they'll never use.
[2018-05-10 17:09:41] <aniketp41> So do you mean having three functions, where check_audit and check_startup would call another function while passing them a boolean argument?
[2018-05-10 17:16:19] <aniketp41> ping @somers__ 
[2018-05-10 17:16:44] <somers__> yeah.  Makes the API cleaner
[2018-05-10 17:35:56] <aniketp41> Hi @somers__, updated the diff!
[2018-05-10 17:35:56] <aniketp41> Also, had to add back the line "SRCS.file-create+= file-create.c" as apparently the linker issue persists without it. (Earlier I overlooked this somehow)
[2018-05-10 17:49:08] <aniketp41> @somers__, Isn't "am_failure" required as I'm also testing the failure mode of every syscall? 
[2018-05-10 17:49:52] <aniketp41> Oh, not for auditd(8), I see
[2018-05-10 17:49:57] <somers__> am_failure is required for the fc class, but not for ad
[2018-05-10 17:52:41] <aniketp41> Also, @somers__, since I'll move the cleanup part into "check_audit", I can remove the boolean arguments, right? As I don't need them anymore 
[2018-05-10 17:52:59] <somers__> yeah
[2018-05-10 17:56:18] <aniketp41> @somers__, would replacing checkpoint variable with break, break out of the loop? As it now produces a new error for every test-case:
[2018-05-10 17:56:18] <aniketp41> "failed: Incomplete audit record"
[2018-05-10 17:56:33] <aniketp41> I guess it's just breaking out of the switch statement
[2018-05-10 17:56:51] <aniketp41> I guess it's just breaking out of the switch statement
[2018-05-10 17:57:16] <somers__> If so, you can break out of the loop with a goto
[2018-05-10 18:02:19] <aniketp41> Isn't goto discouraged? I mean, also there isn't any specific location where I can make it jump. And if I make it jump at the end, then there isn't any code there too.
[2018-05-10 18:05:30] <aniketp41> ping @somers__, I thought that checkpoint method looked fine
[2018-05-10 18:06:43] <somers__> goto is allowed when it's better than any alternative.  This is the kind of place where it gets used in FreeBSD.  Other languages allow you to break out of nested loops, but not C.  So C programmers use goto in this place
[2018-05-10 18:06:54] <somers__> And if you just need to go to the end, then you can simply use return
[2018-05-10 18:10:43] <aniketp41> Okay @somers__, so I was for some reason not able to get goto to work hence I simply put a "return" there, as you suggested. (Since we don't need anything else from that function anymore)
[2018-05-10 18:11:01] <aniketp41> *(after we've reached that point)
[2018-05-10 18:11:17] <somers__> that's fine
[2018-05-10 19:14:28] <somers__> @aniketp41 none of the tests pass in your latest version
[2018-05-10 19:16:00] <aniketp41> Yes the tests fail for me when auditd is already running. But when I placed "set_preselect_mode" after auditd startup, they did pass however
[2018-05-10 19:16:12] <aniketp41> @somers__ 
[2018-05-10 19:16:52] <somers__> And you knew this?  Why did you upload a new revision to Phabricator if the tests don't pass?
[2018-05-10 19:18:44] <aniketp41> No I just checked. I hadn't confirmed the tests in the case when auditd(8) was already running. 
[2018-05-10 19:19:10] <aniketp41> As earlier we only had issues with tests for audit startup
[2018-05-10 19:21:44] <aniketp41> @somers__ 
[2018-05-10 19:22:00] <somers__> yes?
[2018-05-10 19:38:46] <aniketp41> @somers__, I placed "set_preselect_mode" after auditd(8) startup and now the tests are passing in both scenarios. I'll update the diff accordingly.
[2018-05-10 19:38:46] <aniketp41> Although what should we do about the race condition as you mentioned in the diff, as resolving that makes the test cases fail
[2018-05-10 19:44:27] <somers__> Why do they fail when set_preselect_mode is early?
[2018-05-10 19:56:20] <aniketp41> @somers__, The error is: "Auditpipe did not return anything within the time limit" when auditd(8) is already running. But everything works fine when we have to start it from our program. I guess, maybe "service auditd onestatus" has something to do with it. 
[2018-05-10 19:56:58] <somers__> It shouldn't.  You should try to figure out what's going on.
[2018-05-10 20:04:31] <aniketp41> Okay @somers__, BTW do they fail for you?
[2018-05-10 20:07:32] <somers__> The revision you posted at 12:15 PM MDT fails for me, whether or not auditd is started
[2018-05-10 20:14:38] <aniketp41> Okay @somers__., so I had updated the revision about 1.5 hours after that. Can you please check if that fails for you as well?  
[2018-05-10 20:14:38] <aniketp41> Current revision passes for me in both scenarios. But I also had to place "set_preselect_mode" after auditd startup.
[2018-05-10 20:14:38] <aniketp41> If the current revision passes for you then we can be sure that the placement of that function caused the issue
[2018-05-10 20:16:54] <somers__> When I move it as you suggest, all the tests pass if auditd is already running.  If it isn't, then most (but not all) tests fail.
[2018-05-10 20:26:04] <aniketp41> Hmm, I tried out the tests multiple times, it looks the only problem I'm having is when auditd(8) is running and "set_preselect_mode" is placed before audit startup. In all other cases, all tests pass for me. Not sure why some of them fail for you.
[2018-05-10 20:26:04] <aniketp41> But the placement of the function is causing an issue. Would it be alright if I place it after the audit startup? As I can't seem to understand any race condition here. On the contrary, fixing the race condition causes the issue for sure..
[2018-05-10 20:27:40] <somers__> There's a difference between fixing a race and winning a race.  With set_preselect_mode after auditd startup, you're winning the race.  That's bad.
[2018-05-10 20:28:06] <somers__> We can't commit this until the race is eliminated, and that means you need to understand why the tests fail when you do set_preselect_mode early.
[2018-05-10 21:05:47] <aniketp41> Hi @somers__, I found out the issue. "system("service auditd onestatus");" was causing the problem. When I inserted AUDITPIPE_FLUSH after the auditd startup, the tests passed. 
[2018-05-10 21:05:47] <aniketp41> Have a look at this code: https://pastebin.com/GgnNpkd1
[2018-05-10 21:10:26] <somers__> so what was going on?
[2018-05-10 21:13:23] <somers__> "service auditd onestatus" basically just does "ps -ww".  It doesn't do anything particular to audit(4)
[2018-05-10 21:13:27] <aniketp41> I'm not sure, I thought that maybe inclusion of "ad" had to do with this but even after I removed it from au_mask, it still did not pass the test. The only conclusion I have is that "system()" call changes some properties of auditon(2) which renders our local mode auditing useless 
[2018-05-10 21:16:22] <somers__> From the description of AUDITPIPE_FLUSH, it doesn't sound like it would be relevant
[2018-05-10 21:28:44] <aniketp41> @somers__, does it have to do anything with AUDITPIPE_QLIMIT? I know it doesn't make any sense but this is the most probable explanation I could come up with: Since moving "set_preselect_mask" about "system("service auditd onestatus")" made the tests to pass/fail, and since the system call we desired wasn't coming out of auditpipe, it could mean that auditpipe's maximum limit was reached, and that using "AUDITPIPE_FLUSH" cleaned it up. 
[2018-05-10 21:28:44] <aniketp41> I found this in the man-page of auditpipe(4): "In particular, when an audit pipe queue fills, records will be dropped."
[2018-05-10 21:46:48] <somers__> that would make sense
[2018-05-10 21:46:59] <somers__> You can prove it by checking AUDITPIPE_GET_QLEN
[2018-05-10 21:48:39] * somers_ (~somers@63-224-80-166.hlrn.qwest.net) join
[2018-05-10 21:55:24] * somers__ (~somers@63-224-81-231.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-10 22:28:43] <aniketp41> I did an independent experiment for this. AUDITPIPE_GET_QLEN returned "1" when auditd was already running and "3" when it had to be started?
[2018-05-10 22:29:02] <aniketp41> So is this fix legitimate? As in, shall I update the differential?
[2018-05-10 22:29:12] <aniketp41> ping @somers_ 
[2018-05-10 22:30:24] <somers_> Only 3?  It would be very surprising if the limit were that low.
[2018-05-10 22:34:20] <aniketp41> @somers_, here is the makeshift code I used: https://pastebin.com/akTduSVk
[2018-05-10 22:37:05] <somers_> I think you're checking the qlen in the wrong place.  The hypothetical failure condition is that the queue fills up before the test calls check_audit.  So you should check the queue depth at that point, and compare it to the limit
[2018-05-10 22:43:40] <aniketp41> @somers_, so I included random "fc" system calls before checking QLEN, it seems as if each event increases QLEN by 1. While QLIMIT was 128
[2018-05-10 22:43:40] <aniketp41> Have a look at this code and its output: https://pastebin.com/AtVHit1w
[2018-05-10 22:44:04] <aniketp41> QLIMIT seems to be much more than the number of queued events
[2018-05-10 22:45:00] <somers_> But this is just a toy program.  In your real test case, Kyua also creates a bunch of auditable events
[2018-05-10 22:46:08] <aniketp41> Yes, that makes sense. I was monitoring "praudit /dev/auditpipe" from another window while running the test cases, there were huge number of "openat(2)" system calls alongwith the main syscall
[2018-05-10 22:47:48] <aniketp41> So @somers_, will this fix do? Or is there something else that I need to take care of?
[2018-05-10 22:49:01] <somers_> We still aren't 100% sure that this FLUSH fixes the real problem.  I think you need to disable the flush, then check the QLEN after generating all auditable events but before reading from the auditpipe in check_audit
[2018-05-10 22:55:04] <aniketp41> @somers_, But does Kyua let me print values to STDOUT? Or should I just compare QLEN with QLIMIT?
[2018-05-10 22:55:28] <somers_> Sure.  You can printf to your heart's content
[2018-05-11 08:53:45] <rwatson> aniketp41: Note that FLUSH only flushes the current audit pipe's buffer, not the audit event queue from system-call commit
[2018-05-11 08:54:12] <rwatson> aniketp41: I believe if you update selection rules, and flush, you should then only see records after the flush returns that conform to the rules
[2018-05-11 08:54:16] <rwatson> aniketp41: if this is not the case, we may have a bug
[2018-05-11 11:51:43] <aniketp41> Yes @rwatson, flush worked as it is supposed to, we were only getting the audit_events corresponding to the flag & naflag we had set earlier, after flush returns. The issue was that what Q_LEN returned is way less than Q_LIMIT (contrary to what we expected)
[2018-05-11 11:53:22] <aniketp41> Hi @somers_, I placed a ioctl function to return Q_LEN and Q_LIMIT right before we call check_audit(): https://pastebin.com/nEsVnLju
[2018-05-11 11:53:45] <aniketp41> But even now Q_LEN returns 2, (I had removed the flush part earlier)
[2018-05-11 11:54:55] <aniketp41> Note: I couldn't get printf() to show anything on stdout so instead I set the breakpoint as atf_tc_fail() which returned the value of "apple"
[2018-05-11 11:59:07] <aniketp41> My take here is: we've used clock_gettime() a lot of times and it's complement : clock_settime(2) was listed as "ad". So is it possible that clock_gettime fills up the queue?
[2018-05-11 14:24:35] <somers_> @aniketp41 Kyua suppresses stdout from passing test cases.  If you want to see stdout, you can do "kyua debug test_program:test_case"
[2018-05-11 14:38:09] <somers_> Just add this code to check_audit and you will see that the queue does indeed fill up when set_preselect_mode comes before starting auditd:
[2018-05-11 14:38:16] <somers_> void
[2018-05-11 14:38:16] <somers_> check_audit(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-11 14:38:16] <somers_> 	int qlimit, qlen;
[2018-05-11 14:38:16] <somers_> 	ioctl(fd[0].fd, AUDITPIPE_GET_QLIMIT, &qlimit);
[2018-05-11 14:38:16] <somers_> 	ioctl(fd[0].fd, AUDITPIPE_GET_QLEN, &qlen);
[2018-05-11 14:38:16] <somers_> 	printf("qlen=%d qlimit=%d\n", qlen, qlimit);
[2018-05-11 14:38:18] <somers_> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-11 14:38:20] <somers_> 	/* Cleanup */
[2018-05-11 14:38:22] <somers_> 	fclose(pipestream);
[2018-05-11 14:38:24] <somers_> 	close(fd[0].fd);
[2018-05-11 14:38:26] <somers_> }
[2018-05-11 14:38:43] <somers_> Adding the AUDITPIPE_FLUSH at the end of setup fixes the queue length issue, but reveals another problem
[2018-05-11 15:00:01] <aniketp41> @somers_, I added this code snippet to check_audit() and kyua debug provided a good insight into what was actually going on. However, qlen still returns 2 to me. https://pastebin.com/7dkRXnFh
[2018-05-11 15:03:25] <somers_> Did you put set_preselect_mode *before* starting auditd?
[2018-05-11 15:05:14] <aniketp41> Yes @somers_, here is my setup function: https://pastebin.com/W9YnbqCr
[2018-05-11 15:15:56] <aniketp41> Also @somers_, the part where test fails: "when auditd is already running and we don't have any AUDITPIPE_FLUSH", I was also checking the /dev/auditpipe from another window and it seems that "kyua debug" only checks till an openat(2) function which occurs right before "mkdir(2)". 
[2018-05-11 15:16:55] <somers_> You can't check "the auditpipe" from another window.  Every time you open /dev/auditpipe, you're getting a unique device with potentially different configuration
[2018-05-11 15:17:31] <somers_> Kyua will keep reading from auditpipe until your test case either passes or fails; you're in total control of that
[2018-05-11 15:18:39] <aniketp41> Yes so my global config is flag:"fc" and mkdir(2) was being audited there. Not sure why the auditpipe opened from program failed. It's like it was stuck right before mkdir(2) call.  
[2018-05-11 15:20:32] <somers_> The default audit_control configuration is to have both flags and naflags set to "lo,aa".  That's how the test will most often be run, and that's where you should be focusing your efforts too
[2018-05-11 15:22:05] <aniketp41> Okay @somers_, btw was "qlen" equal to "qlimit" in your case? 
[2018-05-11 15:22:31] <somers_> Yes, at 128
[2018-05-11 15:50:15] <aniketp41> @somers_ It still shows qlen=2 for me everytime, and I added few miscellaneous events just to confirm if qlen returns anything other than 2, and it was showing certain increase in its value. However, it never reaches 128.
[2018-05-11 15:50:15] <aniketp41> Is it possible that our code utils.c is different?
[2018-05-11 15:50:15] <aniketp41> Although, I'm also using a variant of the one which is in the current diff
[2018-05-11 15:57:16] <aniketp41> Btw @somers_, you mentioned that this fix reveals another problem. What was it?
[2018-05-11 15:57:48] <somers_> When I add the flush, the test fails with this error, whether or not auditd is already running:
[2018-05-11 15:57:56] <somers_> file-create:symlinkat_success  ->  failed: Incomplete audit record
[2018-05-11 16:00:46] <aniketp41> Was it for this particular case or did all tests fail?
[2018-05-11 16:19:01] <somers_> With auditd stopped, all test cases fail
[2018-05-11 16:27:39] <somers_> But at least 1 is intermittent
[2018-05-11 19:40:38] <aniketp41> Hello @somers_, can you please run the tests again? I've updated the revision. This time, it looks as if the intermittent issue is (hopefully) gone. I also might have found a similar problem in bsmtrace code
[2018-05-11 19:41:08] <somers_> will do
[2018-05-11 20:11:14] <somers_> Now, when audit isn't already running, about 25% of the tests pass and the rest timeout.  But it's a different 25% each time.
[2018-05-11 20:21:21] <aniketp41> @somers_, Not sure why the tests fail for you. I did have a few intermittent audit incomplete errors earlier but now I've tried various things, i.e rebooting my VM and quickly running the tests again but they never seem to fail. I also pushed the limits by running three instances of tests but it passed even then.
[2018-05-11 23:05:35] <aniketp41> Hi @somers_, what should be the course of action now, since we've got conflict in test results?
[2018-05-11 23:06:02] <somers_> You need to figure out why they sometimes time out
[2018-05-11 23:06:27] <somers_> And why you get the "incomplete record" errors
[2018-05-11 23:12:40] <aniketp41> @somers, I haven't been getting any timeout errors recently. I'm not sure how I'd reproduce those errors back. And the "incomplete audit records" errors occur when au_fetch_tok returns "-1". One issue I could come up with was the "reclen-bytes" might be less than "token.len" but you said that it was not possible. So I'm  kind of stuck here..
[2018-05-11 23:12:58] <aniketp41> @somers_ 
[2018-05-11 23:14:07] <somers_> You can look at the implementation of au_fetch_tok and au_read_rec to gain insights about the "incomplete audit record" error.
[2018-05-11 23:14:11] <somers_> It's in contrib/openbsm
[2018-05-12 14:27:15] <aniketp41> Hello @somers_, I had been looking at the code of "au_fetch_tok" and all the subsequent "fetch_header**tok" functions it calls and it looks like the only time it returns (-1) is when the length of a given token (tok->len) along with sizeof(u_int**_t) is more than the third argument of au_fetch_tok(), i.e "reclen  - bytesread". 
[2018-05-12 14:27:15] <aniketp41> Which probably should be the case with the "incomplete audit record" errors you've been getting. 
[2018-05-12 14:31:24] <aniketp41> When I replaced "reclen - bytesread" with "reclen" it seemed to fix the issue since we're never reducing the "len" argument and that length of the entire audit record will obviously be more than any particular token. So the error condition never happened then
[2018-05-12 14:33:27] <aniketp41> I'm not getting timeout errors anymore, but it looks like this might again be similar to what we were getting initially, and that introduction of "AUDITPIPE_FLUSH" seemed to correct it. This time I think maybe placing AUDITPIPE_FLUSH right before calling "check_audit" might help?
[2018-05-12 15:34:04] <aniketp41> ping @somers_ 
[2018-05-12 15:53:06] <somers_> You may not increase the length of au_fetch_tok's third argument beyond the size of the buffer you supply to it.  Buffer overflows are not ok.
[2018-05-12 16:14:01] <aniketp41> Then @somers_, is it possible that au_read_rec might not return the exact length of audit record? That might explain why sometimes "reclen - bytesread" is not greater than or equal to "tok.len"
[2018-05-12 16:14:12] <aniketp41> As in, a bug in that function?
[2018-05-12 16:15:01] <aniketp41> I found this comment by @rwatson here: /*-
[2018-05-12 16:15:01] <aniketp41>  * Copyright 2018 Aniket Pandey
[2018-05-12 16:15:01] <aniketp41>  * All rights reserved.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * Redistribution and use in source and binary forms, with or without
[2018-05-12 16:15:01] <aniketp41>  * modification, are permitted provided that the following conditions
[2018-05-12 16:15:01] <aniketp41>  * are met:
[2018-05-12 16:15:01] <aniketp41>  * 1. Redistributions of source code must retain the above copyright
[2018-05-12 16:15:01] <aniketp41>  *    notice, this list of conditions and the following disclaimer.
[2018-05-12 16:15:01] <aniketp41>  * 2. Redistributions in binary form must reproduce the above copyright
[2018-05-12 16:15:01] <aniketp41>  *    notice, this list of conditions and the following disclaimer in the
[2018-05-12 16:15:01] <aniketp41>  *    documentation and/or other materials provided with the distribution.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
[2018-05-12 16:15:01] <aniketp41>  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
[2018-05-12 16:15:01] <aniketp41>  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
[2018-05-12 16:15:01] <aniketp41>  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
[2018-05-12 16:15:01] <aniketp41>  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
[2018-05-12 16:15:01] <aniketp41>  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
[2018-05-12 16:15:01] <aniketp41>  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
[2018-05-12 16:15:01] <aniketp41>  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
[2018-05-12 16:15:01] <aniketp41>  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
[2018-05-12 16:15:01] <aniketp41>  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
[2018-05-12 16:15:01] <aniketp41>  * SUCH DAMAGE.
[2018-05-12 16:15:01] <aniketp41>  *
[2018-05-12 16:15:01] <aniketp41>  * $FreeBSD$
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> #include <sys/ioctl.h>
[2018-05-12 16:15:01] <aniketp41> #include <time.h>
[2018-05-12 16:15:01] <aniketp41> #include <errno.h>
[2018-05-12 16:15:01] <aniketp41> #include <fcntl.h>
[2018-05-12 16:15:01] <aniketp41> #include <atf-c.h>
[2018-05-12 16:15:01] <aniketp41> #include <string.h>
[2018-05-12 16:15:01] <aniketp41> #include <stdlib.h>
[2018-05-12 16:15:01] <aniketp41> #include <unistd.h>
[2018-05-12 16:15:01] <aniketp41> #include <bsm/libbsm.h>
[2018-05-12 16:15:01] <aniketp41> #include <security/audit/audit_ioctl.h>
[2018-05-12 16:15:01] <aniketp41> #include "utils.h"
[2018-05-12 16:15:01] <aniketp41>  * Checks the presence of "auditregex" in auditpipe(4) after the
[2018-05-12 16:15:01] <aniketp41>  * corresponding system call has been triggered.
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static bool
[2018-05-12 16:15:01] <aniketp41> get_records(const char *auditregex, FILE *pipestream)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	uint8_t *buff;
[2018-05-12 16:15:01] <aniketp41> 	tokenstr_t token;
[2018-05-12 16:15:01] <aniketp41> 	ssize_t size = 1024;
[2018-05-12 16:15:01] <aniketp41> 	char membuff[size];
[2018-05-12 16:15:01] <aniketp41> 	char del[] = ",";
[2018-05-12 16:15:01] <aniketp41> 	int reclen, bytes = 0;
[2018-05-12 16:15:01] <aniketp41> 	FILE *memstream;
[2018-05-12 16:15:01] <aniketp41> 	/*
[2018-05-12 16:15:01] <aniketp41> 	 * Open a stream on 'membuff' (address to memory buffer) for storing
[2018-05-12 16:15:01] <aniketp41> 	 * the audit records in the default mode.'reclen' is the length of the
[2018-05-12 16:15:01] <aniketp41> 	 * available records from auditpipe which is passed to the functions
[2018-05-12 16:15:01] <aniketp41> 	 * au_fetch_tok(3) and au_print_flags_tok(3) for further use.
[2018-05-12 16:15:01] <aniketp41> 	 */
[2018-05-12 16:15:01] <aniketp41> 	memstream = fmemopen(membuff, size, "w");
[2018-05-12 16:15:01] <aniketp41> 	reclen = au_read_rec(pipestream, &buff);
[2018-05-12 16:15:01] <aniketp41> 	/*
[2018-05-12 16:15:01] <aniketp41> 	 * Iterate through each BSM token, extracting the bits that are
[2018-05-12 16:15:01] <aniketp41> 	 * required to start processing the token sequences.
[2018-05-12 16:15:01] <aniketp41> 	 */
[2018-05-12 16:15:01] <aniketp41> 	while (bytes < reclen) {
[2018-05-12 16:15:01] <aniketp41> 		if (au_fetch_tok(&token, buff + bytes, reclen) == -1)
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Incomplete audit record");
[2018-05-12 16:15:01] <aniketp41> 		/* Print the tokens as they are obtained, in the default form */
[2018-05-12 16:15:01] <aniketp41> 		au_print_flags_tok(memstream, &token, (char *)del, AU_OFLAG_NONE);
[2018-05-12 16:15:01] <aniketp41> 		bytes += token.len;
[2018-05-12 16:15:01] <aniketp41> 	}
[2018-05-12 16:15:01] <aniketp41> 	free(buff);
[2018-05-12 16:15:01] <aniketp41> 	fclose(memstream);
[2018-05-12 16:15:01] <aniketp41> 	return (atf_utils_grep_string("%s", membuff, auditregex));
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Override the system-wide audit mask settings in /etc/security/audit_control
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> set_preselect_mode(int filedesc, au_mask_t *fmask)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	int fmode = AUDITPIPE_PRESELECT_MODE_LOCAL;
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection mode for auditing */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_MODE, &fmode) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection mode: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection flag corresponding to the audit_event */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_FLAGS, fmask) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection flag: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* Set local preselection flag for non-attributable audit_events */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(filedesc, AUDITPIPE_SET_PRESELECT_NAFLAGS, fmask) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Preselection flag: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Get the corresponding audit_mask for class-name "name" then set the
[2018-05-12 16:15:01] <aniketp41>  * success and failure bits for fmask to be used as the ioctl argument
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static au_mask_t
[2018-05-12 16:15:01] <aniketp41> get_audit_mask(const char *name)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	au_mask_t fmask;
[2018-05-12 16:15:01] <aniketp41> 	au_class_ent_t *class;
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE((class = getauclassnam(name)) != NULL);
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_success = class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_failure = class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE((class = getauclassnam("ad")) != NULL);
[2018-05-12 16:15:01] <aniketp41> 	fmask.am_success |= class->ac_class;
[2018-05-12 16:15:01] <aniketp41> 	return (fmask);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Loop until the auditpipe returns something, check if it is what
[2018-05-12 16:15:01] <aniketp41>  * we want, else repeat the procedure until ppoll(2) times out.
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> check_auditpipe(struct pollfd fd[], const char *auditregex, FILE *pipestream)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	struct timespec currtime, endtime, timeout;
[2018-05-12 16:15:01] <aniketp41> 	/* Set the expire time for poll(2) while waiting for syscall audit */
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE_EQ(0, clock_gettime(CLOCK_MONOTONIC, &endtime));
[2018-05-12 16:15:01] <aniketp41> 	endtime.tv_sec += 5;
[2018-05-12 16:15:01] <aniketp41> 	timeout.tv_nsec = endtime.tv_nsec;
[2018-05-12 16:15:01] <aniketp41> 	for (;;) {
[2018-05-12 16:15:01] <aniketp41> 		/* Update the time left for auditpipe to return any event */
[2018-05-12 16:15:01] <aniketp41> 		ATF_REQUIRE_EQ(0, clock_gettime(CLOCK_MONOTONIC, &currtime));
[2018-05-12 16:15:01] <aniketp41> 		timeout.tv_sec = endtime.tv_sec - currtime.tv_sec;
[2018-05-12 16:15:01] <aniketp41> 		switch (ppoll(fd, 1, &timeout, NULL)) {
[2018-05-12 16:15:01] <aniketp41> 		/* ppoll(2) returns, check if it's what we want */
[2018-05-12 16:15:01] <aniketp41> 		case 1:
[2018-05-12 16:15:01] <aniketp41> 			if (fd[0].revents & POLLIN) {
[2018-05-12 16:15:01] <aniketp41> 				if (get_records(auditregex, pipestream))
[2018-05-12 16:15:01] <aniketp41> 					return;
[2018-05-12 16:15:01] <aniketp41> 			} else {
[2018-05-12 16:15:01] <aniketp41> 				atf_tc_fail("Auditpipe returned an "
[2018-05-12 16:15:01] <aniketp41> 				"unknown event %#x", fd[0].revents);
[2018-05-12 16:15:01] <aniketp41> 			}
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		/* poll(2) timed out */
[2018-05-12 16:15:01] <aniketp41> 		case 0:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Auditpipe did not return anything "
[2018-05-12 16:15:01] <aniketp41> 					"within the time limit");
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		/* poll(2) standard error */
[2018-05-12 16:15:01] <aniketp41> 		case -1:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Poll: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 			break;
[2018-05-12 16:15:01] <aniketp41> 		default:
[2018-05-12 16:15:01] <aniketp41> 			atf_tc_fail("Poll returned an unknown event");
[2018-05-12 16:15:01] <aniketp41> 		}
[2018-05-12 16:15:01] <aniketp41> 	}
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41>  * Wrapper functions around static "check_auditpipe"
[2018-05-12 16:15:01] <aniketp41>  */
[2018-05-12 16:15:01] <aniketp41> static void
[2018-05-12 16:15:01] <aniketp41> check_audit_startup(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-12 16:15:01] <aniketp41> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> void
[2018-05-12 16:15:01] <aniketp41> check_audit(struct pollfd fd[], const char *auditrgx, FILE *pipestream) {
[2018-05-12 16:15:01] <aniketp41> 	check_auditpipe(fd, auditrgx, pipestream);
[2018-05-12 16:15:01] <aniketp41> 	/* Cleanup */
[2018-05-12 16:15:01] <aniketp41> 	fclose(pipestream);
[2018-05-12 16:15:01] <aniketp41> 	close(fd[0].fd);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> FILE
[2018-05-12 16:15:01] <aniketp41> *setup(struct pollfd fd[], const char *name)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	au_mask_t fmask;
[2018-05-12 16:15:01] <aniketp41> 	fmask = get_audit_mask(name);
[2018-05-12 16:15:01] <aniketp41> 	FILE *pipestream;
[2018-05-12 16:15:01] <aniketp41> 	fd[0].fd = open("/dev/auditpipe", O_RDONLY);
[2018-05-12 16:15:01] <aniketp41> 	fd[0].events = POLLIN;
[2018-05-12 16:15:01] <aniketp41> 	pipestream = fdopen(fd[0].fd, "r");
[2018-05-12 16:15:01] <aniketp41> 	set_preselect_mode(fd[0].fd, &fmask);
[2018-05-12 16:15:01] <aniketp41> 	ATF_REQUIRE_EQ(0, system("service auditd onestatus || \
[2018-05-12 16:15:01] <aniketp41> 	{ service auditd onestart && touch started_auditd ; }"));
[2018-05-12 16:15:01] <aniketp41> 	/* This removes any outstanding record on the auditpipe */
[2018-05-12 16:15:01] <aniketp41> 	if (ioctl(fd[0].fd, AUDITPIPE_FLUSH) < 0)
[2018-05-12 16:15:01] <aniketp41> 		atf_tc_fail("Auditpipe flush: %s", strerror(errno));
[2018-05-12 16:15:01] <aniketp41> 	/* If 'started_auditd' exists, that means we started auditd(8) */
[2018-05-12 16:15:01] <aniketp41> 	if (atf_utils_file_exists("started_auditd"))
[2018-05-12 16:15:01] <aniketp41> 		check_audit_startup(fd, "audit startup", pipestream);
[2018-05-12 16:15:01] <aniketp41> 	return (pipestream);
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:01] <aniketp41> void
[2018-05-12 16:15:01] <aniketp41> cleanup(void)
[2018-05-12 16:15:01] <aniketp41> {
[2018-05-12 16:15:01] <aniketp41> 	system("[ -f started_auditd ] && service auditd onestop > \
[2018-05-12 16:15:01] <aniketp41> 		/dev/null 2>&1");
[2018-05-12 16:15:01] <aniketp41> }
[2018-05-12 16:15:02] * aniketp41 (~aniketp41@159.65.149.37) quit Excess Flood
[2018-05-12 16:15:17] * aniketp41 (~aniketp41@159.65.149.37) join
[2018-05-12 16:15:35] <aniketp41> Oh sorry that was the wrong paste 
[2018-05-12 16:15:49] <aniketp41> Here: https://github.com/openbsm/openbsm/blob/master/libbsm/bsm_io.c#L4669
[2018-05-12 16:43:55] <aniketp41> Hi @rwatson, is it possible that audit records might not have complete audit tokens or contain few erroneous data?
[2018-05-12 16:45:54] <aniketp41> I had a look at the source code of "au_read_rec" and I couldn't find any anomaly, however if for some reason the audit record is corrupted even before au_read_rec reads it into a buffer, we might not be able to get complete and santized tokens..
[2018-05-12 17:24:40] <somers_> Does your program actually check that au_read_rec doesn't return an error?
[2018-05-12 17:39:00] <aniketp41> Not until now, I've added an ATF_REQUIRE check on au_read_rec function. But my tests aren't failing so I can't see if there is any difference.. @somers_, can you add that check and see if the result is any different?
[2018-05-12 17:39:19] <somers_> Sure
[2018-05-12 17:44:48] <somers_> are you going to send me the code?
[2018-05-12 17:46:41] <aniketp41> Oh, sorry. Yes here is my utils.c : https://pastebin.com/2byYdEJ2
[2018-05-12 17:46:41] <aniketp41> somers_
[2018-05-12 17:48:36] <somers_> It's hard to tell what the difference is.  Can you upload it to Phabricator, or at least send me a diff vs what's in Phabricator?
[2018-05-12 17:54:09] <aniketp41> Okay, @somers_. I've updated the review. Please have a look
[2018-05-12 18:00:54] <somers_> Same as before.  Most tests timed out if auditd wasn't already running.
[2018-05-12 18:03:42] <aniketp41> So there wasn't any "incomplete audit record" error? @somers_ 
[2018-05-12 18:03:42] <aniketp41> Also, about timeout errors, what if we move the flush part right before infinite for loop? Cause if the tests timeout just in case auditd(8) isn't already running, that means we have issue in auditing "audit startup"
[2018-05-12 18:04:24] <aniketp41> And that audit record isn't incomplete since tests pass for "auditd" already running scenario
[2018-05-12 18:05:34] <somers_> I think you're probably still overflowing the queue length.  One thing you could do would be to increase the queue length.  Another would be to flush the queue after the "audit startup" message.  Another would be to deselect the "ad" class after the auditd startup
[2018-05-12 18:05:35] <aniketp41> Though is it possible that even though I update the diff, our "utils.c" is not exactly same? In that case please check the tests by using the utils.c from pastebin
[2018-05-12 18:08:06] <aniketp41> @somers_, tests aren't failing for me so I'll not be able to check any difference. Can you please try these changes on your machine and see if it works. Queue overflow might be an explanation in your case cause when your Q_LEN showed 128, mine was only 2..
[2018-05-12 18:08:08] <somers_> I used exactly what you posted to Phabricator
[2018-05-12 18:09:20] <somers_> Do you run your tests with sudo, or do you login as root?
[2018-05-12 18:09:53] <aniketp41> Yes I'm working as a root. I removed my user as I didn't need it
[2018-05-12 18:14:05] <somers_> It's possible that sudo produces extra auditable events, making it more likely for the queue to overflow
[2018-05-12 18:14:59] <aniketp41> Okay I'll try to run these tests as a user with sudo
[2018-05-12 18:15:05] <aniketp41> @somers_ 
[2018-05-12 18:17:45] <aniketp41> @somers_, they passed as sudo too: https://pastebin.com/eWqHnSDn
[2018-05-12 18:22:12] <aniketp41> @somers_, can we try setting Q_LIMIT to see if it works? or maybe calling AUDITPIPE_FLUSH both before and after "audit_check"
[2018-05-12 18:23:29] <somers_> yeah, I'm trying that now
[2018-05-12 18:33:20] <somers_> Flushing the pipe before and after "audit startup" increases the pass rate.  Raising the queue size has about the same effect.  Doing both results in a really annoying pass rate of 99% or so.
[2018-05-12 18:35:37] <aniketp41> Looks like there are a hell lot events being generated on your machine? Maybe a lot of administrative "ad" events are also getting audited..
[2018-05-12 18:37:26] <aniketp41> BTW @somers_, Is there a limit on how much we can raise Q_LIMIT? maybe we can make it the maximum it can be
[2018-05-12 18:38:00] <somers_> Yeah, there's an ioctl that will tell you what the max is.  That's what I'm using, and it's 1024
[2018-05-12 18:49:39] <aniketp41> @somers_, I think my placement of AUDITPIPE_FLUSH was wrong earlier, I should've placed it once before "audit startup" and another after "check_audit_startup". I placed it between them
[2018-05-12 18:50:45] <aniketp41> I think that might have erased "audit startup" event from your auditpipe in case it was not already running. That might explain why they failed for you?
[2018-05-12 18:50:45] <aniketp41> But if that is the case, then they should've failed for me too?
[2018-05-12 18:51:54] <aniketp41> Or maybe my system wasn't fast enough to remove the trail from auditpipe before auditd started? 
[2018-05-12 18:51:54] <aniketp41> Here is my modifed setup function: https://pastebin.com/BtqiSmwY
[2018-05-12 19:05:49] <aniketp41> ping @somers_ 
[2018-05-12 19:08:20] <somers_> When I move the AUDITPIPE_FLUSH as you suggest, most tests fail with "Incomplete audit record"
[2018-05-12 19:33:08] <aniketp41> That's strange, we had a check in place for au_read_rec(3) to return -1. Not sure why au_fetch_tok(3) is giving an error.
[2018-05-12 19:33:08] <aniketp41> Btw @somers_, can you try replacing "reclen - bytes" with "reclen"? Although that's wrong, but "incomplete audit record" doesn't make any sense now ... 
[2018-05-12 19:34:12] <aniketp41> Btw @somers_, do the tests fail in both scenario? i.e auditd(8) running or not
[2018-05-13 13:56:50] <aniketp41> Hello @somers_, I had been thinking, do we really need that check for "au_fetch_tok" to not be equal to "-1" in every iteration? Cause I've developed about 144 test-cases and for tests of "file-read" audit_class, I was getting a similar "incomplete audit record" error but when I removed that condition all tests passed
[2018-05-13 14:01:37] <aniketp41> Please have a look at the difference in result before and after the if-condition change: https://pastebin.com/ddZ88RAd
[2018-05-13 14:02:55] <aniketp41> @somers_, Please remove the if condition and then run your tests again! 
[2018-05-13 15:23:17] <aniketp41> ping @somers_ 
[2018-05-13 15:32:01] <somers_> It's possible that the only records getting corrupted are extraneous records, like from the "ad" class.  But it would be good to know which.  Could you at least try printing the incomplete record as a warning?  Then we might be able to tell.
[2018-05-13 15:32:24] <somers_> Another thing you could do would be to deselect the "ad" class after auditd startup is complete.
[2018-05-13 15:39:34] <somers_> @aniketp41 with your latest changes, most testcases fail with this error: "failed: /usr/home/somers/freebsd/base/head/tests/sys/audit/utils.c:65: (reclen = au_read_rec(pipestream, &buff)) != -1 not met"
[2018-05-13 16:47:32] <aniketp41> @somers_, is this the right way to remove a flag?: am_success = am_sucess & ~class->ac_class
[2018-05-13 16:48:24] <somers_> Sure.  Though in your case, it would probably be equally easy to simply start from scratch
[2018-05-13 16:48:50] <somers_> Actually, your snippet would be wrong if the syscall under test _is_ in class "ad".
[2018-05-13 16:50:00] <aniketp41> I think @somers_, going by that logic (corrupted extraneous) wouldn't it be right to replace ATF_REQUIRE in au_read_rec with a warn statement? cause I guess those corrupted records might be failing the tests again?
[2018-05-13 16:50:20] <aniketp41> Oops, true! Didn't think of "ad" syscall :D
[2018-05-13 17:13:19] <aniketp41> @somers_, I made few more changes, please have a look at the revision
[2018-05-13 17:23:58] <somers_> I gtg.  I'll look in a couple of hours
[2018-05-13 17:25:01] <aniketp41> Sure
[2018-05-13 18:30:35] <aniketp41> @rwatson, @somers_ what should I do about the syscalls which don't have any manpage? Like for instance I'm having a look at the "file-attribute-access" system calls and quite a lot a them don't have manual pages.
[2018-05-13 21:20:01] <somers_> most of them probably have man pages under a slightly different name, because there's a wrapper in libc.
[2018-05-13 21:21:20] <somers_> You can grep for the syscall's name under lib/libc/gen
[2018-05-13 21:21:40] <somers_> Or just under lib.  Some of them, like the pthreads-related stuff, aren't technically in libc.
[2018-05-14 00:54:46] <aniketp41> Sure @somers_, I'll have a look at the  location for the syscalls. Btw did you have a look at the recent changes?
[2018-05-14 00:55:43] <aniketp41> I've called "set_preselect_mode" twice,. as you suggested for both audit startup abs syscall audit
[2018-05-14 10:23:14] <aniketp41> Hello @somers_, I've created a new revision D15423 as my socsvn account was just configured and I created my new phabricator account with freebsd alias
[2018-05-14 14:04:27] <somers_> I haven't had a chance to review the latest changes yet
[2018-05-14 15:25:28] <aniketp41> Sure I'll update the atf_tc_fail messages. Btw what was the status of the tests ?@somers_
[2018-05-14 15:26:19] <somers_> Occasional failures due to not noticing auditd startup.  The detailed output shows some "incomplete audit record" messages.  I'm going to dig deeper into libbsm now to see if I can figure out what's going on.
[2018-05-14 16:37:21] <aniketp41> @somers_, for the error message? Would something like this work?: "%s not found in auditpipe within the time limit", auditregex. Since we're essentially looking for the regex corresponding to the event we have anticipated. Also, auditregex would be "audit startup" in case of auditd startup..
[2018-05-14 16:48:41] <somers_> Yeah, that sounds great
[2018-05-14 18:51:34] <aniketp41> Hi @somers_, for syscalls like stat(2), I essentially need to declare and allocate memory to a struct stat pointer. So freeing up of the buffer would be done within the test-case body, right? rather than ATF_TC_CLEANUP
[2018-05-14 19:02:05] <aniketp41> Oh, I think pointer would not be required, a simple buffer also worked
[2018-05-14 19:15:31] <somers_> Yeah, struct stat should fit on the stack
[2018-05-15 13:32:17] <aniketp41> Hi @somers_, were you able to identify the cause of occasional test failures?
[2018-05-15 13:32:50] <aniketp41> I have about 252 tests waiting for their own revision :D
[2018-05-15 13:32:50] <aniketp41> after this one is commited
[2018-05-15 14:02:21] <somers_> The occasional failures are due to failure to notice that auditd started up, not due to failure to audit the syscall under test
[2018-05-15 14:03:36] <somers_> I'm 90% sure that it happens when you get an incomplete audit record, and that happened to be the "audit startup" record.  But I don't know why au_read_rec is returning incomplete records
[2018-05-15 14:15:45] <aniketp41> @somers_, although you were against this method and this is essentially a race condition, I feel like maybe delaying the syscall check for a certain amount of time  (which is more than sufficient for auditd startup) would pass the tests in case auditd(8) is not already running. 
[2018-05-15 14:15:45] <aniketp41>  @rwatson had said something like this earlier: "there's no synchronicity requirement that a syscall only return after the record goes out of the audit pipe, so you might need to insert a short delay after the system call before expecting a record to be emitted from /dev/auditpipe"
[2018-05-15 14:15:45] <aniketp41> Maybe that's what is happening in case of auditd startup?
[2018-05-15 14:16:38] <somers_> No, the delay rwatson was talking about is something different
[2018-05-15 14:17:01] <somers_> You already handle that delay with the loop in check_audit
[2018-05-15 14:32:33] <aniketp41> So if au_read_rec() returns incomplete records in case of "auditd startup" but not in case of "syscall audit check" then it looks to me that this might be an issue with audit startup in the system and not with libbsm, unless au_read_rec() is baised against auditd startup.(which should not be!)   
[2018-05-15 14:33:56] <somers_> Not exactly.  There are just a whole lot more messages that get generated during audit startup
[2018-05-15 17:17:01] <aniketp41> Hi @somers_,I was getting an unexpected error on trying to test fstat(2) "fa" system call. Please have a look at my implementation and the error produced: https://pastebin.com/Q7XXRG9d
[2018-05-15 17:18:15] <somers_> what's the problem?  The EINVAL for poll?
[2018-05-15 17:18:24] <somers_> The man page will list the reasons why you might get EINVAL
[2018-05-15 17:19:24] <aniketp41> Yes. Oh I actually understood. The regex I'm comparing is not found in the audit trail. As it takes file descriptor as the input and searching against "fileforaudit"
[2018-05-15 17:23:49] <aniketp41> Btw, what would be the best regex in this case? As there isn't much info produced in the audit trail. I can search against "fstat(2).*return,success" but a lot of successful instances of fstat(2) might be found
[2018-05-15 17:23:52] <aniketp41> @somers_ 
[2018-05-15 17:24:19] <somers_> what are you trying to match?
[2018-05-15 17:25:00] <aniketp41> "fileforaudit.*return,success" but this is wrong
[2018-05-15 17:26:30] <somers_> No, that's the regex.  I mean what text do you want to match?
[2018-05-15 17:29:28] <aniketp41> @somer_ this text: 'header,108,11,fstat(2),0,Tue May 15 22:58:36 2018, + 49 msecargument,1,0x3,fdattribute,755,root,wheel,79,96867,0subject,root,root,wheel,root,wheel,7306,726,52932,10.0.2.2return,success,0trailer,108'
[2018-05-15 17:29:28] <aniketp41> Although I got it to work now, the regex was wrong.
[2018-05-15 17:29:42] <aniketp41> ▶ kyua debug file-attribute-access:fstat_success                                       ✔    04:28:34 
[2018-05-15 17:29:42] <aniketp41> auditd is running as pid 562.
[2018-05-15 17:29:42] <aniketp41> Looking for 'fstat.*return,success' in 'header,108,11,fstat(2),0,Tue May 15 22:58:36 2018, + 49 msecargument,1,0x3,fdattribute,755,root,wheel,79,96867,0subject,root,root,wheel,root,wheel,7306,726,52932,10.0.2.2return,success,0trailer,108'
[2018-05-15 17:29:42] <aniketp41> file-attribute-access:fstat_success  ->  passed
[2018-05-15 17:30:27] <aniketp41> But @somers_ probably this is a wrong method as we're not sure that this record was produced by our code
[2018-05-15 17:31:36] <somers_> Is there an inode number in there somewhere?
[2018-05-15 17:33:22] <aniketp41> No I guess there are just a bunch of user/process IDs and some time reference
[2018-05-15 17:33:22] <aniketp41> And also in the attribute part, it says file descriptor is "fd" whereas I passed in "filedesc"
[2018-05-15 17:33:53] <aniketp41> @somers_ 
[2018-05-15 17:34:31] <somers_> where is the format of that record documented?
[2018-05-15 17:37:02] <aniketp41> @somers_ I've been using this doc as the reference: https://www.freebsd.org/doc/handbook/audit-administration.html
[2018-05-15 17:38:12] <somers_> This would be easier if you put a delimiter between tokens
[2018-05-15 17:40:27] <somers_> You need to figure out what the argument and attribute tokens mean
[2018-05-15 17:42:03] <aniketp41> Sorry, I meant argument earlier:
[2018-05-15 19:41:20] <aniketp41> Hi @somers_, Yes there was inode number in the attribute of audit record. I created a sample program which printed the "inode" of a file which was returned by "stat.st_ino" when used with fstat(2). I guess now I can use the inode in the regex! 
[2018-05-15 19:41:41] <somers_> yes, that would be great
[2018-05-15 19:42:05] <aniketp41> Thanks for pointing that out!
[2018-05-15 20:16:06] <aniketp41> Hello @somers_ I was having a slight issue. The regex I'm supposed to pass to check_audit() should be of type "const char *" but when I'm converting the obtained Inode to a string using "snprintf" it essentially only needs "char *". So while to cast regex to (const char*) so that I can pass it to check_audit. The compiler doesn't let me do it:  error: initializing 'char *' with an expression of type 'const char [22]'
[2018-05-15 20:16:06] <aniketp41>       discards qualifiers [-Werror,-Wincompatible-pointer-types-discards-qualifiers]
[2018-05-15 20:16:06] <aniketp41>  
[2018-05-15 20:16:28] <aniketp41> *trying
[2018-05-15 20:17:33] <somers_> Yep.  If you're dynamically composing the regex, then it's not a "const char*"
[2018-05-15 20:17:59] <somers_> But, the callee doesn't care.  So check_audit's prototype needn't change.
[2018-05-15 20:20:37] <aniketp41> But @somers_, it doesn't let me pass "regex" to check_audit since the types don't exactly match. How should I handle this case?
[2018-05-15 20:21:40] <somers_> You should be able to pass a "char*" to a function that expects "const char*"
[2018-05-15 20:21:48] <somers_> Are you trying to explicitly cast it?  Don't do that.
[2018-05-15 20:43:15] <aniketp41> @somers_ I'm kinda stuck here.. This code gave me the least error: https://pastebin.com/QH1bU6Q1 
[2018-05-15 20:43:15] <aniketp41> I think the string "return.*inode.*return,success" is being recognized as a const char, but since the argument expects "char", this causes error.. 
[2018-05-15 20:44:37] <somers_> Why is it static?
[2018-05-15 20:45:38] <somers_> The error is coming from fstat_failure, but you didn't paste that function
[2018-05-15 20:45:57] <somers_> Looks like it should be a "const char*" in fstat_failure
[2018-05-15 20:47:55] <aniketp41> Yeah I just noticed it was coming from fstat_failure. The whole time I thought "fstat_success" caused the issue.. 
[2018-05-15 20:47:55] <aniketp41> The tests compiled now, thanks
[2018-05-15 21:03:15] <aniketp41> Btw @somers_, is this a right way to test "fstat_failure" https://pastebin.com/uHF1YbYG ? 
[2018-05-15 21:03:15] <aniketp41> As there weren't many failure conditions for "fstat" in the man-page. And I'm not sure how would fstat(2) fail once we have the information (including inode number) of the file..
[2018-05-15 21:04:18] <somers_> yeah, that's about the best that you can do
[2018-05-15 21:22:49] <aniketp41> Btw @somers_, what do you think about the issue of audit startup that we are facing currently. Would it get resolved?
[2018-05-15 21:23:07] <aniketp41> As I have test cases piling up..
[2018-05-15 21:23:29] <somers_> It needs to be
[2018-05-15 21:24:43] <aniketp41> And unless I get stuck somewhere. I should be able to hopefully complete *almost* all system calls within about a month.. (success and failure mode)
[2018-05-15 21:25:15] <somers_> cool
[2018-05-15 21:37:22] <aniketp41> Btw @somers_, I encountered few other system calls that took "file-descriptor" as the input. For e.g fstatfs(2). But the structure it returned didn't have any Inode this time (from the man-page). So what should be the approach in this case?
[2018-05-15 21:37:22] <aniketp41> Though can I simply check against "fstatfs.*return,success" as it looks  unlikely that the auditpipe will contain any other instance of the system call simultaneously (+- 5sec)? 
[2018-05-15 21:38:47] <somers_> best to be specific
[2018-05-15 21:38:56] <somers_> what else does the audit record contain?
[2018-05-15 21:41:22] <aniketp41> header,108,11,fstatfs(2),0,Wed May 16 08:40:12 2018, + 252 msec,argument,1,0x3,fd,attribute,755,root,wheel,79,1795169,3583621,subject,root,root,wheel,root,wheel,20513,9581,54210,10.0.2.2,return,success,0,trailer,108,
[2018-05-15 21:41:22] <aniketp41> I guess I can again check for inode by calling "stat(2)" separately
[2018-05-15 21:54:04] <aniketp41> @somers_, does this look good? https://pastebin.com/BydD8zCX
[2018-05-15 21:54:04] <aniketp41> I used stat(2) to get the inode number and then checked its presence in audit record while testing fstatfs(2)..
[2018-05-15 21:55:19] <somers_> Yeah, that looks fine.  It's a trifle silly, because the inode number isn't really important to fstatfs.  But it's certainly the surest way to exclude false positives from the audit trail
[2018-05-15 21:59:52] <aniketp41> Yes, I felt the same. Although Inode of the file which is present within a filesystem seemed a valid choice to test against..
[2018-05-16 17:12:48] <aniketp41> Hi @somers_, for syscalls such as getfsstat(2), fpathconf(2) the audit record didn't look like it contained anything useful:
[2018-05-16 17:12:48] <aniketp41> It was something like this: header,68,11,getfsstat(2),0,Thu May 17 04:10:34 2018, + 402 msec, subject, root,root,wheel,root,wheel, 3606,2591,38048,10.0.2.2, return,success,2,trailer,68,
[2018-05-16 17:12:48] <aniketp41> Should I search for a simple "syscall.*return,success" regex?
[2018-05-16 17:13:52] <aniketp41> Also, I haven't yet explored "process-control" system calls, is the situation similar for them or does the audit record actually contain some useful stuff?
[2018-05-16 17:14:01] <somers_> There were no attribute or argument tokens?
[2018-05-16 17:15:01] <aniketp41> I checked for two possibilities: 1) getfsstat(NULL, 0, MNT_NOWAIT);      2) getfsstat(buf, fc_count*sizeof(buf[0]), MNT_NOWAIT);
[2018-05-16 17:15:01] <aniketp41> Both had similar record
[2018-05-16 17:15:21] <aniketp41> These possibilities were described in the man-page
[2018-05-16 17:16:14] <somers_> Just match on whatever you can, then.  But keep in mind that a poorly auditable syscall is a bug.  We may need to add details to some of these audit records
[2018-05-16 17:16:17] <aniketp41> Btw @somers_, they return information about the mounted-file systems, right? Why would audit record contain any related info
[2018-05-16 17:16:54] <somers_> Like which file system is being interrogated?
[2018-05-16 17:18:47] <aniketp41> Yes that is the issue. But one thing I noticed is that in a normal situation, some of these syscalls don't recur unless they are being explicitely called. (Not created by any processes)
[2018-05-16 17:18:47] <aniketp41> getfsstat(2) returns the number of mounted file-systems and their data is stored in buff array of statfs structures. i had a hunch the audit records wouldn't contain much
[2018-05-16 17:18:47] <aniketp41> I mean there isn't anything specific to contain here.. @somers_ 
[2018-05-16 17:19:33] <somers_> Oh, my mistake.  I thought getfsstat only worked on a single file system
[2018-05-16 17:21:10] <aniketp41> Although if the audit records contained the return values (which they don't) I guess we could have included the number of mounted file-systems as a regex to confirm our test
[2018-05-16 17:22:07] <somers_> That probably doesn't matter.  The purpose of auditting is to determine what somebody's intention was.  Return values aren't usually necessary for that
[2018-05-16 17:30:19] <somers_> gtg.  Be back in a couple of hours.
[2018-05-16 21:08:22] <aniketp41> Hi @somers_, I tried to audit getfh(2) and lgetfh(2) and looks like I've hit my first instance where the syscalls were not being audited. Also, just to check if they belong to some other audit class, I set the flag to "all" following which, getfh(2) was audited as "nfs_getfh" which belongs to "ad". lgetfh(2) was not audited at all..
[2018-05-16 21:08:29] <aniketp41> Is this a possible bug?
[2018-05-16 21:09:14] <somers_> But getfh was not audited when the class was set to ad?
[2018-05-16 21:10:20] <aniketp41> No it was, but the record showed "nfs_getfh"
[2018-05-16 21:10:35] <aniketp41> Wait, I didn't check it against "ad"
[2018-05-16 21:10:57] <aniketp41> I'll do that now. I just checked it for "all" just to see if it did
[2018-05-16 21:11:20] <aniketp41> @somers_ 
[2018-05-16 21:17:31] <aniketp41> Yes @somers_, when I set the system wide audit flag as "ad", it was audited:
[2018-05-16 21:17:31] <aniketp41> header,128,11,nfs_getfh(2),0,Thu May 17 08:17:15 2018, + 778 msec
[2018-05-16 21:17:31] <aniketp41> path,/root/test/src/fileforaudit
[2018-05-16 21:17:31] <aniketp41> attribute,644,root,wheel,79,578221,0
[2018-05-16 21:17:31] <aniketp41> subject,root,root,wheel,root,wheel,3334,2960,56418,10.0.2.2
[2018-05-16 21:17:31] <aniketp41> return,success,0
[2018-05-16 21:17:31] <aniketp41> trailer,128
[2018-05-16 21:18:17] <aniketp41> I even tried syscall(SYS_getfh, ...) but to no avail, the results were similar again
[2018-05-16 21:26:42] <somers_> Are you expecting a different syscall name in the audit record?
[2018-05-16 21:26:59] <somers_> Or still having trouble with lgetfh?
[2018-05-16 21:36:59] <aniketp41> @somers_, lgetfh doesn't show up normally or in "ad" class. When I set flag to "all" so as expected a lot of events are generated so I can't find any event generated by triggering lgetfh(2). For "getfh", I grep'ed for "fh" and nfs_getfh showed up. 
[2018-05-16 21:36:59] <aniketp41> Doing so in case of lgetfh, nothing shows up whatsoever
[2018-05-16 21:37:51] <aniketp41> Though it might be possible that some other syscall of some other class was generated which no maching of name with lgetfh?
[2018-05-16 21:39:45] <somers_> according to /etc/audit_event, it's supposed to be called "lgetfh"
[2018-05-16 21:40:36] <somers_> If you want to be sure it's getting called, then run your test while in another window doing "sudo dtrace -i syscall:freebsd:lgetfh:entry"
[2018-05-16 21:43:27] <aniketp41> Yes, lgetfh(2) showed up using the above command. But why doesn't it show up in audit record? Doesn't make sense..
[2018-05-16 21:43:27] <aniketp41> @somers_, I tried the above command with getfh(2) and that showed up too
[2018-05-16 21:43:44] <somers_> Then that sounds like an audit bug
[2018-05-16 21:46:07] <aniketp41> @somers_, can you please try once in your machine too? Here is the makeshift code I used: https://pastebin.com/1guze6Dz
[2018-05-16 21:46:35] <somers_> And how did you audit that?
[2018-05-16 21:47:04] <aniketp41> praudit -l /dev/auditpipe | grep "getfh"
[2018-05-16 21:47:10] <aniketp41> @somers_ 
[2018-05-16 21:47:23] <aniketp41> With "all" flag
[2018-05-16 21:47:38] <somers_> The "all" flag where?
[2018-05-16 21:48:01] <aniketp41> In /etc/security/audit_control file
[2018-05-16 21:48:26] <aniketp41> The other window had /dev/auditpipe open via "praudit"
[2018-05-16 21:49:25] <aniketp41> I guess in this case "ad" works too. As is correctly mentioned here: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L79
[2018-05-16 21:49:42] <somers_> the snippet you sent me has "getfh".  I thought you were worried about "lgetfh" ?
[2018-05-16 21:49:43] <aniketp41> @somers_ 
[2018-05-16 21:50:08] <aniketp41> Yeah, I tried that too, replaced getfh with lgetfh and fileforaudit with its symlink
[2018-05-16 21:50:23] <somers_> so what do you want me to run?
[2018-05-16 21:51:17] <aniketp41> I mean, how do you normally check/run audits? Like I simply start audit, have praudit running in one window, while in the other, I execute the binary..
[2018-05-16 21:51:53] <somers_> But I'm asking you: what do you want me to run?
[2018-05-16 21:53:09] <aniketp41> I mean, like running that code, or maybe if you have a better way of testing "getfh/lgetfh"?
[2018-05-16 21:53:55] <somers_> That's why I'm asking what do you want me to test?  You complained about lgetfh, then sent me a snippet that only calls getfh.  If you want me to test lgetfh, then you should send me code that actually uses lgetfh
[2018-05-16 22:03:27] <aniketp41> @somers_, here is the code for lgetfh(2), I modified the previous code a bit: https://pastebin.com/EwstzSUz
[2018-05-16 22:06:01] <somers_> Nope, I don't see an audit record for it either
[2018-05-16 22:43:59] <aniketp41> So @somers_, should we report this as a bug then? What would be the best way to do it?
[2018-05-17 06:49:59] * gnn (~quassel@f373.x.rootbsd.net) quit se.hub irc.underworld.no
[2018-05-17 13:25:50] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-05-17 14:17:46] <somers_> bugs.freebsd.org
[2018-05-17 18:43:46] <aniketp41> Hi @somers @rwatson, I was trying to test the family of "extattr" system calls dealing with the extended attributes of a file. The syscalls required a attribute namespace (which can be EXTATTR_NAMESPACE_USER in my case) and a name of the attribute. But how would I know which extended attributes exist for that file.
[2018-05-17 18:43:46] <aniketp41> I tried random values for attribute name, e.g "name", "inode", "author" but all were audited as :  "return,failure : Attribute not found"
[2018-05-17 18:43:59] <aniketp41> @somers_ 
[2018-05-17 18:44:33] <somers_> lsextattr
[2018-05-17 18:44:49] <somers_> that will show you what already exists
[2018-05-17 18:45:27] <somers_> Look at usr.sbin/extattr/tests for examples of valid names
[2018-05-17 18:50:38] <aniketp41> But @somers_, for the kyua tests, I'll need to create a file myself, so will there be any extended attribute by default? 
[2018-05-17 18:50:38] <aniketp41> Like "lsextattr -q user myfilename" does not give me anything
[2018-05-17 18:51:09] <somers_> There are none by default.  You'll have to create one.
[2018-05-17 19:00:04] <aniketp41> Sure @somers_ , I used extattr_set_* to set a random attribute
[2018-05-17 19:09:03] <aniketp41> @somers_, does it ever happen that audit record might contain return value of a syscall?
[2018-05-17 19:10:01] <aniketp41> I think extattr_get_file/fd() do that
[2018-05-17 19:11:40] <aniketp41> @somers_, can you see "123245" here: header,101,11,extattr_get_fd(2),0,Fri May 18 06:11:14 2018, + 578 msec,argument,2,0x3,fd,text,user,text,authorname,subject,root,root,wheel,root,wheel,9972,7530,56286,10.0.2.2,return,success,12345,trailer,101,
[2018-05-17 19:12:33] <aniketp41> after return,success. That is the size of buffer I pass into the function. I guess I should use it into the regex?
[2018-05-17 19:34:54] <somers_> Why do you need such a big buffer?
[2018-05-17 20:25:30] <aniketp41> No @somers_, I was just testing it to make sure it actually stores the return value (sizeof the buffer).Here is the test case: https://pastebin.com/gARzsAdA
[2018-05-17 20:27:35] <aniketp41> err, "%lu" instead of "%d" for sizeof() in the snippet
[2018-05-17 23:30:00] <aniketp41> ping @somers_, does the testcase look okay?
[2018-05-17 23:57:49] <somers_> yeah, it looks fine
[2018-05-18 15:54:27] <aniketp41> Hi @somers_, as of now I have 270 test-cases and it's been successfully passing everytime: https://pastebin.com/LeQafAdF
[2018-05-18 15:54:27] <aniketp41>  I have also been commiting to the socsvn repository here: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/
[2018-05-18 15:54:59] <aniketp41> @somer_ can you check if it works for you this time?
[2018-05-18 15:55:21] <aniketp41> i.e with large number of test-cases,how many of them cause the issue?
[2018-05-18 15:55:24] <somers_> if what works for me?
[2018-05-18 15:57:50] <aniketp41> @somers_, I was curious about how the problem which has been recurring lately fares out with these many tests run at once.
[2018-05-18 15:58:29] <somers_> You mean you want me to run all of the tests with auditd not already running, to see what the pass rate is?
[2018-05-18 15:59:36] <aniketp41> Yes, that would be great. Although they do take up about 5 minutes now..
[2018-05-18 15:59:49] <aniketp41> @somers_ 
[2018-05-18 16:00:59] <somers_> ok.  It'll take awhile to check out the SVN tree, though
[2018-05-18 16:01:26] <somers_> what is the SVN url?
[2018-05-18 16:01:34] <somers_> for the repository I mean, not the web interface
[2018-05-18 16:03:38] <aniketp41> I guess I used the same url, which was provided at this link you had earlier sent me: https://wiki.freebsd.org/SummerOfCodeSubversion
[2018-05-18 16:03:38] <aniketp41> Btw, I even keep the tests updated in my git repository so that might be a lot quicker I guess: https://github.com/aniketp/AuditTestSuite/tree/master/src
[2018-05-18 16:04:00] <aniketp41> @somers_ 
[2018-05-18 16:04:54] <somers_> Ok, looks like anonymous access works
[2018-05-18 16:07:50] <aniketp41> OKay, although I think Gavin had added you and @gnn in the soc-2018 group: https://svnweb.freebsd.org/socsvn/svnadmin/conf/authz?revision=337226&view=markup#l6
[2018-05-18 16:09:04] <aniketp41> @somers_ 
[2018-05-18 16:22:17] <aniketp41> Btw @somers_, I had a few observations and a doubt: I couldn't find any reference to audit_events i.e, xstat(2), lxstat(2), statvfs(2) in freebsd src. So am I missing something or can I safely assume that they don't exist in FreeBSD.
[2018-05-18 16:22:17] <aniketp41> Also, there was a family of "fa" audit events related to access control lists. All relevant documentation mentioned them as library functions but the audit event list mentions them as the syscalls. : https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L225
[2018-05-18 16:22:17] <aniketp41> Also, I couldn't audit them nor dtrace (the command you had sent me) showed any probe match...
[2018-05-18 16:22:34] <aniketp41> @rwatson @somers_ 
[2018-05-18 16:23:57] <somers_> xstat doesn't exist on FreeBSD AFAIK.  But you probably shouldn't worry about it.  What you should worry about is ensuring that every syscall that does exist gets audited, whether or not it's listed in audit_events
[2018-05-18 16:25:17] <somers_> As for stuff like statvfs, look in lib/libc to see what it's really doing, and what underlying syscalls it uses
[2018-05-18 16:25:19] <aniketp41> So are events like: acl_get_fd, acl_get_file etc considered syscalls? I guess they are library functions and my observations is that they don't get audited. @somers_ , what should I do about it
[2018-05-18 16:26:09] <somers_> Just worry about the list of actual syscalls; not the list of audit events.  The most important thing to do is to find any syscalls that aren't auditted.
[2018-05-18 16:33:25] <aniketp41> Okay @somers_, will do that. So till now the issue is with lgetfh(2).
[2018-05-18 16:33:25] <aniketp41> Btw even statvfs(3) was not audited.
[2018-05-18 16:33:53] <aniketp41> Weird how no library function is being audited
[2018-05-18 16:36:26] <somers_> Not so weird.  The audit functionality is implemented at the syscall interface
[2018-05-18 16:38:01] <aniketp41> Okay. So I think I should move on to file-attribute-modify audit class. Since all possible syscalls have been tested I think..
[2018-05-18 16:40:09] <somers_> Did you look in sys/kern/syscalls.master ?
[2018-05-18 16:40:32] <somers_> Also, sys/compat/freebsd32/syscalls.master?
[2018-05-18 16:41:12] <somers_> There's also the Linuxulator: sys/amd64/linux/syscalls.master
[2018-05-18 16:43:04] <aniketp41> As in, look for syscalls?
[2018-05-18 16:43:37] <somers_> yeah
[2018-05-18 16:44:00] <aniketp41> @somers_, but how will I identify the audit_classes. I used syscalls.master for reference to cross validate some syscalls which I thought did not exist. Like creat(2)
[2018-05-18 16:44:01] <somers_> Oh, and have you auditted ioctl(2)?
[2018-05-18 16:44:13] <aniketp41> That is under "io" I think
[2018-05-18 16:44:23] <aniketp41> I haven't moved to it yet
[2018-05-18 16:44:55] <aniketp41> I've just done "fc", "fw", "fr", "fd", "fa" and some in "fm"
[2018-05-18 16:45:20] <aniketp41> "nt", "pc", "ad", "io" and some others are left
[2018-05-18 16:45:53] <somers_> Well, regardless of the order in which you do things, one way or another you need to test every syscall.  Going through syscalls.master files is the only way to cover them all.
[2018-05-18 16:46:39] <aniketp41> Yeah, I'll keep it as a reference to make sure that I don't miss any in the end
[2018-05-18 16:49:56] <aniketp41> Btw @somers_, did you try running the tests? Hopefully they should give a better insight on maybe which tests are failing..
[2018-05-18 16:50:09] <somers_> still checking out svn
[2018-05-18 16:52:31] <aniketp41> Hmm, when I checked out for the first time, with the connection I had, I watched an entire movie and it finished checking out :D
[2018-05-18 16:53:05] <somers_> that's surprising.  Do you not live at the University?
[2018-05-18 16:53:55] <aniketp41> Yes I'm currently at here. Although connection at the lab is way faster than at the hostel rooms. So maybe that was the issue.
[2018-05-18 16:57:11] <somers_> could be.  SVN is also pretty latency-sensitive
[2018-05-18 16:57:29] <aniketp41> Btw @somers_, what happened to Shivansh's smoketestsuite project? Last we talked, he said that there was some issue with the last differential which would place the test generation tool within tools/tools
[2018-05-18 16:58:04] <somers_> I don't recall.  Check Phabricator.
[2018-05-18 19:49:32] <aniketp41> Hi @somers_, any updates on the test?
[2018-05-18 19:49:47] <somers_> Still checking out
[2018-05-18 22:40:06] <somers_> Done checking out.  6h10m.  But the tests don't compile on FreeBSD 12
[2018-05-18 22:40:16] <somers_>       format specifies type 'unsigned int' but the argument has type 'ino_t'
[2018-05-18 22:40:16] <somers_>       (aka 'unsigned long') [-Werror,-Wformat]
[2018-05-18 22:40:16] <somers_>         snprintf(regex, 30, "fstat.*%u.*return,success", statbuff.st_ino);
[2018-05-18 22:40:16] <somers_>                                     ~~                   ^~~~~~~~~~~~~~~
[2018-05-18 22:40:18] <somers_>                                     %lu
[2018-05-18 22:40:20] <somers_>       format specifies type 'unsigned int' but the argument has type 'ino_t'
[2018-05-18 22:40:22] <somers_>       (aka 'unsigned long') [-Werror,-Wformat]
[2018-05-18 22:40:24] <somers_>         snprintf(regex, 30, "fstatfs.*%u.*return,success", statbuff.st_ino);
[2018-05-18 22:40:26] <somers_>                                       ~~                   ^~~~~~~~~~~~~~~
[2018-05-18 22:40:28] <somers_>                                       %lu
[2018-05-18 22:48:47] <aniketp41> @somers_ so will it be %lu instead of %u for st_ino?
[2018-05-18 22:50:12] <somers_> ino_t grew from 32 to 64 bits in FreeBSD 12.
[2018-05-18 22:50:41] <somers_> Your tests must be committed into 12 first, then they can be backported to 11.  So you should make them compile on 12.
[2018-05-18 23:08:09] <aniketp41> So @somers_, should I install a completely new "12-CURRENT" as you had said earlier that I can't updated it from 11-RELEASE-p4?
[2018-05-18 23:08:43] <aniketp41> Is there a way to check my tests on 12 without having to upgrading to it?
[2018-05-18 23:08:52] <aniketp41> *upgrade
[2018-05-18 23:10:16] <aniketp41> I had the freebsd src "/usr/src" and that's where I've been compiling my tests till now
[2018-05-18 23:15:24] <somers_> You can build 12 from 11.1, but you have to build the entire thing
[2018-05-18 23:15:39] <somers_> cd /usr/src; make -jwhatever buildworld
[2018-05-18 23:15:50] <somers_> And you won't be able to run the tests that way.
[2018-05-18 23:16:07] <somers_> In the long term, it's probably better to setup a 12.0 VM
[2018-05-19 16:04:37] * somers__ (~somers@63.224.80.52) join
[2018-05-19 16:11:20] * somers_ (~somers@63-224-80-166.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-19 18:40:55] <aniketp41> Hi @somers_, I setup a "12.0-CURRENT" VM and placed my tests within /usr/src/tests/sys/audit and tried to compile but it gave me the same error. So I fixed it and the compilation was successful. But this time it didn't generate any Kyuafile for me. Also after doing "make" in the audit directory, nothing seemed to change. SO how would I generate projects binary this way?
[2018-05-19 18:42:31] <aniketp41> @somers__ 
[2018-05-19 20:13:42] <somers__> You have to do "make install"
[2018-05-19 20:32:33] <aniketp41> Hi @somers_, I tried make install but it for some reason looks for presence of "file-create" in the test-suite, which is apparently non-existent:
[2018-05-19 20:32:33] <aniketp41> (cd /usr/src/tests/sys/audit &&  DEPENDFILE=.depend.file-create  NO_SUBDIR=1 make -f /usr/src/tests/sys/audit/Makefile _RECURSING_PROGS=t   PROG=file-create  install)
[2018-05-19 20:32:33] <aniketp41> install  -s -o root -g wheel -m 555   file-create /usr/tests/sys/audit/file-create
[2018-05-19 20:32:33] <aniketp41> install: /usr/tests/sys/audit/file-create: No such file or directory
[2018-05-19 20:33:02] <aniketp41> ping @somers__ 
[2018-05-19 20:34:54] <somers__> Check it into your svn location and I'll take a look
[2018-05-19 20:44:54] <aniketp41> Yes @somers__, I had updated it earlier: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/file-attribute-access.c?r1=337233&r2=337240&pathrev=337240
[2018-05-19 20:55:28] <somers__> I'm unable to make a connection.  Can you?
[2018-05-19 21:39:08] <aniketp41> Yes @somers__, I was able to access the url..
[2018-05-20 01:40:08] * somers (~somers@2602:3f:e050:3400:e23f:49ff:fe44:d7b6) join
[2018-05-20 01:40:09] * somers__ (~somers@63.224.80.52) quit Read error: Connection reset by peer
[2018-05-20 02:20:12] <somers> I had no problem building your test suite.  Make sure you don't have any object files in the source directory
[2018-05-20 08:43:10] <aniketp41> Wow, I got my first kernel panic :D => https://pastebin.com/u3DqGTS1
[2018-05-20 08:43:10] <aniketp41> Most of the hex addresses were similar to your case earlier: Although in my case the cpuid is 1
[2018-05-20 08:43:10] <aniketp41> @somers 
[2018-05-20 08:52:17] <aniketp41> I was able to install the tests in /usr/tests and ran the tests from there. Although the tests were successful in case auditd is already running, I got this kernel panic when auditd is not already running...
[2018-05-20 08:53:02] <aniketp41> Btw @somers, what is the recommended way to get out of the kernel panic? Like I had to forcefully shut down the VM and in process lost all unsaved data :/
[2018-05-20 13:09:53] <somers> @aniketp41 That panic is the one whose patch is here: https://reviews.freebsd.org/D15381
[2018-05-20 13:10:06] <somers> If you type "reboot" at the panic prompt, your VM will reboot
[2018-05-20 13:10:23] <somers> You can also type "dump" to take a kernel dump before you reboot
[2018-05-20 13:11:43] <aniketp41> Yes @somers_, I had seen the patch. Also, I was wondering how I can fix the recurring panic. Like you had deleted one line in the patch so do I have to build the kernel after introducing that change?
[2018-05-20 13:11:55] <aniketp41> Sorry, @somers 
[2018-05-20 13:12:18] <somers> yep
[2018-05-20 13:14:38] <aniketp41> Okay will do that. Btw @somers, what was the status of the tests? You were able to build the test-suite right?
[2018-05-20 13:14:38] <aniketp41> Also, I had created a bug about another syscall that I noticed, wasn't audited: chflagsat(2) https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228374
[2018-05-20 15:45:16] <somers> I"ve been running the tests on loop ever since last night.  No failures yet
[2018-05-20 16:44:50] <aniketp41> That's good news! So should I update the diff with all the latest tests or wait for it to get commited first? Afaiu, D15381 will need to be commited before D15286, right?
[2018-05-20 16:44:50] <aniketp41> Also @somers, I included my tests in the /tests/sys/audit and then ran buildworld. It failed with some error messages that mentioned my test-cases.. Do I need to make some more changes apart from what is there in D15286 already? 
[2018-05-20 16:48:59] <somers> what were the buildworld error messages?
[2018-05-20 16:58:58] <aniketp41> @somers well I had closed the shell. I'm running it again
[2018-05-20 18:39:24] <aniketp41> Btw @somers, my disk space seems to have filled up. Is there some outdated files I can delete after "installworld"? I saw some commands like: "make delete-old-libs"
[2018-05-20 18:40:03] <somers> that won't help
[2018-05-20 18:40:22] <somers> You can delete stuff in /usr/obj, but you'll just have to recreate it when next you buildworld
[2018-05-20 18:41:25] <somers> You should probably just increase your VM's disk size.  Expanding the root file system is possible with both root on UFS and root on ZFS
[2018-05-20 20:46:46] <aniketp41> Hi @somers, currently I've expanded VM space and I'm doing "buildworld". Also, checked in some more tests. (Total 306 now). 
[2018-05-20 20:46:46] <aniketp41> For chflagsat(2), I've added a "atf_tc_expect_fail()". Is it fine, considering that it does not get audited?
[2018-05-20 20:47:24] <somers> Yep
[2018-05-20 20:53:18] <aniketp41> Btw @somers, isn't kernel development a bit too cumbersome? As in, do you have to build the kernel for every change in source code? Is there a way to make this process a bit faster? (Cause I couldn't do much other than just trying to build the kernel)
[2018-05-20 20:53:44] <somers> Yep.  Do "make -DKERNFAST -jwhatever buildkernel"
[2018-05-20 20:54:02] <somers> The -DKERNFAST means don't do a clean first, and don't rescan dependencies either
[2018-05-20 20:54:59] <aniketp41> And the "buildworld" is not done more than once, right? Cause it looks to me that doing it more than once would be very unfeasible
[2018-05-20 20:55:17] <somers> You don't need to repeat buildworld if you're testing a kernel change
[2018-05-20 20:55:29] <somers> Nor do you need to repeat buildworld if you're only testing a small part of world
[2018-05-20 21:04:58] <aniketp41> Okay sure, I'll keep this mind the next time. Btw @somers shall I add all these new tests for review? (In D15286)
[2018-05-20 21:05:05] <aniketp41> *in
[2018-05-20 21:05:27] <somers> No, let's not.  That review is so close that I'd rather not add anything
[2018-05-20 21:06:50] <aniketp41> Hmm okay. Btw doing this would probably take up a lot of time in reviewing and revising the changes (5875 SLOC) 
[2018-05-20 21:11:17] <aniketp41> Btw @somers, how did the issues get resolved? I mean, I haven't done any changes in the "utils.c" or the test-cases. A while back they were inconsistent, now they are all passing in your case.
[2018-05-20 21:12:55] <somers> Yeah, but they didn't fail consistently either.  The "incomplete audit record" bug has always been intermittent.
[2018-05-20 23:20:18] <aniketp41> Hi @somers, I rebooted into the newly built kernel and the kernel panic seems to have gone. But when I installed the tests in the test-suite, for the very first time I got some wide-range of test-failures (most of them: broken test body (never occurred before)): https://pastebin.com/ETaDqXBT
[2018-05-20 23:20:38] <aniketp41> I'm running them again and the number of test failures reduced but they are still there
[2018-05-20 23:21:49] <somers> The signal 11 and signal 10 failures are the most interesting.  Those are both segfaults.  Have you tried debugging either?
[2018-05-20 23:22:15] <somers> Oh, this could also happen if your world is newer than your kernel.  How did you install the VM, and how did you reinstall the kernel?
[2018-05-20 23:25:48] <aniketp41> They're random everytime, not sure how to debug a specific test-case. I also got a lot of "Audit init control failed " messages in the main VM window.
[2018-05-20 23:25:48] <aniketp41> @somers I grabbed a 12-CURRENT iso image https://download.freebsd.org/ftp/snapshots/amd64/amd64/ISO-IMAGES/12.0/, installed it normally. 
[2018-05-20 23:25:48] <aniketp41> For reinstallation, "cd /usr/src" > "make -j4 buildworld" > "make -j4 buildkernel" > "make installkernel" > "reboot" > "make installworld" > "reboot"
[2018-05-20 23:27:04] <somers> Your best bet to debug is probably to get a core file
[2018-05-20 23:27:39] <somers> Actually, you did leave a few steps out, though in this case you can probably get away with it
[2018-05-20 23:28:14] <aniketp41> Oh, @somers I followed the guide here: https://www.freebsd.org/doc/handbook/makeworld.html
[2018-05-20 23:28:20] <somers> Before doing "installworld", you should do "mergemaster -p -U"
[2018-05-20 23:28:31] <somers> After doing installworld, you should do "mergemaster -U"
[2018-05-20 23:29:42] <aniketp41> Okay @somers, although now that I've done "installworld", how should I get to the stage before doing "installworld"?
[2018-05-20 23:30:20] <somers> You can't.  Just do "mergemaster -U"
[2018-05-20 23:33:23] <aniketp41> Okay, I ran the command and after that I'm currently running the tests: file-attribute-access:extattr_get_fd_success  ->  broken: Premature exit; test case received signal 6 (core dumped)  [0.413s]
[2018-05-20 23:33:23] <aniketp41> @somers, I got another one now
[2018-05-20 23:33:41] <aniketp41> Probably there are more to come, since the test is running
[2018-05-21 00:04:52] <somers> Ok, now try to debug the core with gdb
[2018-05-21 09:37:44] <aniketp41> @somers, I couldn't find any core file. Wouldn't Kyua just clean them up after completion?
[2018-05-21 11:28:25] <aniketp41> Btw @somers, I did "installkernel" > "mergemaster -p -U" > "installworld" > "mergemaster -U" and I've run them twice now and only one test-case has failed yet:
[2018-05-21 11:28:25] <aniketp41> (Second time all passed) 
[2018-05-21 11:52:57] <aniketp41> Third time one failed: "file-attributre-modify:open_write_creat_trunc_success". On using kyua debug for that particular test case, I saw that once in a while a lot of auditon(2) events were being generated by audit startup, that caused it to timeout maybe? 
[2018-05-21 11:53:38] <aniketp41> Otherwise on most runs tests do pass for me. And those segfaults seem to have gone away
[2018-05-21 12:48:24] <aniketp41> Okay, after 5-6 runs after the first, none tests failed. I'm not sure why one or two failed initially..
[2018-05-21 15:26:31] <aniketp41> So megaTherion: Is it different from UFS? As in, I don't have much experience regarding various file-systems in FreeBSDx
[2018-05-21 16:49:38] <somers> who or what is megaTherion?
[2018-05-21 18:18:18] <aniketp41> Hi @somers, I was trying to understand about "whiteout" objects in union filesystem as I would need it to audit "undelete(2)". So I had asked a question regarding that on #freebsd channel on freenode
[2018-05-21 18:18:49] <aniketp41> It turns out, I can't do that in UFS (which I am currently using)
[2018-05-21 18:19:11] <somers> Yikes.  unionfs doesn't work very well.  Pretty much nobody uses it anymore.
[2018-05-21 18:36:50] <aniketp41> Okay, so I guess I can skip "undelete(2)" then? 
[2018-05-21 18:36:50] <aniketp41> Also, I was having another weird issue. I can't get mprotect(2) to fail, no matter whatever I do. Like passing in invalid memory buffers or invalid lengths or invalid flags. It always compiles and always returns 0. :/
[2018-05-21 18:36:50] <aniketp41> @somers, can you suggest some way to do it? https://pastebin.com/PZEnHa6e
[2018-05-21 18:37:52] <somers> Better not to skip it entirely.  You can still audit the failure case.
[2018-05-21 18:38:52] <somers> Look at the source.  Function kern_mprotect in file sys/vm/vm_mmap.c
[2018-05-21 18:39:06] <somers> that'll show you how to make it fail
[2018-05-21 20:14:42] <aniketp41> @somers I looked at the code and tried to figure out a way to make it fail, and the only possible way it seemed was when (addr + size) > addr ; or when size is negative. But even very large negative values don't fail the tests.
[2018-05-21 20:14:42] <aniketp41> Btw is it possible to use mmap(2) to manipulate mprotect(2) to fail?
[2018-05-21 20:15:07] <aniketp41> *is not >
[2018-05-21 20:15:32] <somers> By far the easiest way is that first EINVAL clause
[2018-05-21 20:15:56] <aniketp41> Yes, that is the condition of comparing addr and size, right?
[2018-05-21 20:15:56] <somers> what values did you try?
[2018-05-21 20:16:00] <somers> yeah
[2018-05-21 20:16:17] <aniketp41> mprotect(NULL, -400000, PROT_NONE);
[2018-05-21 20:16:38] <aniketp41> And valid malloc'd buffer in place of NULL too
[2018-05-21 20:21:21] <somers> Well, the NULL case obviously isn't going to work.  NULL is 0, and nothing is going to be less than that.
[2018-05-21 20:21:44] <somers> Why don't you try using a hardcoded (invalid) addr?
[2018-05-21 20:27:52] <aniketp41> Okay, I got it to work using invalid addr (-1) :) . But the compiler generated warning: "-Wint-conversion" 
[2018-05-21 20:28:36] <aniketp41> @somers, is there a workaround the warning?
[2018-05-21 20:29:02] <aniketp41> Cause I think the compiler will always notice the invalid addr
[2018-05-21 20:29:44] <somers> Yeah.  Use SIZE_MAX instead of -1.  The compiler is complaining because you're coercing a signed value to an unsigned
[2018-05-21 20:31:44] <aniketp41> I think any integer value should give this warning: "warning: initialization makes pointer from integer without a cast "
[2018-05-21 20:34:01] <somers> Yeah.  But you can handle that just with a (void*)
[2018-05-21 20:36:15] <aniketp41> Oh right, I had tried casting it earlier, but for some reason it didn;t work. (I guess that was because I forgot to enclose -1 with (void *)).
[2018-05-21 20:36:15] <aniketp41> Now it's working, thanks @somers!
[2018-05-21 20:36:20] <somers> np
[2018-05-21 20:39:18] <aniketp41> But the audit record still doesn't contain anything useful: "header,68,11,mprotect(2),0,Tue May 22 02:07:59 2018, + 353 msec,subject,root,root,0,root,0,2938,2839,60856,10.0.2.2,return,failure : Invalid argument,4294967295,trailer,68,
[2018-05-21 20:39:18] <aniketp41> "
[2018-05-21 20:39:18] <aniketp41> This might work for failure case but a lot of similar successful audit records were created for success case
[2018-05-21 20:40:26] <somers> Are you using a 32-bit VM?
[2018-05-21 20:44:08] <aniketp41> No it's amd64
[2018-05-21 20:44:12] <aniketp41> @simers
[2018-05-21 20:44:18] <aniketp41> @somers 
[2018-05-21 20:44:45] <somers> Then where did the 4294967295 come from?
[2018-05-21 20:45:30] <aniketp41> I'm not really sure. I've noticed very large numbers in every test-failure case. For success case most contained return values @somers 
[2018-05-21 20:46:42] <somers> It would be good to track that down.
[2018-05-21 20:47:36] <somers> In general, when you're auditing stuff for security purposes, you need to know what _everything_ means.  Because nefarious stuff often looks confusing
[2018-05-21 20:50:56] <aniketp41> Yes @somers, I'd try to do that. Btw for success case, notice the 0: header,68,11,mprotect(2),0,Tue May 22 02:18:54 2018, + 414 msec,subject,root,root,0,root,0,3866,2839,60856,10.0.2.2,return,success,0,trailer,68,
[2018-05-21 20:50:56] <aniketp41> Also, have a look at this implementation in which I used the return value to pin-point to the system call instance triggered by us: https://github.com/aniketp/AuditTestSuite/blob/master/src/file-attribute-modify.c#L109
[2018-05-21 20:52:44] <aniketp41> @somers I got it: 4294967295 is (2^32 - 1) which is the limit for "int"
[2018-05-21 20:53:04] <somers> Yeah, but why?  None of those arguments are int
[2018-05-21 20:53:33] <aniketp41> return is int, right? So this should make sense?
[2018-05-21 20:54:09] <aniketp41> I mean, maybe the audit record can't contain negative values so they circled back to largest int?
[2018-05-21 20:54:50] <somers> Ok.  I saw "argument" and assumed that field was related to the arguments.  If it's actually the return value, then it makes sense
[2018-05-21 20:54:55] <aniketp41> The format of audit record can be: "return,{return-status},{return-value}"
[2018-05-21 20:54:58] <somers> Still, I don't know why it's formatted as unsigned
[2018-05-22 01:51:07] * somers_ (~somers@63-224-81-229.hlrn.qwest.net) join
[2018-05-22 01:52:33] * somers (~somers@2602:3f:e050:3400:e23f:49ff:fe44:d7b6) quit Ping timeout: 252 seconds
[2018-05-23 00:41:41] <aniketp41> Hi @somers_, I'm trying to audit revoke(2) which simply requires a const char *path as the argument. But passing any path always returns in a failure: return,failure : Invalid argument
[2018-05-23 00:41:56] <aniketp41> What might I be missing here?
[2018-05-23 01:18:13] <somers_> revoke(2) is normally only used on terminal devices.  Try creating a pseudotermina;l
[2018-05-23 01:43:37] <aniketp41> Sure, will try to do that. Btw @somers_, aren't we allowed to dynamically allocate memory in Kyua test cases? I tried to do so for munmap(2). and this code returns 0 but kyua test case returns segfault https://pastebin.com/dsdxhgrV
[2018-05-23 02:01:06] <aniketp41> Okay, I got it to work, I first mapped a memory segment using mmap(2) and then simply un-mapped it
[2018-05-23 16:37:37] <aniketp41> Hi @somers_, the man-page of execve(2) syscall says that successful call has no process to return to. So will it ever show up, "return,success" in the audit record?
[2018-05-23 16:37:37] <aniketp41> I've been trying various implementations and the obvious errors return failure with appropriate reasons but the code which looked right always returned "return,failure: Unknown error". Is it because successful execve(2) call never returns? 
[2018-05-23 16:38:35] <somers_> Are you saying that you did in fact get an audit record for a successful invocation?
[2018-05-23 16:38:56] <aniketp41> Nope, never. Been trying to get one
[2018-05-23 16:39:39] <aniketp41> I mean, it always rteturns failure. For what looks a correct approach, @somers_ 
[2018-05-23 16:39:41] <somers_> So what returned "return,failure: Unknown error"
[2018-05-23 16:39:53] <aniketp41> Okay, I'll show you the code
[2018-05-23 16:40:03] <somers_> Does it return a failure record for a successful invocation?
[2018-05-23 16:41:55] <aniketp41> Man page says execve(2) doesn't have a success return. It simply overlays the calling process. @somers_ 
[2018-05-23 16:42:33] <somers_> Yeah.  But I don't understand what you're problem is.  What are you expecting to happen, and what is happening instead?
[2018-05-23 16:44:18] <aniketp41> If the invocation was successful, it should not continue with the original program. 
[2018-05-23 16:44:18] <aniketp41> So my question was whether my analogy is wrong? or will it never actually return success. I'm thinking it does "Unknown error" when the invocation was successful since the original process never returns?
[2018-05-23 16:45:33] <somers_> what does "Unknown error" ?
[2018-05-23 16:46:15] <aniketp41> This snippet: https://pastebin.com/kGTDV27h
[2018-05-23 16:46:50] <somers_> I mean, "what is printing the error message"?
[2018-05-23 16:46:57] <somers_> Evidently not Kyua
[2018-05-23 16:48:00] <aniketp41> Yeah, I used those programs (in pastebin link) and checked auditpipe from a separate window. 
[2018-05-23 16:48:00] <aniketp41> header,142,11,execve(2),0,Wed May 23 16:33:45 2018, + 375 msec,exec arg,script,hello,world,path,/root/test/script,attribute,755,root,0,77,4574855,9149967,subject,root,root,0,root,0,1626,752,50338,10.0.2.2,return,failure: Unknown error: 201,4294967295,trailer,142,
[2018-05-23 16:49:22] <somers_> So you're saying that even when execve succeeds, auditpipe reports that it failed?
[2018-05-23 16:50:16] <aniketp41> Like, the execution of the above programs never prints the final printf() statement, suggesting the invocation was successful and still auditpipe returned "Unknown error"
[2018-05-23 16:50:16] <aniketp41> @somers_, Yes, precisely! Although I thought I might be wrong in my analogy
[2018-05-23 16:51:26] <somers_> Well, I don't know why it prints that.  You'd have to look into the implementation.
[2018-05-23 16:53:28] <aniketp41> Well what I think happens is that, since the program (in successful invocation) never returns (The new process takes over). Kyua doesn't have an explicit return value to check whether it passed or failed. It simply returns "Unknown error". 
[2018-05-23 16:54:11] <aniketp41> Maybe like the default part of any switch statement, where you don't know what happened 
[2018-05-23 16:55:01] <somers_> I thought you said this had nothing to do with Kyua?
[2018-05-23 16:56:13] <aniketp41> Sorry, auditpipe
[2018-05-23 16:57:35] <somers_> You'd have to look at the code to see what's going on.  I was under the impression that the kernel generated the entire audit record when the system call returned, but evidently that's not true.
[2018-05-23 16:57:56] <somers_> Have you tried _exit(2) ?
[2018-05-23 16:59:36] <aniketp41> I'll try that next @somers_ 
[2018-05-23 16:59:36] <aniketp41> Btw when I make deliberate error: Like wrong script name: It actually returns, printing the final printf() statement in the "pastebin code" and auditpipe shows this:
[2018-05-23 16:59:36] <aniketp41> header,116,11,execve(2),0,Wed May 23 16:57:55 2018, + 294 msec,exec arg,script,hello,world,path,/root/test/script.sh,subject,root,root,0,root,0,2238,752,50338,10.0.2.2,return,failure : No such file or directory,4294967295,trailer,116,
[2018-05-23 17:11:29] <aniketp41> @somers_, btw is it possible that any command line utility causes kernel panic?
[2018-05-23 17:11:29] <aniketp41> Cause I have an "exa" (port) alias for "ls" and when I do that, Kernel panics. While actual "ls" command doesn't cause one
[2018-05-23 17:12:31] <somers_> Sure.  Just do "sysctl debug.kdb.panic=1"
[2018-05-23 17:13:20] <aniketp41> It says: "Acquiring blockable sleep lock with spinlock or critical section held evclass_lock @ /usr/src/sys/security/audit/audit_bsm_db.c:119"
[2018-05-23 17:14:40] <somers_> suspicious location.  Do you have any local kernel modifications?  Are you running with the patch from D15381 ?
[2018-05-23 17:15:31] <aniketp41> Yes, @somers_, I removed that line and built the entire world. And then I've been running it since
[2018-05-23 17:15:57] <aniketp41> *the line removal on D15381
[2018-05-23 17:15:58] <somers_> but no other changes?
[2018-05-23 17:16:48] <aniketp41> No I think not..
[2018-05-23 17:17:16] <aniketp41> It just happened after I created a sample C program with "_exit(2)" but didn't run it yet..
[2018-05-23 17:17:36] <aniketp41> Before that it was wokring perfectly. The change doesn't make sens
[2018-05-23 17:18:23] <somers_> Do you get the panic when auditd is stopped?
[2018-05-23 17:28:00] <aniketp41> No @somers_, it only happened when it was running. And another observation. It only happens when I set system wide audit flag as "pc" (To check _exit(2)'s audit). In normal cases, it doesn't happen whether auditd is running or not 
[2018-05-23 17:30:24] <somers_> Good info.  Go ahead and file a bug.  Make sure to include the full stack trace.
[2018-05-23 17:30:45] <somers_> I gtg.  Back in a few
[2018-05-23 18:20:31] <aniketp41> Sure, btw @somers_, "sysctl debug.kdb.panic=1" also causes kernel panic. Irrespective of audit mask or whether auditd is running or not
[2018-05-23 18:22:31] <aniketp41> Also, I didn't find any "_exit" in the audit record (assuming audit mask has flag="pc"), either with _exit(1) or _exit(0).
[2018-05-23 18:22:31] <aniketp41> However, there were a bunch of "exit(2)" in the record. However, they all returned "success"
[2018-05-23 20:24:41] <aniketp41> @somers_, I created a bug report: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228444
[2018-05-23 20:24:41] <aniketp41> I couldn't assign the bug to you so added you to subscribers
[2018-05-23 20:25:51] <somers_> thanks
[2018-05-23 20:26:06] <somers_> BTW, causing a panic is exactly what "sysctl debug.kdb.panic=1" is supposed to do
[2018-05-23 20:33:56] <aniketp41> Okay, I see. It got me worried as to why that was happening. 
[2018-05-23 20:36:12] <aniketp41> Also, @somers_, for execve, I'll need a shell script to execute (which should be in the same directory). So do I need to specify something in the Makefile so as to ensure that the "make install" places it in the test-suite?
[2018-05-23 20:36:53] <somers_> Nah, you don't need a shell script.  Just call fork() in the testcase, have the child execve(), and have the parent wait() on the child
[2018-05-23 20:37:01] <aniketp41> uname -a: FreeBSD bsdtest 12.0-CURRENT FreeBSD 12.0-CURRENT #1: Mon May 21 20:10:48 IST 2018     root@bsdtest:/usr/obj/usr/src/amd64.amd64/sys/GENERIC  amd64
[2018-05-23 20:37:33] <somers_> paste it into the issue
[2018-05-23 20:37:45] <aniketp41> Yeah I did already
[2018-05-23 20:38:51] <aniketp41> Not sure why uname shows the wrong date. Although it is correctly set
[2018-05-23 20:39:33] <somers_> That's the date when the kernel was compiled
[2018-05-23 20:44:03] <aniketp41> Oh, okay. Makes sense now!
[2018-05-23 20:52:33] <aniketp41> @somers_, in the test-case, why do we need fork() & wait() along with execve(). Can't we evaluate the execve() syscall directly?
[2018-05-23 20:52:51] <aniketp41> As in, why do we need to create a child process?
[2018-05-23 20:53:05] <somers_> Doing that will quit the Kyua process, and you don't want to do that
[2018-05-23 20:55:23] <aniketp41> Okay so even if I'm calling execve() from child process, I'll need an executable to call as the first argument of execve(), that is why I was asking about the script. 
[2018-05-23 20:55:45] <aniketp41> Or is there any workaround that? @somers_ 
[2018-05-23 20:56:41] <somers_> Well, any executable will work.  Like /usr/bin/true
[2018-05-23 20:58:27] <aniketp41> Yes I initially thought about it. But in case that executable is not-present in the system, the tests might fail. Like, it's possible that I can just remove that particular executable. So will that be the right approach then? 
[2018-05-23 21:06:11] <aniketp41> Also, @somers_, what should I do about the "return,failure: Unknown error". I'm positive that it only happens when execve() successfully overlays the current process and the current process never returns. Which essentially means our test was successful
[2018-05-23 21:07:10] <somers_> You can count on pretty much anything in /usr/bin being present
[2018-05-23 21:07:28] <somers_> A few things you shouldn't count on.  Those are the things that can be disabled by src.conf.  But true(1) is not among them.
[2018-05-23 21:07:56] <somers_> You should figure out why audit(4) is returning the wrong thing
[2018-05-23 21:20:18] <aniketp41> Okay, btw @somers_, where in openbsm can I find the relevant code? Which actually decides what should be in the audit record..
[2018-05-23 21:20:38] <aniketp41> Then I will have a look why its returning a failure
[2018-05-23 21:20:57] <somers_> In this case, you probably need to look in the kernel, not openbsdm
[2018-05-23 22:17:27] <aniketp41> @somers_, I had a look at the "sys/kern/kern_exec.c"'s implementation of execve(). Assuming everything was successful. The flow order to me looked something like:  sys_execve() -> pre_execve() -> exec_copy_args() -> kern_execve() -> do_execve(). Now, do_execve() is where most of the magic happened. And I looked the various return possibilities in do_execve() and it looked as if it only returned when we had some error defined by errno:
[2018-05-23 22:17:27] <aniketp41> return (error == 0 ? EJUSTRETURN : error);
[2018-05-23 22:17:27] <aniketp41> https://github.com/freebsd/freebsd/blob/master/sys/kern/kern_exec.c#L969
[2018-05-23 22:20:29] <aniketp41> So it looks like execve() never returns in the successful invocation. And since audit(4) doesn't get any return value. It probably returns the default case: Unknown error
[2018-05-23 22:21:16] <aniketp41> But I need to be sure of it. Can you please point me to the code where audit(4) checks for return of the event while creating the audit record. I'm kinda unable to find it
[2018-05-23 22:23:59] <aniketp41> @somers_ I also found this interesting comment in kern_execve(): https://github.com/freebsd/freebsd/blob/master/sys/kern/kern_exec.c#L337
[2018-05-23 22:36:37] <somers_> Checkout security/audit/audit_bsm.c:977 and security/audit/audit.c:680
[2018-05-23 23:37:54] <aniketp41> Hi @somers_, I had a look at the code of every file within "security/audit" and I had few observations:
[2018-05-23 23:37:54] <aniketp41> 1) This here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_token.c#L890
[2018-05-23 23:37:54] <aniketp41> the second argument is probably responsible for the 4294967295 instead of (-1): "u_int32_t ret"   [Same for 2 wrapper functions of 32/64 bit representations] which have return value as unsigned.
[2018-05-23 23:37:54] <aniketp41> 2) The part responsible for appending return status and value to the audit record here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L1737 
[2018-05-23 23:37:54] <aniketp41> passes the function "au_errno_to_bsm" for return status. 
[2018-05-23 23:37:54] <aniketp41> 3) au_errno_to_bsm() in audit_errno.c looks through the database of errno values within the same file for appropriate return status. But for our case, since there probably wasn't any return value, it simply passes the control to this part: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_errno.c#L727
[2018-05-23 23:37:54] <aniketp41> 4) Now here is the issue: I'm confident that the "Unknown error" is coming due to BSM_UNKNOWN_ERRNO but I can't find the string representation which is presented in the audit record.
[2018-05-23 23:37:54] <aniketp41> 5) But I did find this: 
[2018-05-23 23:37:54] <aniketp41> #define	BSM_ERRNO_UNKNOWN		250	/* OpenBSM-specific. */"
[2018-05-23 23:37:54] <aniketp41> at https://opensource.apple.com/source/xnu/xnu-1504.7.4/bsd/bsm/audit_errno.h but I'm not sure how that's helpful
[2018-05-23 23:40:03] <somers_> I believe the string representations are somewhere in contrib/openbsm
[2018-05-23 23:42:40] <somers_> should the `case AUE_EXECVE` code set ar_errno?  If it can determine that `execve` was successful, then it probably should.
[2018-05-23 23:58:20] <aniketp41> I think ar->ar_errno is simply passed to the function kaudit_to_bsm() whereas the switch case adds arguments for corresponding ar->ar_event. So case AUE_EXECVE doesn't do anything to the ar_errno. It simply adds the *argv, and *env arguments to the audit record which is confirmed here:
[2018-05-23 23:58:20] <aniketp41> header,138,11,execve(2),0,Wed May 23 21:14:26 2018, + 67 msec,exec arg,script,hello,world,path,/usr/bin/true,...
[2018-05-23 23:58:20] <aniketp41> But the part :
[2018-05-23 23:58:20] <aniketp41> 	tok = au_to_return32(au_errno_to_bsm(ar->ar_errno), ar->ar_retval);
[2018-05-23 23:58:20] <aniketp41> 	kau_write(rec, tok);  /* Every record gets a return token */
[2018-05-23 23:58:20] <aniketp41> writes the return status, value which for our case is Unknown
[2018-05-23 23:59:55] <aniketp41> Here, au_errno_to_bsm(ar->ar_errno) has this lookup function: bsm_lookup_errno_local(errno) which fails in our case and hence returns BSM_ERRNO_UNKNOWN
[2018-05-24 00:00:42] <aniketp41> But I still can't find the string representation to confirm my suspicion: Unknown error
[2018-05-24 00:00:48] <aniketp41> @somers_ 
[2018-05-24 00:04:23] <somers_> Yeah, but it _could_ change ar_errno.  The question is, should it?
[2018-05-24 00:04:55] <aniketp41> Oh you mean, implementing the feature?
[2018-05-24 00:05:13] <somers_> yeah
[2018-05-24 00:06:09] <aniketp41> But that would go against what other cases have been doing. And it's possible many more audit events behave similarly. It would be better to know which one's do it, maybe? 
[2018-05-24 00:06:32] <somers_> That's why _exit is so interesting
[2018-05-24 00:15:36] <aniketp41> Oooh, yes. It seems to be adding the retval as one of the members of "ar" and not as the conventional return status in the end (like the other functions), because it doesn't have any return (as in the man-page)
[2018-05-24 00:16:37] <aniketp41> And I guess this part here has something to do with it too: https://github.com/freebsd/freebsd/blob/master/contrib/openbsm/libbsm/bsm_token.c#L395
[2018-05-24 00:17:13] <aniketp41> Oh no it's not special ^
[2018-05-24 00:27:19] <aniketp41> But @somers_, assuming both execve() and _exit() don't return in a particular scenario. Should exit also not return  BSM_ERRNO_UNKNOWN?
[2018-05-24 00:27:19] <aniketp41> also it doesn't modify its ar_errno..
[2018-05-24 00:27:42] <aniketp41> Record: header,77,11,exit(2),0,Thu May 24 00:26:17 2018, + 163 msec,exit,Error 0,0,subject,root,root,0,root,0,4301,4202,38646,10.0.2.2,return,success,0,trailer,77,
[2018-05-24 00:28:15] <aniketp41> So in place of arguments, AUE_EXIT has return value and status too
[2018-05-24 00:45:11] <aniketp41> ping @somers_ 
[2018-05-24 02:00:24] <aniketp41> Hi @somers_, I got a failure for execve(2) test-case. On debugging, the reason doesn't make sense https://pastebin.com/GuMEXViR
[2018-05-24 02:32:10] <somers_> Probably the incomplete audit record error
[2018-05-24 02:32:29] <somers_> Oh wait, no.
[2018-05-24 02:33:19] <somers_> That's EFAULT.  It's documented in execve's man page
[2018-05-24 02:40:46] <aniketp41> Yes I intentionally made it a Bad address, for failure case. I'm wondering why doesn't the regex match with the string. It should in this case, right?
[2018-05-24 02:40:55] <aniketp41> @somers_ 
[2018-05-24 02:41:22] <somers_> What is the regex?  Is it simply "execve" ?
[2018-05-24 02:42:22] <aniketp41> Yes, initially it was bigger but it didn't match. i made it smaller to see where is the issue. But even execve doesn't match
[2018-05-24 02:42:53] <aniketp41> Technically it should since the execve is present in the audit record @somers_ 
[2018-05-24 02:43:30] <somers_> Well, this should be an easy problem to solve.  You've got the regex and the string; you should be able to figure it out.  Maybe there's an unprintable character in there or something.
[2018-05-24 02:47:30] <aniketp41> Okay will check that issue. Btw about the issue with ar_errno for execve(). What do you think of it. Shouldn't _exit() also have that error (since it doesn't return anythin) but _exit() conatins the return,success in the audit record @somers_ 
[2018-05-24 02:48:05] <somers_> There's special code to handle _exit, because it actually terminates the process
[2018-05-24 02:49:46] <aniketp41> Oh, that makes sense. I guess we can change ar,_errno in the switch case for execve. That should hopefully work
[2018-05-24 03:26:42] <somers_> But only if we can know for sure that execve suceeded
[2018-05-24 12:10:19] <aniketp41> @somers_, I checked in the test-cases for execve(2) in both success and failure mode. (I had figured out the issue for regex not matching and fixed it). Please give the tests a run just to be sure they work for you too.
[2018-05-24 12:10:19] <aniketp41> https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/exec.c?revision=337248&view=markup
[2018-05-24 12:13:09] <aniketp41> Funny thing is these two tests complete the exec "ex" audit class.
[2018-05-24 12:56:01] <aniketp41> Hi @somers_, I think there might be another bug in audit/audit_ioctl.h.
[2018-05-24 12:56:01] <aniketp41> The structure here https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_ioctl.h#L41 needs <bsm/libbsm.h> and the include isn't present there
[2018-05-24 12:56:52] <aniketp41> When I'm trying to test ioctl(2), this gives me compilation error and to resolve that I have to include<bsm/libbsm.h> before it
[2018-05-24 13:54:05] <somers_> Missing headers in header files aren't usually bugs.  That's usually deliberate, in order to reduce header pollution.  What symbol from audit_ioctl.h were you trying to use?
[2018-05-24 13:55:02] <somers_> Whichever it was, its man page should've specified which headers you should include
[2018-05-24 13:58:46] <aniketp41> I was only using the AUDITPIPE_FLUSH. But the audit_ioctl.h also declared a "struct auditpipe_ioctl_preselect" which is supposed to be used as the third argument in some ioctl. But the "au_mask_t" is declared in the <bsm/libbsm.h>. So that header should also be present in the ioctl header right?
[2018-05-24 13:58:53] <aniketp41> @somers_ 
[2018-05-24 13:59:26] <aniketp41> Also, @somers_, have a look at the test for ioctl(2): https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/ioctl.c?revision=337249&view=markup
[2018-05-24 14:00:09] <aniketp41> I'm using the hex value of file-descriptor (which was present as it is in the audit record). To eliminate the false positives
[2018-05-24 14:03:58] <aniketp41> @somers_ if you are using something pre-declared in a header file, you need to include it's declaration header right?
[2018-05-24 14:42:20] <somers_> I don't understand the question
[2018-05-24 14:57:13] <aniketp41> So if a header file uses a struct which is declared somewhere else. Should the header file not include the header file which declares the struct @somers_ 
[2018-05-24 14:57:43] <aniketp41> I mean, instead of asking people to do it..
[2018-05-24 14:58:31] <somers_> Unlike a lot of projects FreeBSD doesn't have that rule, because it leads to overinclusion and namespace pollution.  The general rule is "#include whatever the man page tells you to"
[2018-05-24 15:00:27] <aniketp41> So afaik, the ioctls are used jn auditpipe(4) but there wasn't any mention in there.
[2018-05-24 15:00:44] <aniketp41> * manpage of auditpipe
[2018-05-24 15:03:38] <aniketp41> Still @somers_ I thought it would be nice to have one #include <bsm/libbsm.h> in there
[2018-05-24 15:03:51] <aniketp41> https://github.com/openbsm/openbsm/blob/master/sys/bsm/audit.h#L36 its done here for example
[2018-05-24 15:04:03] <somers_> If the entire file is not #includeable without first #including another, then it makes sense to #include from the header file.  (Or move the offending symbol into audit.h, but that would be more invasive)
[2018-05-24 17:07:39] <aniketp41> It's impossible to include <audit_ioctl.h> without <bsm/audit.h> so we'll have to include that anyway in our program. But as you said it's also possible to move the struct definition into <bsm/audit.h> and include the header in audit_ioctl.h.
[2018-05-24 17:07:39] <aniketp41> @somers_, "au_mask_t" is not defined in audit_ioctl.h so using it without any include looks erroneous to me 
[2018-05-24 17:08:17] <somers_> yeah
[2018-05-24 17:08:32] <aniketp41> Maybe moving the struct definition along with other struct definitions in "bsm/audit.h" would be a better and feasible approach?
[2018-05-24 17:08:48] <somers_> Yes, moving the struct definition is probably better
[2018-05-24 19:23:47] <aniketp41> Hi @somers_,just to confirm, syscalls {putmsg(2), getmsg(2), putpmsg(2), getpmsg(2)} are not defined in FreeBSD, right? I couldn't find any man-page or locate them in the src repo
[2018-05-24 19:25:05] <somers_> Never heard of them.  Where did you see a reference?
[2018-05-24 19:25:36] <aniketp41> Same old audit_event list: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L207
[2018-05-24 19:29:40] <aniketp41> @somers_ 
[2018-05-24 19:33:54] <somers_> Ahh, that list is shared between freebsd and darwin
[2018-05-24 19:34:48] <aniketp41> Then @somers_, should the syscalls not be defined in the darwin's list: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L294
[2018-05-24 19:34:57] <aniketp41> If they are present in Darwin
[2018-05-24 19:35:19] <aniketp41> They are defined before Darwin's syscalls start
[2018-05-24 19:36:23] <aniketp41> Oh I see, the Darwin list conflicts with Solaris. Okay it makes sense now
[2018-05-24 19:36:37] <somers_> Well, it's standardized, even if not supported by freebsd:http://pubs.opengroup.org/onlinepubs/009695299/functions/xsh_chap02_06.html#tag_02_06
[2018-05-24 19:55:09] <aniketp41> Also, @somers_, if a syscall is not present in that list, does it mean that it does not get audited? Like very famous ones getpeername(2)
[2018-05-24 19:55:25] <aniketp41> There might be many more in other audit classes
[2018-05-24 20:21:55] <aniketp41> Also, @somers_, have a look at this revision: https://reviews.freebsd.org/D15561
[2018-05-24 22:39:09] <aniketp41> @somers_, If I'm creating a socket in a Kyua test case, do I need to close the socket descriptor myself or will Kyua do it for me while cleaning up? 
[2018-05-24 23:55:58] <somers_> what about AUE_GETPEERNAME ?
[2018-05-24 23:56:36] <somers_> If you create a socket in a Kyua test case, you need to close it yourself in a successful test.
[2018-05-25 00:05:36] <aniketp41> @somers_, AUE_GETPEERNAME isn't present in the list of audit event. I'll try to see if it gets audited nevertheless 
[2018-05-25 00:06:40] <aniketp41> Yes @somers_, did here: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337251&view=markup#l56
[2018-05-25 13:03:02] <aniketp41> Hi @somers_, does it happen that we are not allowed to create a pair of sockets using socketpair(2) .
[2018-05-25 13:03:02] <aniketp41> "socketpair(PF_INET, SOCK_STREAM, IPPROTO_TCP, &tr)" this always gives: "Operation not supported"
[2018-05-25 14:01:13] <aniketp41> Also @somers_, just to confirm, we would need to select() the client socket for writing, right?
[2018-05-25 14:45:03] <somers_> @aniketp41 try PF_UNIX instead of PF_INET
[2018-05-25 14:45:36] <somers_> For a very small amount of data, you can get away without doing select, because the kernel's sockbuf won't fill up.
[2018-05-25 18:42:04] * aniketp41 nick aniketp
[2018-05-25 19:08:06] <aniketp> @somers_ though why does it not work with PF_INET? like apart from PF_UNIX I tried PF_LOCAL and it worked for both cases. Also, it didn't make sense as to why two IPv4 sockets are not supported..
[2018-05-25 19:08:53] <somers_> PF_UNIX == PF_LOCAL
[2018-05-25 19:09:23] <somers_> There simply aren't many (any?) use cases where you would need a pair of connected inet sockets
[2018-05-25 19:10:25] <somers_> And if you did create a pair of inet sockets, what ports would they use?
[2018-05-25 19:10:47] <aniketp> @somers_ I tried making the connection without using select() , but everytime it gives back EINPROGRESS. This didn't happen in FreeBSD-11. I guess doing a select would be a better choice then?
[2018-05-25 19:11:38] <somers_> I'm not sure what you mean.  I'd have to see the code to understand.
[2018-05-25 19:15:09] <aniketp> Here is the makeshift code I've been using : https://pastebin.com/Pp3wBMCV @somers_ 
[2018-05-25 19:15:49] <somers_> Oh, I thought this had something to do with socketpair
[2018-05-25 19:16:30] <somers_> which syscall are you trying to exercise?
[2018-05-25 19:16:36] <aniketp> No, in this case I was referring to testing "connect(2)" for which I thought I'd need select()
[2018-05-25 19:17:16] <aniketp> And all that come post to connect(), e.g accept(), readfrom() etc
[2018-05-25 19:17:30] <somers_> Try removing the O_NONBLOCK part for the client socket
[2018-05-25 19:21:59] <aniketp> Thanks @somers_, it worked!
[2018-05-25 19:21:59] <aniketp> Though, can we get away with the client being "blocking" later on? I'll have to read the man-pages of syscalls similar to "send()" and "recv()" to be sure but I think when trying to alternate between server and client while sending and receiving data, is it possible that client blocks the process in some cases?  
[2018-05-25 19:23:03] <somers_> It might block on writes, but if your writes are small enough it won't.  And it might block on reads, but not if you've already written to the other end.
[2018-05-25 19:55:37] <aniketp> Hi @somers_, please have a look at the "connect_success" test case: https://pastebin.com/HsTTRg9i 
[2018-05-25 19:55:37] <aniketp> Here is the whole "network" test-program till now: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337252&view=markup
[2018-05-25 19:55:37] <aniketp> Is the approach fine? I think the size of individual test cases might get larger for all pending network syscalls
[2018-05-25 19:57:26] <somers_> In general, a lot more things can go wrong with inet sockets than unix sockets.  Where possible, you should prefer to use unix sockets
[2018-05-25 19:57:30] <somers_> They're faster, too.
[2018-05-25 19:57:46] <aniketp> Okay, will change that part!
[2018-05-25 20:04:17] <aniketp> @somers_ on replacing PF_INET with PF_UNIX, half of the tests failed: https://pastebin.com/rCiHf1n6
[2018-05-25 20:05:49] <somers_> You can't use TCP with PF_UNIX
[2018-05-25 20:05:51] <somers_> Use 0 instead
[2018-05-25 20:05:57] <aniketp> Yeah figured that out
[2018-05-25 20:06:08] <aniketp> Now it works @somers_ 
[2018-05-25 20:06:32] <aniketp> Had faced the similar problem in socketpair(2)
[2018-05-25 21:03:18] <aniketp> Hi @somers_, PF_UNIX now caused issue while bind(2)ing in most test-cases: https://pastebin.com/5URkxXZG
[2018-05-25 21:03:18] <aniketp> While it worked with PF_INET
[2018-05-25 21:04:17] <somers_> How did you create the server variable?
[2018-05-25 21:09:29] <aniketp> Yes sorry, it should've been AF_UNIX instead of AF_INET
[2018-05-25 21:10:14] <aniketp> But still the tests failed. Maybe the addresses are assigned in a different way for AF_UNIX @somers_ ?
[2018-05-25 21:10:14] <aniketp> I'll try to figure out what is the right way to do so
[2018-05-25 21:10:52] <aniketp> "server->sun_family = AF_UNIX;"
[2018-05-25 21:11:14] <somers_> Yes, addresses are quite different.  You need to use a sockaddr_un, and the address is actually a path on the filesystem
[2018-05-25 21:11:52] <aniketp> Here's how I did it @somers_: https://pastebin.com/gVSAnvZR
[2018-05-25 21:12:16] <somers_> Yeah, that totally won't work for AF_UNIX
[2018-05-25 21:43:44] <aniketp> So @somers_, setsockopt(2) is essentially useless for host internal protocols right? Since we're unlink()ing the server address after every run
[2018-05-25 21:44:22] <aniketp> But even though it was not required, it still showed up in the audit record as a success return
[2018-05-25 21:44:28] <somers_> I wouldn't say that
[2018-05-25 21:44:42] <somers_> some options apply to PF_UNIX sockets
[2018-05-25 21:45:06] <somers_> Oh, you mean SO_REUSEADDR?  Yeah, that's useless.  Actually, I'm not sure why you used that for PF_INET in the first place
[2018-05-25 21:45:51] <aniketp> Oh one reason was that I needed to test the audit of setsockopt(2) :P 
[2018-05-25 21:46:21] <aniketp> And I thought maybe in case the port 9000 is busy it might free it.
[2018-05-25 21:48:35] <somers_> SO_REUSEADDR doesn't have anything to do with addresses that you explicitly bind(2).  It's only for the local port.  The port you usually don't care about.
[2018-05-25 23:46:36] <aniketp> Hi @somers_ does shutdown() work with PF_UNIX sockets? AS after accept() with the client, I assumed that shutdown should've worked but it still shows: "Socket is not connected"
[2018-05-25 23:47:26] <aniketp> The implementation notes section in the man-pages shows few scenarios all of which use PF_INET/PF_INET6
[2018-05-25 23:47:48] <somers_> I don't know.
[2018-05-26 00:09:34] <aniketp> @somers_ I got it. I was using shutdown() on the wrong socket. I should've used it on the socket descriptor which is returned when a connection is made.
[2018-05-26 10:30:24] * somers_ (~somers@63-224-81-229.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-05-26 10:31:45] * somers (~somers@63.224.81.229) join
[2018-05-26 14:03:13] <aniketp> Hi @somers, would you advise on using a separate variadic function for closing socket descriptors? There are upto 3 socket descriptors in each test case and I was thinking of closing them in a separate function..  
[2018-05-26 14:23:41] <aniketp> @somers, the test-case for syscalls concerned with sending and receiving data seem to be getting quite heavy. Can you suggest some further optimizations in this test case : https://pastebin.com/piBhETHs
[2018-05-26 14:23:41] <aniketp> I already made 3 static functions.
[2018-05-26 14:24:38] <aniketp> Or shall I leave them as it is?
[2018-05-26 15:42:05] <somers> Well, you could certainly combine check_readfs and recvfrom
[2018-05-26 15:42:35] <somers> Would it help to create a socketpair-like helper function?
[2018-05-26 15:42:54] <somers> Actually, why don't you just use socketpair?  It should work in this case, because you're using PF_UNIX sockets
[2018-05-26 18:15:42] <aniketp> @somers actually the issue is that the function check_readfs will be shared by recv(2), recvfrom(2), and recvmsg(2) so I separated that part.
[2018-05-26 18:15:42] <aniketp> Yes socketpairs might actually do the job since I have a similar set of sockets each for both client and server. I'll try that out!
[2018-05-26 21:12:05] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) join
[2018-05-26 21:18:48] * somers (~somers@63.224.81.229) quit Read error: Operation timed out
[2018-05-26 21:38:55] <aniketp> Hi @somers_, @rwatson, does the condition here : https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L1721 [""BSM conversion requested for unknown event %d\n""] imply that "ar->ar_event" was supposed to be implemented but couldn't be?
[2018-05-26 21:38:55] <aniketp> I've got this particular exception condition for setfib(2) & chflagsat(2) till now
[2018-05-26 21:40:34] <aniketp> They both are mentioned in the audit_event list and are supposed to be audited but are not.
[2018-05-26 21:40:34] <aniketp> Also, @somers_, would a "atf_tc_expect_fail()" suffice for "setfib(2)" just like chflagsat(2) and lgetfh(2)? 
[2018-05-26 21:46:23] <somers_> Yeah, that's definitely a missing case
[2018-05-26 21:46:42] <somers_> but I don't understand your second question
[2018-05-26 21:48:10] <aniketp> As in should I implement a test-case for setfib(2) as "atf_tc_expect_fail()" like chflagsat(2) or should I leave it out for now? @somers_ 
[2018-05-26 21:48:51] <somers_> Oh, you mean auditing setfib doesn't work?  Then yes, mark it as an expected failure
[2018-05-26 21:49:13] <somers_> BTW, setfib(2) will fail if you don't have any extra fibs available.  What argument are you giving it?
[2018-05-26 21:51:33] <aniketp> Yeah, it doesn't. Now after understanding the code of audit/audit_bsm.c I can figure out why was it not audited. My main VM window printed out "BSM conversion requested for unknown event 43209" which confirmed my suspicion.
[2018-05-26 21:51:33] <aniketp> @somers_, for simplicity I implemented it as: setfib(1); where int fib = 1;
[2018-05-26 21:51:54] <aniketp> But even if it was wrong, it should have audited the failed event @somers_ 
[2018-05-26 21:52:08] <somers_> what does "sysctl net.fibs" show?
[2018-05-26 21:53:05] <somers_> By default it should be 1.
[2018-05-26 21:53:16] <somers_> If you want to increase it, you have to set it in /boot/loader.conf
[2018-05-26 21:53:54] <aniketp> "net.fibs: 1". Which means my argument was wrong
[2018-05-26 21:53:56] <somers_> However, you should probably just set fib=0 for your test.  I think that would be auditable
[2018-05-26 21:54:14] <aniketp> Yes I did that now > Even that doesn't get audited
[2018-05-26 21:54:43] <aniketp> "BSM conversion requested for unknown event 43228"
[2018-05-26 21:55:10] <somers_> And it is in /etc/security/audit_events, you say?
[2018-05-26 21:55:15] <aniketp> This time its different from "43209"
[2018-05-26 21:55:23] <aniketp> https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L588
[2018-05-26 21:55:31] <aniketp> Yes @somers_ 
[2018-05-26 21:56:30] <aniketp> @somers_ same result for syscalls related to sctp_peeloff [None of them get audited] https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L591
[2018-05-26 22:36:25] * somers__ (~somers@63-224-81-235.hlrn.qwest.net) join
[2018-05-26 22:43:06] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-26 22:44:55] <aniketp> Also, @somers__, shall I also audit getfh(2) (nfs_getfh(2) in a different audit class) as a expected failure in "fa" audit class?
[2018-05-26 22:45:09] <aniketp> *which is audited as nfs_getfh(2)
[2018-05-26 22:48:29] <somers__> If there's no audit record, then it's a failure
[2018-05-26 22:53:28] <aniketp> Okay, but what about the audit class being different? @somers__ 
[2018-05-26 22:53:44] <somers__> what do you mean?
[2018-05-26 22:54:00] <aniketp> nfs_getfh(2) is within the "ad" audit class
[2018-05-26 22:54:16] <aniketp> While "getfh(2)" is "fa" @somers__ 
[2018-05-26 22:55:13] <somers__> So you think that getfh and nfs_getfh should be in the same audit class?
[2018-05-26 22:59:03] <aniketp> I'm not sure how nfs_getfh(2) is different from getfh(2). (Maybe something to do with Network File System maybe?). So I wondered if they ought to be in the same audit class. 
[2018-05-26 22:59:03] <aniketp> It could be that they are intentionally in different audit classes. But it's strange to me how one syscall gets audited as another with a completely different audit class. 
[2018-05-26 22:59:03] <aniketp> I've had such situations before, e.g open(2) as openat(2). close(2) as closefrom(2). But they were within the same audit class. This case is unique..
[2018-05-26 22:59:11] <aniketp> @somers__ 
[2018-05-26 22:59:53] <somers__> what do you mean "one syscall gets audited as another"?
[2018-05-26 23:00:32] <aniketp> @somers__, when I try to audit "getfh(2)", nfs_getfh(2) shows up in the audit record
[2018-05-26 23:01:09] <somers__> Have a look in lib.  Is getfh really a wrapper around nfs_getfh?
[2018-05-26 23:08:59] <aniketp> @somers__, I found the man page but couldn't find the source code https://github.com/freebsd/freebsd/blob/f5d95e1f8d32db4ccccfd5ad9cecb21ed07a695d/lib/libc/sys/getfh.2. 
[2018-05-26 23:08:59] <aniketp> Can you please point me to it?
[2018-05-26 23:09:40] <aniketp> Also, I found out why open gets audited as openat(2). libc converts it to openat(2): https://github.com/freebsd/freebsd/blob/master/lib/libc/sys/open.c#L58
[2018-05-26 23:17:17] <aniketp> Also, @somers__, I completed all syscalls for "nt" audit class taking reference from audit_events list. Please checkout the tests and have a look at them: https://svnweb.freebsd.org/socsvn/soc2018/aniketp/head/tests/sys/audit/network.c?revision=337254&view=markup 
[2018-05-26 23:44:18] <somers__> It's in kern/init_sysent.c:213
[2018-05-26 23:46:56] <somers__> There is no nfs_getfh syscall; I don't know why they call it that.
[2018-05-26 23:54:16] <aniketp> @somers__, here its mentioned it as AUE_NFS_GETFH,https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L813
[2018-05-26 23:54:16] <aniketp> maybe that's why it gets audited as nfs_getfh
[2018-05-26 23:55:36] <somers__> No, the reason is that init_sysent.c says that the getfh syscall uses the AUE_NFS_GETFH audit event, and /etc/security/audit_event stringifies that as "nfs_getfh"
[2018-05-27 00:02:59] <aniketp> @somers__ I think it might not be a bug. I've been trying to audit getfh(2) but's its listen in audit_event list within the "Darwin-Solaris" section. So it could be like, I'm only supposed to audit getfh(nfs_getfh) within the "ad" audit class?
[2018-05-27 00:03:16] <aniketp> *listed
[2018-05-27 00:30:20] <somers__> Yeah, it's not a bug.  Perhaps a "questionable design decision", but not really a bug
[2018-05-27 00:32:42] <aniketp> Sure. Btw @somers__, which audit class would you recommend testing next? (As in general order in difficulty ). I have "process-control", "administrative" and "inter-process-communication" left
[2018-05-27 00:38:47] <somers__> It's up to you.  Each group has its own challenges.
[2018-05-27 00:38:59] <somers__> Personally, I think IPC is more fun though.
[2018-05-27 00:43:25] <aniketp> Sure, I'l start with IPC then. And I'm currently having trouble with msgctl(2), though I'll try to figure out what's the issue.
[2018-05-27 00:44:06] <aniketp> Btw @somers__, about the review: https://reviews.freebsd.org/D15561 . Did you have a look at it?
[2018-05-27 00:49:33] <somers__> Yeah.  It looks mostly ok, but it needs build testing.  I'll do that now
[2018-05-27 00:50:05] <somers__> Actually, you can do it yourself.  Just do "make universe".  However, it takes around 8 hours even on good hardware.  On your laptop, probably longer.
[2018-05-27 00:50:21] <somers__> But the project has some build servers for just this purpose
[2018-05-27 01:08:58] <aniketp> @somers__, the headers, "audit/audit_ioctl.h" and "bsm/audit.h" are connected in a way that I couldn't separate them even after a lot of thought. There's no way we can use "audit_ioctl.h" without "bsm/audit.h". One of the ioctl parameters uses a struct defined in bsm/audit.h which is also used by a lot more files. So we possibly can't move the "au_mask_t" out of "bsm/audit.h" into "audit_ioctl.h".
[2018-05-27 01:08:58] <aniketp> I also added a typedef for struct auditpipe_ioctl_preselect to make it consistent with the other struct definitions 
[2018-05-27 01:09:45] <aniketp> "au_mask_t" <= "struct au_mask"
[2018-05-27 02:17:11] <somers__> Does it use the whole struct, or just a pointer to the struct?
[2018-05-27 02:20:58] <somers__> Because if it only really needs a pointer, then you can forward-declare the struct
[2018-05-27 03:23:02] * somers_ (~somers@63-224-80-209.hlrn.qwest.net) join
[2018-05-27 03:29:52] * somers__ (~somers@63-224-81-235.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-27 03:35:08] * somers__ (~somers@63-224-81-23.hlrn.qwest.net) join
[2018-05-27 03:40:41] * somers_ (~somers@63-224-80-209.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-27 03:56:21] <aniketp> @somers__, this seems to be using the struct instead of a pointer to the struct : https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_ioctl.h#L65
[2018-05-27 03:57:52] <aniketp> Also, even if we are forward declaring a struct, would we still not need to know where its members are coming from? (I guess for that we'll still need bsm/audit.h)
[2018-05-27 12:11:04] <somers__> When you forward declare a struct, you don't need to know anything but its name.
[2018-05-27 12:11:28] <somers__> But the only thing you can do with it is make a pointer to it.
[2018-05-27 13:16:02] <aniketp> @somers__ I think it needs the whole struct instead of just a pointer to it.
[2018-05-27 13:16:18] <aniketp> "#define	AUDITPIPE_GET_PRESELECT_AUID	_IOR(AUDITPIPE_IOBASE, struct auditpipe_ioctl_preselect)"
[2018-05-27 13:16:57] <aniketp> #define _IOR(AUDITPIPE_IOBASE, 10, struct auditpipe_ioctl_preselect)
[2018-05-27 15:20:08] <somers__> It depends on what that macro does
[2018-05-27 15:20:16] <somers__> Have you looked it up?
[2018-05-27 16:57:46] <aniketp> Hi @somers__, If I'm creating a message queue using msgget(2) do I need to destroy that message myself using msgctl(2) or wil Kyua do it for me? I'm not too familiar with message queues so can't figure it out.
[2018-05-27 16:58:24] <somers__> On succes, you need to cleanup everything just like a regular program, as if Kyua weren't involved.
[2018-05-27 17:35:47] <aniketp> Yes @somers__, I learned that the hard way. While creating test programs, to check whether msgctl(2) was being audited. I didn't explicitly delete the queues and as a result it exceeded the system limit
[2018-05-27 17:36:08] <somers__> lol
[2018-05-27 18:00:42] <aniketp> @somers__, I created initial 12 tests for message queue syscall family: https://github.com/aniketp/AuditTestSuite/blob/master/src/inter-process.c. Please have a look.
[2018-05-27 19:50:22] <aniketp> Btw @somers__, is there any cleaner way to organize the Makefile? It looks a bit cluttered after 11 test programs: https://github.com/aniketp/AuditTestSuite/blob/master/src/Makefile
[2018-05-27 19:51:56] <somers__> For TEST_METADATA, any bits that are the same for all files can be declared simply like "TEST_METADATA+=  foo=bar".  No need to specify it separately for each test program
[2018-05-27 19:52:45] <somers__> You could try replacing all of the "SRCS.*+=" line with a single "SRCS+=utils.c" line.  I'm not sure if that would work
[2018-05-27 19:53:09] <aniketp> Okay, will try that..
[2018-05-27 20:35:04] <aniketp> @somers__, "SRCS+=utils.c" doesn't work. I get that familiar linker error: https://pastebin.com/CrRksVbM
[2018-05-27 23:19:03] <aniketp> Hi @somers__, Is "ushort" acceptable data type or shall I use something else in place?
[2018-05-27 23:19:47] <somers__> Best to use the standardized types.
[2018-05-28 02:43:04] <aniketp> Hi @somers__, while trying to audit shm_open(2) and shm_unlink(2), I couldn't get them to pass on a relative path , e.g const char *path = "pathname"; But the result was successful when I replaced "pathname" with "/pathname". Is this approach fine for Kyua test case since I'm kind of creating an absolute path
[2018-05-28 03:02:46] <somers__> shm does not use a real filesystem path
[2018-05-28 03:02:49] <somers__> It's a separate namespace
[2018-05-28 03:03:23] <somers__> The easiest thing to do would probably be to use getcwd to build an absolute path
[2018-05-28 06:42:44] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-05-28 06:42:54] * mpts_ nick mpts
[2018-05-28 18:33:36] <aniketp> Hi @somers__, the pipe(2) syscall creates a lot of noise [A lot of other processes are creating pipes at the same time apparently]. And the audit record doesn't contain anything to pin point to the syscall we triggered. 
[2018-05-28 18:33:36] <aniketp> "header,68,11,pipe(2),0,Mon May 28 18:27:19 2018, + 761 msec,subject,root,root,0,root,0,746,742,32814,10.0.2.2,return,success,0,trailer,68,"
[2018-05-28 18:33:36] <aniketp> So shall I simply match against "pipe.*return,success" in the test case, considering there is not much I can do here
[2018-05-28 18:45:10] <somers__> what are all those other numbers?
[2018-05-28 18:46:14] <aniketp> From the doc: " The subject token stores the audit user ID, effective user ID and group ID, real user ID and group ID, process ID, session ID, port ID, and login address"
[2018-05-28 18:46:57] <aniketp> Maybe I can use the user id or the process id?
[2018-05-28 18:47:02] <aniketp> @somers__ 
[2018-05-28 18:47:18] <somers__> Yeah, the process ID should be a pretty good filter
[2018-05-28 18:49:00] <aniketp> Oh, I should have thought about it earlier. Maybe using the PID would have been a better option for all syscalls that didn't have much info in their audit record. I'll have a look at my previous test cases an try to implement this part @somers__ 
[2018-05-28 18:52:26] <aniketp> Yeah, just need to add the regex matching with the output of getpid(). This extracted out the target pipe(2) audit record
[2018-05-28 18:58:20] <aniketp> @somers__, that seemed to work: "Looking for 'pipe.*12310.*return,success' in 'header,68,11,pipe(2),0,Mon May 28 18:57:32 2018, + 497 msecsubject,root,root,wheel,root,wheel,12310,742,32814,10.0.2.2return,success,0trailer,68'"
[2018-05-28 18:59:03] <somers__> good
[2018-05-28 19:42:45] <aniketp> Hi @somers__, apart from some issues which I've compiled here: https://pastebin.com/J3G1WaQv 
[2018-05-28 19:42:45] <aniketp> It looks like all possible auditable events for IPC are done: https://github.com/aniketp/AuditTestSuite/blob/master/src/inter-process.c
[2018-05-28 19:42:55] <aniketp> Have a look in case I missed something..
[2018-05-28 20:04:26] <aniketp> Also @somers__ I was having a look at the functionalities of some of the administrative system calls. It looks like most of them do some important changes in the system. So how should I go about testing them. Like the most obvious syscall in this case that I can think of is reboot(2). We can't reboot the system with "kyua test" obviously :P
[2018-05-28 20:14:38] <somers__> that seems fast
[2018-05-28 20:15:29] <somers__> lol yeah, reboot would be hard to test
[2018-05-28 20:21:31] <somers__> I think you should test the failure case for reboot, and a comment explaining why the success case is untested
[2018-05-28 20:53:08] <aniketp> Hi @somers__, I got notified that you committed https://reviews.freebsd.org/rS334296. Does it mean we can review the pending D15286?
[2018-05-28 20:54:18] <somers__> The big issue with that review is still the incomplete record bug.  We never got to the bottom of that one.
[2018-05-28 21:02:18] <aniketp> But @somers__ wasn't that the issue with corrupted records of the extraneous events being generated at the audit startup? The events generated by the system call in question were always valid, and that's what we needed to check for case. So isn't it like, the purpose of the test-cases is served? 
[2018-05-28 21:03:50] <aniketp> I guess initially I had that "if condition" on every audit record that was being generated. It seems redundant to do that now
[2018-05-28 21:12:57] <somers__> But we could never be sure when auditd startup was complete.
[2018-05-28 21:18:11] <aniketp> Well if the issue is with auditd taking more than 5 seconds to complete, we can increase the poll timeout for auditd startup. (But leave it as 5 secs for syscalls) . As the test case timeout is 30 secs .anyway. @somers__ 
[2018-05-28 21:18:53] <somers__> It's not.  The issue is that the audit startup event gets corrupted
[2018-05-28 21:23:53] <aniketp> So @somers__, if we're sure that the auditd will start but for some rare event, the audit startup event gets corrupted and the tests fail eventually. Can't we do it like, if "audit startup" regex is not found in the audit record by a _certain_ amount of time, let the test case continue?. (Because by adding the poll(2) for audit startup we're just eliminating the race condition, why fail the tests when there is no race in the first place :P)
[2018-05-28 21:24:47] <aniketp> And if the auditd actually doesn't start by 5 secs. Then I believe there is some serious issue with the audit system...
[2018-05-28 21:25:09] <aniketp> Or maybe 10 secs. Sometime around it
[2018-05-28 21:25:41] <somers__> No, that's no sufficient.  If the "audit startup" message can be corrupted, then why can't any message be corrupted?
[2018-05-28 21:26:22] <somers__> The whole purpose of this exercise is to find bugs in the audit subsystem, after all.
[2018-05-28 21:28:43] <aniketp> Cause @somers__ we've never had any "incomplete audit record" condition when the auditd was already running. Atleast I didn't. 
[2018-05-28 21:28:43] <aniketp> Yes indeed, maybe there is some issue with the "ad" audit class or for auditon(2) event. But the other syscalls seem to be doing fine
[2018-05-28 21:29:21] <somers__> I doubt it.  I think the bug is probably triggered by the high volume of audit events during auditd startup.
[2018-05-28 21:30:21] <aniketp> Yes, Btw I got "qlen=qlimit" (in an earlier exercise) in FreeBSD 12. There were a lot of events being generated for me too @somers__ 
[2018-05-28 21:43:00] <somers__> We need to fix this.  Worst case, if we can't reproduce it frequently enough to fix, then we need to add enough debugging info to the code so that whoever runs into the issue next will be able to figure it out
[2018-05-28 22:03:14] <aniketp> Btw @somers__ I've been recently getting "broken: Test case body timed out" on about random 1-5 of 429 test-cases, when auditd is not already running. What could this mean? (This only happens on first 2 -3 runs, post that, they never fail) What could be the reason for this?
[2018-05-28 22:03:45] <somers__> sounds like an incomplete audit record to me.
[2018-05-28 22:06:27] <aniketp> @somers__ did you get such errors before? This has been happening after I rebuilt after D15381 on FreeBSD-12. On FreeBSD-11 there were only "incomplete audit record" and "not found within the time-limit error"
[2018-05-28 22:07:34] <somers__> At some point you changed "atf_tc_fail("Incomplete audit record")" to a mere "printf("Incomplete audit record")".  That's why you're seeing timeouts now
[2018-05-28 22:08:29] <somers__> Also, I don't see any of the qlen stuff in D15286.  Why didn't you add that code?
[2018-05-28 22:23:58] <aniketp> @somers__ will do that.
[2018-05-28 22:23:58] <aniketp> Btw do you think that adding an extra "ad" class just for audit startup is causing an issue with the timeout?
[2018-05-28 22:24:27] <somers__> Causing, now.  Aggravating, yes, because it increases the volume of auditted events.
[2018-05-28 22:25:13] <aniketp> I did a kyua debug with that feature enabled vs it commented out: https://pastebin.com/19py66j2
[2018-05-28 22:26:34] <aniketp> I think changing audit mask from "ad" to "fc (example)" took a bit of time and there are still a lot of auditon(2) events being generated
[2018-05-28 22:26:39] <aniketp> @somers__ 
[2018-05-28 22:26:54] <somers__> With what commentted out?  The ad audit class?  How can you receive the audit startup event if you do that?
[2018-05-28 22:27:15] <aniketp> Audit startup turns up on any audit class
[2018-05-28 22:27:35] <aniketp> @somers__ it is there in the second case. Have a look
[2018-05-28 22:28:10] <aniketp> I think "audit startup" and "audit shutdown" show up everytime 
[2018-05-28 22:29:22] <aniketp> And @somers__ note that the auditon(2) events are being generated _after_ audit startup. So I think adding "ad" class did not serve our purpose
[2018-05-28 22:29:32] <somers__> Interesting.  Are you sure?  Because it's listed in class "ad" in /etc/security/audit_events.  Are you sure that the ad class was disabled for the entire duration of that program?
[2018-05-28 22:31:59] <aniketp> Yeah it is. Actually I think I'm sure. When I started learning audit system and was playing around with "praudit /dev/auditpipe". I noticed audit startup and audit shutdown everytime. [Note: I was not even aware of the administrative events at that time]
[2018-05-28 22:32:31] <aniketp> And yes, you can see no auditon(2) events in the second instance of the pastebin link. Which means "ad" was disabled
[2018-05-28 22:32:34] <aniketp> @somers__ 
[2018-05-28 22:33:34] <aniketp> And @somers__ not a single test failed post that change: 429/429 passed (0 failed)
[2018-05-28 22:33:55] <aniketp> I had two runs with the audit system stopped initially
[2018-05-28 22:38:58] <aniketp> Yeah, the auditon(2) events seem to have gone away. And I also observed the decrease in the time taken for the tests to complete post removing the auditon event
[2018-05-28 22:46:33] <aniketp> ping @somers__  
[2018-05-28 22:47:14] <somers__> what do you mean "removing the auditon event"?
[2018-05-28 22:48:54] <aniketp> Sorry, "removing the set_preselect_mode("ad") line from utils.c"
[2018-05-28 22:49:38] <somers__> And by "auditon(2) events have gone away" do you mean "auditon(2) events except for audit startup" ?
[2018-05-28 22:52:22] <aniketp> Yes, the line "Looking for 'audit startup' in 'header,56,11,audit startup,0,Mon May 28 22:35:59 2018, + 947 msectext,auditd::Audit startupreturn,success,0trailer,56'" is always there in any "kyua debug". 
[2018-05-28 22:52:22] <aniketp> Which means that audit startup does show up always.
[2018-05-28 22:52:22] <aniketp> Btw @somers__ can you run the latest tests (I've checked them in on my svn branch ) and remove "set_preselect_mode(fd[0].fd, &aumask);" from utils.c to see it the result is same for you?
[2018-05-28 22:53:01] <somers__> What are you expecting me to see?
[2018-05-28 22:55:40] <aniketp> Whether you get any timeouts or not @somers__ . It could be that there might be something I might not have noticed while running the tests
[2018-05-28 22:56:01] <somers__> are you hoping that I'll get fewer?
[2018-05-28 22:56:51] <somers__> Minimizing timeouts is not what you should be focused on right now.  Rather, you should be doing the opposite: maximizing timeouts.  We need to be able to reproduce the incomplete audit record bug so we can fix it.
[2018-05-28 22:56:58] <aniketp> I'm not sure. Did you run the tests before? For my case the errors seem to have dissappeared
[2018-05-28 22:58:21] <aniketp> Yeah but what if they dissappear? @somers__ 
[2018-05-28 22:58:21] <aniketp> If none occur for you then we can be pin-point to "ad" class or auditon(2) as the mischief for th e "incomplete audit record" bug
[2018-05-28 22:58:45] <somers__> No.  Absence of evidence is not evidence for absence.
[2018-05-28 22:59:21] <somers__> We need to reproduce the bug reliably.  Only then can we debug it.
[2018-05-28 23:01:38] <aniketp> Okay. @somers__ I'll try creating test cases for "ad" audit class events. Specially auditon(2) and run them repeatedly. If the timeouts come-back (without the extra "ad" for audit startup) then can we reason that maybe "ad" has something to do with it? 
[2018-05-28 23:02:52] <somers__> You previously had a setup that reproduced the bug occasionally.  I think you should go back to that, then tinker with it to try to reproduce the bug more frequently.
[2018-05-28 23:03:01] <somers__> You could try reducing the qlen, for example
[2018-05-28 23:25:34] <aniketp> @somers__ the qlimit_max is 1024 right? 
[2018-05-28 23:25:57] <somers__> I don't know.  Don't you look it up ?
[2018-05-28 23:27:17] <aniketp> Well I thought it might be different for different systems. I was trying to set various values for q_limit to see if the audit pipe fills up 
[2018-05-28 23:27:54] <aniketp> You once remarked that it is 1024 so I thought I should confirm @somers__ 
[2018-05-29 00:37:01] <aniketp> Hi @somers__ I've been trying to reproduce the errors for the past hour. Even on shifting to "atf_tc_fail("Incomplete audit record")" from "printf("Incomplete audit record")", I never get "incomplete audit records". However when I set "ad" for audit startup and check the qlen after check_audit function , it generally returns something around 300. 
[2018-05-29 00:37:01] <aniketp> On setting it to max and eliminating "ad". Tests pass 100% of the time
[2018-05-29 00:38:10] <aniketp> But reducing qlen to something like "10" times out 100% of the time when "ad" is present and passes everytime when "ad" is absent
[2018-05-29 00:45:28] <aniketp> So essentially it looks to me that qlen and the extraneous "ad" setttings are the only thing that are causing the issue
[2018-05-29 00:46:22] <aniketp> ping  @somers__ . Can you think of any way I can reproduce the "incomplete audit record" error? Only way I could do it was to negate the if condition :P
[2018-05-29 01:24:58] <somers__> You just have to experiment, trying different things.
[2018-05-29 01:25:15] <somers__> For now, leave "ad" present, because it's always been present whenever we've seen this bug before.
[2018-05-29 01:25:21] <somers__> You might try intermediate values of qlen
[2018-05-29 01:27:57] <somers__> Also, you should print errno whenever you get an incomplete audit record
[2018-05-29 01:28:04] <somers__> The usual way to do that is with perror(3)
[2018-05-29 01:29:15] <aniketp> But @somers__, I've never encountered "audit incomplete record" bug. Even when I had FreeBSD 11. I changed it to printf() statement only because the tests failed for you because of this reason.
[2018-05-29 01:29:39] <somers__> Those timeouts you had earlier today were probably caused by incomplete audit records
[2018-05-29 01:32:18] <aniketp> But they've gone away after I increased the qlimit to qlimit_max. Also, just to be sure that actually "incomplete audit record" was the reason for the test case timeout, I reset everything back to its initial condition and replaced "printf" with "atf_tc_fail". So @somers__ if it was due to incomplete audit record, it should have failed straight away, right? 
[2018-05-29 01:32:52] <somers__> Not necessarily, because the error has always been intermittent
[2018-05-29 01:33:36] <aniketp> Also, when I set qlimit to 0 and 1. I got the timeouts 100% of the time. 
[2018-05-29 01:33:50] <somers__> That's to be expected
[2018-05-29 01:34:54] <somers__> You might also try running on FreeBSD 12.0-CURRENT.  That's where I observed the errors.  It's also better in general to run there, because that's where the code needs to be committed first.
[2018-05-29 01:36:36] <aniketp> @somers__ I'm running FreeBSD 12: uname -a: FreeBSD bsdtest 12.0-CURRENT FreeBSD 12.0-CURRENT #1: Mon May 21 20:10:48 IST 2018     root@bsdtest:/usr/obj/usr/src/amd64.amd64/sys/GENERIC  amd64
[2018-05-29 01:36:36] <aniketp> Also, I got all my kernel panics and the broken test case body in FreeBSD-12
[2018-05-29 01:38:49] <aniketp> Prior to that, everything worked fine. Also, I'm not sure how the errors are related. @somers__ so you mean that since the "incomplete audit record" is intermittent, it is causing timeouts. But don't we already have that "if condition" check in place? How could the incomplete record bypass that check? 
[2018-05-29 01:39:43] <somers__> Weren't you just 'printf'ing on au_read_rec failure?
[2018-05-29 01:40:26] <somers__> My understanding is that you were.  If so, then any incomplete audit record for records we don't care about would go unnoticed.  But if the "audit startup" record were the incomplete one, then we would timeout waiting for audit startup
[2018-05-29 01:40:34] <somers__> That's why I saw the last time that I was able to reproduce the failure
[2018-05-29 01:40:37] <aniketp> Also, even on FreeBSD 12, I've never had "incomplete audit timeouts". I initially had some segfaults, timeouts and broken testcase body.
[2018-05-29 01:40:37] <aniketp> No I shifted to "atf_tc_fail" as soon as I started debugging
[2018-05-29 01:41:13] <aniketp> @somers__ 
[2018-05-29 01:44:55] <aniketp> @somers__ actually I mentioned this one of the previous messages, I have enabled the "atf_tc_fail" condition so essentially any "incomplete record" cannot get past. And I have not had a single instance of incomplete audit record since I changed to atf_tc_fail condition.
[2018-05-29 01:45:56] <aniketp> And the timeouts are all dependent on the combination of "ad" setting and "qlimit". So it looks like these issues are not even related.
[2018-05-29 01:47:33] <somers__> The timeouts that you see from manipulating the qlen are very predictable.  But I think there is a sweet spot that produces the incomplete audit records.
[2018-05-29 01:48:11] <somers__> The last time I was able to reproduce them, it was when you had a "printf" in there, and they showed up as a timeout.  Inspection of the detailed test output showed that the "audit startup" record was never found.
[2018-05-29 01:50:17] <aniketp> Okay @somers__, how often did you get the incomplete records with atf_tc_fail() check enabled?
[2018-05-29 01:50:26] <somers__> You certainly have encountered the "incomplete audit record bug".  You talk about it in the dicussion of D15286.
[2018-05-29 01:50:58] <somers__> At its most frequent, I saw the error about once for every 3 or so test runs
[2018-05-29 01:52:44] <aniketp> Yes I did but post some change they vanished. Also, after some point, they vanished entirely (might have been some change that fixed for me). But even then you were getting the errors so I changed the atf_tc_fail() to printf() so that they don't occur for you.
[2018-05-29 01:53:48] <aniketp> But it looks like they still occur for you, and once in a while a corrupted audit record, which happens to be of the audit startup, timeouts the test for you
[2018-05-29 01:53:52] <aniketp> @somers__ 
[2018-05-29 01:54:46] <somers__> I haven't seen them at all lately
[2018-05-29 01:59:32] <aniketp> I guess if they have vanished, then the issue with me was due to qlen and "ad". (Because atf_tc_fail("incomplete audit record") ) never exited for me. 
[2018-05-29 01:59:32] <aniketp> @somers__ did it stop happening for you after you checkout approximately 200 tests from my branch?
[2018-05-29 01:59:39] <aniketp> *checkedout
[2018-05-29 02:00:34] <aniketp> Because I think I made some changes to the "utils.c" prior to checking in my tests
[2018-05-29 02:00:56] <somers__> I haven't seen it in that branch, no.  But I also don't see it in the current version of D15286
[2018-05-29 02:02:55] <aniketp> Now that is totally weird :D
[2018-05-29 02:02:55] <aniketp> I think maybe because of the "printf()" statement in current D15286, they've stopped occuring for you {That was my last change I think}
[2018-05-29 02:04:20] <aniketp> But it is highly possible that printf() might've hid the corrupted "audit startup" message and it caused the error for you. [It could be very rare and that might explain why I'm not gettting any incomplete audit record]
[2018-05-29 02:05:03] <aniketp> But again, if audit records were indeed being produced, why would it not exit on the atf_tc_fail() condition for me.., @somers__ 
[2018-05-29 02:05:12] <aniketp> This is confusing
[2018-05-29 02:06:23] <aniketp> I think maybe increasing "qlimit" and removing the "ad" should make the tests error free? @somers__ 
[2018-05-29 02:07:09] <aniketp> Now since even on atf_tc_fail() check there hasn't been any incomplete audit record?
[2018-05-29 02:13:49] <somers__> We don't want the test to be error free.  We want to reproduce the error so we can fix the root cause.
[2018-05-29 02:38:32] <aniketp> So @somers__ can you please checkout the current branch and  run the tests after introducing the atf_tc_fail statement instead of printf?
[2018-05-29 02:38:59] <aniketp> It might be possibke that errors recur for you..
[2018-05-29 02:39:07] <aniketp> But not for me
[2018-05-29 02:40:25] <somers__> I just did that.  I ran it for 15 runs with no errors
[2018-05-29 02:40:33] <somers__> On D15286, that is
[2018-05-29 02:40:41] <somers__> Now I'm trying earlier versions of D15286
[2018-05-29 02:47:03] <aniketp> Sure, I'll also have a run through the versions after I wake up
[2018-05-29 02:47:49] <somers__> Shit, you're still awake at 8:17 AM ?
[2018-05-29 02:47:59] <somers__> Ahh, to be young and responsibilityless
[2018-05-29 12:50:57] <somers__> I figured out how to reproduce it
[2018-05-29 12:51:12] <somers__> The incomplete audit records had the same root cause as the panic I fixed.
[2018-05-29 12:51:31] <somers__> I just had to back out my fix, recompile with INVARIANTS off, and I immediately got incomplete audit records
[2018-05-29 14:56:01] <aniketp> Yeah, I've been consistently pulling all-nighters since the vacation started. You might have done something similar during you time at Caltech? :P
[2018-05-29 14:59:13] <aniketp> Also, @somers__ , so if we're sure that the "Bad tailq" fix was indeed the fix for the root cause for the "incomplete audit record" errors, would it make sense to now remove the code which sets the "ad" class for "audit startup", since we're sure that audit startup shows up regardless of the preselection flag.
[2018-05-29 14:59:13] <aniketp> I also think we should set QLIMIT to QLIMIT_MAX just as an extra precaution 
[2018-05-29 15:22:46] <somers__> Yes, and yes
[2018-05-29 15:37:28] <aniketp> Btw @somers__ I think you've not added your @FreeBSD.org alias to your Github account and your local .gitconfig file. I guess that explains why your username on the commits on github don't get automatically converted to links, e.g: https://github.com/freebsd/freebsd/commit/7c423a65c91bf1b002e8f1f6f0f8bfa9beefcc9c
[2018-05-29 15:37:53] <aniketp> I noticed this with many other committers too
[2018-05-29 15:41:45] <somers__> What local .gitconfig file?
[2018-05-29 15:43:38] <aniketp> The config file which stores the default settings for github. For ex, mine here: https://github.com/aniketp/dotfiles/blob/master/.gitconfig
[2018-05-29 15:44:36] <aniketp> @somers__ 
[2018-05-29 15:45:44] <somers__> How would that affect how my commits show up in FreeBSD's github mirror?
[2018-05-29 15:51:16] <aniketp> Well, I cloned one of your repositories, "mock_shootout" and checked the git log, and it showed me this: "Author: Alan Somers <asomers@gmail.com>"
[2018-05-29 15:51:16] <aniketp> While the "Fix bad tailq" commit on the github showed "Author: asomers <asomers@FreeBSD.org>"
[2018-05-29 15:51:16] <aniketp> Now this would explain that all your own work on github is committed using your gmail ID. 
[2018-05-29 15:51:16] <aniketp> This issue would not add you to the contributers list on the github mirror. 
[2018-05-29 15:51:16] <aniketp> I think if you add you FreeBSD.org alias to your github account, this should automatically link all your freebsd commits to your account 
[2018-05-29 15:51:22] <aniketp> @somers__ 
[2018-05-29 15:51:49] <aniketp> I've faced this issue before
[2018-05-29 15:56:21] <somers__> So you think that if I add an alias at https://github.com/settings/emails , that github will automatically link my freebsd commits to my account?
[2018-05-29 15:56:35] <aniketp> Yup, that should work @somers__ 
[2018-05-29 15:57:33] <aniketp> Also, then you will be added to the contributers in the github mirror. As currently asomers@FreeBSD.org doesn't exist in Github's database
[2018-05-29 15:57:35] <somers__> Will it work for already-pushed FreeBSD commits, or only new FreeBSD commits?
[2018-05-29 15:58:12] <aniketp> If all the already pushed commits have asomers@FreeBSD.org so they all will be linked
[2018-05-29 15:58:57] <aniketp> @somers__ 
[2018-05-29 15:59:05] <somers__> I'll try it.
[2018-05-29 16:01:49] <somers__> Yep, it worked!  Thanks for the tip.
[2018-05-29 16:03:02] <aniketp> Also @somers__ in case you didn't notice, look at the #64th contributer in the freebsd mirror 
[2018-05-29 16:03:15] <aniketp> https://github.com/freebsd/freebsd/commits?author=asomers
[2018-05-29 16:03:18] <somers__> I see him.  Handsome fellow.
[2018-05-29 16:04:18] <aniketp> Haha, quite cool!
[2018-05-29 16:21:47] <aniketp> Also, @somers__, I updated D15286, please have a look
[2018-05-29 16:22:23] <somers__> ok
[2018-05-29 18:06:02] <aniketp> Hi @somers__, setting audit mask before audit startup causes issues with some audit classes. For eg, execve(2) works fine but for an audit class like "fc" generates a lot of events and "audit startup" was not noticed by Kyua. 
[2018-05-29 18:06:02] <aniketp> A much better solution I think would be to set "no" before audit startup and "name" after the audit startup. [Just like our previous approach but replace "ad" with "no"]
[2018-05-29 18:06:21] <somers__> Yep.  Makes sense.
[2018-05-29 18:10:57] <aniketp> Also, my change for some reason increased the time the tests are taking. Some even took around 4-5 secs [Mostly network APIs] and "sendto_failure" even failed to be noticed within the time limit. Although on next run, it was noticed within 4 seconds. So I'm inclined on increasing the test timeout to 10 seconds. Would you recommend this @somers__  
[2018-05-29 18:11:19] <somers__> which change did that?
[2018-05-29 18:11:51] <aniketp> introducing "no" local audit class before audit startup
[2018-05-29 18:12:37] <somers__> that's pretty weird.  Did you try to see what step is taking more time?
[2018-05-29 18:29:13] <aniketp> No @somers__ the tests in general don't take much time. [I tried running the tests multitple tests with and without introducing a "no" audit class setting]
[2018-05-29 18:29:13] <aniketp> Irrespective of the change. The tests in usual take about 0.100 seconds. About 7-8 of the 429 tests took more than 5 seconds. (One even took about 6.2 seconds)
[2018-05-29 18:29:13] <aniketp> I think this is not an issue with the audit system, this generally only occurs with specific syscalls and for especially for those which have a huge test-case body or very time-consuming testing.
[2018-05-29 18:29:13] <aniketp> For example, sendto,recvfrom generally take about 4-5 secs because I'm setting up the entire socket just to test them. Also, few syscalls like fchflags(2) use file descriptor and as a result, to eliminate false positives, I've used stat(2) to get the inode number to get the specific syscall we triggered
[2018-05-29 18:30:16] <aniketp> @somers__ this is not intermittent, it is specific to some syscalls within specific audit class and due to the nature of my test case body, are generating lot's of events
[2018-05-29 18:30:30] <somers__> So did the audit class change affect runtimes or not?
[2018-05-29 18:30:37] <aniketp> I guess 10seconds would be sufficient as none took more than this amount
[2018-05-29 18:31:01] <aniketp> No I had not confirmed earlier, adding "no" does not affect anything
[2018-05-29 18:31:55] <aniketp> The tests perform as they did before. (Few failed (specific) because of timeout, and those took around 6 secs to pass when I increased the timeout to 10 secs)
[2018-05-29 18:32:00] <aniketp> @somers__ 
[2018-05-29 18:36:30] <somers__> Are the same tests slow every time?
[2018-05-29 18:42:33] <aniketp> No the slow tests are same but they are not slow everytime, like once every 2-3 runs. Also, running them individually generally does not take much time.
[2018-05-29 18:42:33] <aniketp> Also, its hard to track down specific syscalls whether they take long time to complete because currently there are so many of them @somers__ 
[2018-05-29 18:42:33] <aniketp> But a general observation suggests they are the same  
[2018-05-29 18:43:32] <somers__> There are several ways to figure out which syscall is slow, but it helps if you can reproduce the problem.
[2018-05-29 19:09:16] <aniketp> @somers__ , sorry for the earlier report, I had 5 runs at the test and I actually noted down which ones are failing, Except for "ioctl_success" [Which took 5 seconds on two occasions], none of the syscalls were same (some different variants of open(2) did repeat). 
[2018-05-29 19:09:16] <aniketp> Also, on 3 occasions out of the 1600 tested, tests timed out, I think they would have taken a bit more than 10 seconds too. 
[2018-05-29 19:09:16] <aniketp> Also, none of the tests of "file-create" or the ones in D15286, take more then 0.200 seconds.
[2018-05-29 19:09:55] <aniketp> I guess, the issue is with audit startup taking more time than generally observed sometimes
[2018-05-29 19:10:51] <somers__> You should look at the stdout output of the timed out tests.  Did they fail waiting for audit startup, or waiting for the auditable event?
[2018-05-29 19:11:27] <aniketp> @somers__ how can I do that? afaik, I can only debug one test at a time
[2018-05-29 19:11:38] <somers__> Use kyua report-html
[2018-05-29 19:28:24] <aniketp> @somers__ in the next run, "inter-process:semctl_set_failure" timedout, and the html's stdout showed that it couldn't find audit startup.
[2018-05-29 19:28:37] <aniketp> Standard output:
[2018-05-29 19:28:37] <aniketp> auditd is not running.
[2018-05-29 19:28:37] <aniketp> Starting auditd.
[2018-05-29 19:28:48] <aniketp> Standard error
[2018-05-29 19:28:48] <aniketp> Files left in work directory after failure: started_auditd
[2018-05-29 19:31:02] <aniketp> Also, @somers__ I think instead of <a name="xfail"></a> in the context section of test summary, it should be <a id="xfail"></a>
[2018-05-29 19:31:14] <aniketp> Because it doesn't link to it otherwise
[2018-05-29 20:03:02] <somers__> Take it up with Kyua's maintainers
[2018-05-29 20:07:06] <aniketp> @somers__ actually initially I had put "set_preselect_mode(fd[0].fd, &nomask);" after audit startup. 
[2018-05-29 20:07:06] <aniketp> Placing it before (which should have been the case) does not result in any timeout and I can't find any test-case taking more than 0.500 seconds
[2018-05-29 20:07:24] <aniketp> I'll update the diff now
[2018-05-29 20:15:40] <aniketp> @somers__ updated the diff. Seems initially my incorrect placement of the code caused the issue. Now the tests seem to be behaving normally
[2018-05-29 20:16:03] <somers__> ok, I'll take a look
[2018-05-29 20:28:47] <aniketp> @somers__ I updated the revision quite a few more times as I had missed few things earlier, sorry for that!
[2018-05-29 21:28:06] <aniketp> Hi @somers__, does the current version of D15286 work fine?
[2018-05-29 21:28:30] <somers__> It passes the tests, if that's what you mean
[2018-05-29 21:29:31] <aniketp> Were there any tests which took extra time. It didn't happen to me after I fixed the code placement @somers__ 
[2018-05-29 21:30:02] <somers__> no.  they were all about the same time
[2018-05-29 21:31:20] <aniketp> Okay. So if there is any issues in the code I can fix them or else I hope they are ready to be landed? Cause there are a lot of tests waiting to be reviewed..
[2018-05-29 21:32:35] <aniketp> @somers__ 
[2018-05-29 21:32:56] <somers__> Yeah, I'm doing a full review now
[2018-05-29 21:45:52] <aniketp> @somers__ there were a few library functions in the acl_(get/set)_(file/fd/link) which were mentioned in the audit event list. Although, earlier you had said that the library functions don't get audited but I saw their "ar_event" in audit_bsm.c: Wouldn't that imply that they should be audited? 
[2018-05-29 21:45:52] <aniketp> https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L792
[2018-05-29 21:51:03] <somers__> they may be a syscall on darwin, but a library call on freebsd, or vice versa
[2018-05-29 22:15:09] <aniketp> @somers__ can I have an atf_require condition in the cleanup part of a test-case?
[2018-05-29 22:16:09] <somers__> Nope.  What were you trying to do?
[2018-05-29 22:17:59] <aniketp> No as you asked to use "atf_utils_file_exist" So I was thinking of implementing a check condition to confirm that the auditd stopped successfully
[2018-05-29 22:18:07] <aniketp> @somers__ 
[2018-05-29 22:18:33] <somers__> If auditd doesn't stop, there's not much that you can do about it
[2018-05-29 22:28:15] <aniketp> @somers__ in the Makefile that you had given me earlier, it contained: "CFLAGS+=        -I${.CURDIR:H:H}" so I left it as it is
[2018-05-29 22:28:15] <aniketp> Is it not required?
[2018-05-29 22:28:41] <somers__> which Makefile did I give you?
[2018-05-29 22:29:34] <aniketp> Way back I had asked you how you used to compile the tests, so you said you placed the tests in tests/sys/audit and used a particular makefile 
[2018-05-29 22:30:10] <somers__> likely copied from some other part of the tree
[2018-05-29 22:30:24] <somers__> Did I send you the contents, or the location from which I copied ?
[2018-05-29 22:30:29] <aniketp> TESTSDIR=       ${TESTSBASE}/sys/audit
[2018-05-29 22:30:29] <aniketp> ATF_TESTS_C+=   mkdir-atf0
[2018-05-29 22:30:29] <aniketp> TEST_METADATA.mkdir-atf0+= timeout="30"
[2018-05-29 22:30:29] <aniketp> CFLAGS+=        -I${.CURDIR:H:H}
[2018-05-29 22:30:29] <aniketp> WARNS?= 6
[2018-05-29 22:30:29] <aniketp> 03:11 <somers_>  .include <bsd.test.mk>
[2018-05-29 22:30:40] <aniketp> These were the original contents @somers__ 
[2018-05-29 22:31:37] <aniketp> If that line is not required then I can remove it no issues, I just wanted to clarify about it though..
[2018-05-29 22:38:06] <somers__> Looks like I probably copied it from tests/sys/aio/Makefile, which needed it for freebsd_test_suite/macros.h.  You can remove it.
[2018-05-29 22:44:29] <aniketp> Okay @somers__, I updated the revision:
[2018-05-29 22:51:31] <somers__> Does D15286 cover all fc syscalls?
[2018-05-29 22:58:16] <aniketp> Nope, there are 24 tests for open() in rc, wc, rwc, rct, wct, rwct as well. (That is why I had included the sys/syscall.h).
[2018-05-29 22:58:16] <aniketp> I was thinking of their review as soon as this is done
[2018-05-29 22:58:27] <aniketp> @somers__ : https://github.com/aniketp/AuditTestSuite/blob/master/src/file-create.c
[2018-05-29 22:58:51] <somers__> ok.  We can commit the initial batch first, just to get the process in place
[2018-05-29 23:00:00] <aniketp> Yes, that's what I was thinking of, post this, I'll sequentially create revisions for similar syscalls so that if there are any issues, we can narrow it down.
[2018-05-29 23:01:01] <aniketp> Yay! Finally after 4 weeks the revision is accepted :D
[2018-05-29 23:13:14] <aniketp> Btw @somers__, just curious, couldn't it have been my whole name instead of username in the commit message?
[2018-05-29 23:13:36] <somers__> It's conventional to use the username
[2018-05-29 23:13:47] <somers__> Full names are reserved for people who don't have accounts.
[2018-05-29 23:15:41] <aniketp> Okay, yes. I thought I saw Shivansh's full name but turns out it was his username too: https://github.com/freebsd/freebsd/commit/9ed52ddd11b61fba5e08fdbba98c00093825e684
[2018-05-30 00:14:49] <aniketp> Hi @somers__ here's a new revision: https://reviews.freebsd.org/D15613
[2018-05-30 00:59:00] <aniketp> @somers__ my VM panics on every reboot/startup. [After I set the audit class as "pc" and try to list the directories]. Is there a way to get out of this loop?
[2018-05-30 00:59:21] <aniketp> I can't basically get in my system noe
[2018-05-30 00:59:32] <somers__> what is the panic?
[2018-05-30 01:01:35] <aniketp> panic: "ufs_dirbad: /: bad dir ino 802560 at offset 1536: mangled entry" @somers__ 
[2018-05-30 01:02:14] <somers__> Ouch.  Well, you can try to boot single-user, then fsck it
[2018-05-30 01:03:54] <aniketp> Yeah, I did that earlier, but I guess I should've skipped the journal.. (I didn't and nothing changed)
[2018-05-30 01:05:49] <aniketp> @somers__ is it possible that "auditd(8)" and "pc" audit class and "exa : port" are related? Cause they all seem responsible for the consistent panic
[2018-05-30 01:06:24] <aniketp> I guess I should not use exa while testing "pc" system calls
[2018-05-30 01:07:00] <somers__> Yes.  exa is probably exercising some audit buggy path whenever auditing is enabled.
[2018-05-30 02:01:12] * shivansh (~zeebu@14.139.38.125) join
[2018-05-30 02:01:35] * shivansh (~zeebu@14.139.38.125) quit Client Quit
[2018-05-30 02:08:37] <aniketp> Hi @somers__,did some tests break on adding the tests for audit? This commit undid that https://reviews.freebsd.org/rS334362
[2018-05-30 02:54:56] <somers__> Yes.  Not your fault, though
[2018-05-30 02:55:11] <somers__> Looks like some of the openbsm headers are gcc-incompatible
[2018-05-30 03:00:30] <aniketp> @somers__ I think I only used <bsm/audit.h> and <bsm/libbsm.h> in the test programs. I guess maybe those are responsible then?
[2018-05-30 03:08:16] <somers__> yes
[2018-05-30 03:37:42] <aniketp> Also, @somers__ I think I've started encountering potentially dangerous syscalls. For ex, in chroot(2), I'm simply leaving the root directory as it is, i.e chroot("/"). And for umask(2), which sets the calling process's file creation mode, I've used mode as 0000 so as not affect any file creation. Are these approaches fine or shall I not test the success mode of these syscalls?
[2018-05-30 03:37:59] <aniketp> *as not to
[2018-05-30 03:53:54] <somers__> those make sense
[2018-05-30 04:43:10] * mpts (~mpts@boston-packets.hackerspace.pl) quit Read error: Operation timed out
[2018-05-30 04:44:16] * mpts (~mpts@boston-packets.hackerspace.pl) join
[2018-05-30 12:19:19] <somers__> Many of those dangerous syscalls can also be done in a forked() subprocess
[2018-05-30 15:40:05] * somers_ (~somers@63-224-81-116.hlrn.qwest.net) join
[2018-05-30 15:46:18] * somers__ (~somers@63-224-81-23.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-30 15:57:26] <somers_> Once you finish writing tests for audit(4), you might consider raising the WARNS of praudit(8) and auditd(8), and fixing the Coverity issues in openbsm
[2018-05-30 16:01:24] <aniketp> Sure, although @somers_, I couldn't really understand what WARNS?=6 did, does it increase the strictness of warnings while building ?
[2018-05-30 16:01:42] <somers_> Yup.  Dialing up WARNS adds more -W options to the compiler
[2018-05-30 16:02:55] <aniketp> And I saw your PR in OpenBSM, which removed some redundant function declarations, so is there some testing to be done in that regard too?
[2018-05-30 16:03:00] <aniketp> @somers_ 
[2018-05-30 16:03:31] <somers_> I already submitted that to freebsd too.  I'm doing another build test, then I'll reenable the tests that emaste disabled.
[2018-05-30 16:05:41] <aniketp> Oh this one: https://reviews.freebsd.org/rS334388 . It was not there a while before so I did not notice :-'
[2018-05-30 16:11:19] <aniketp> Btw @somers_ did you have a look the open(2) and openat(2) tests for "fc" here: https://reviews.freebsd.org/D15613
[2018-05-30 16:11:40] <somers_> nope
[2018-05-30 16:12:24] <aniketp> Also, there are quite a few manpage corrections that are pending in the PR that was merged in OpenBSM, shall I create a review for them?
[2018-05-30 16:12:48] <aniketp> I had created a bug report about them earlier @somers_  
[2018-05-30 16:13:26] <somers_> Sure, if you like.  If you don't, they'll be mass-merged eventually.  But it may take a long time.
[2018-05-30 16:14:50] <aniketp> Yes, for someone using au_read_rec() and the auditpipe ioctls can be easily mislead by the man-page. I'd rather open them now as they won't take much time to be reviewed I think. 
[2018-05-30 16:37:24] <aniketp> @somers_ here is the first one: https://reviews.freebsd.org/D15618 [On au_read_rec()'s return value]
[2018-05-30 16:37:59] <somers_> i see it
[2018-05-30 16:38:03] <somers_> I'll review it shortly
[2018-05-30 17:01:19] <somers_> Did you open a bug for the man page issue?
[2018-05-30 17:01:43] <aniketp> No, not for the au_read_rec() issue
[2018-05-30 17:02:02] <somers_> ok
[2018-05-30 17:02:05] <aniketp> I simply opened a PR on OpenBSM @somers_ 
[2018-05-30 17:35:07] <aniketp> @somers_ here is another one https://reviews.freebsd.org/D15620 . I had opened a bug report on it earlier: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=226713
[2018-05-30 20:02:08] <aniketp> Hi @somers_, the setpriority(2) is causing me some weird problems. When I simply set the default priority of the current user it slows down my VM. Also, on trying to obtain the current priority using getpriority(2) and setting the value returned so as not to cause any change still causes the issue. 
[2018-05-30 20:02:08] <aniketp> int p = getpriority(PRIO_USER, 0);
[2018-05-30 20:02:08] <aniketp> setpriority(PRIO_USER, 0, p);
[2018-05-30 20:02:43] <aniketp> Is there a better way to handle this syscall or should I skip it?
[2018-05-30 20:03:07] <somers_> what value did you supply for which ?
[2018-05-30 20:03:26] <aniketp> PRIO_USER @somers_ 
[2018-05-30 20:03:44] <somers_> better to use PRIO_PROCESS, or you'll be rescheduling all of root's processes!
[2018-05-30 20:04:43] <aniketp> Yeah, PRIO_PROCESS worked fine. Should've done that earlier :D
[2018-05-30 20:07:10] <aniketp> Also, @somers_ , isn't it better to let the "struct auditpipe_ioctl_preselect" definition be along with its buddies in the audit.h? I thought it would be a better design..
[2018-05-30 20:08:33] <somers_> You've got to be very careful when editting public header files.  Moving that structure will add symbols to the namespace of currently working programs.  It's not to be done lightly.
[2018-05-30 20:08:58] <somers_> If that structure has no use that doesn't also involve including sys/security/audit_ioctl.h, then there's no reason to move it.
[2018-05-30 20:10:55] <aniketp> Okay, will move it back. Btw will the typedef work fine? @somers_ . Or shall I remove it too? Cause all other auditpipe's ioctls had struct definitions with them
[2018-05-30 20:11:31] <somers_> I don't think you need the typedef
[2018-05-30 20:40:19] <aniketp> OKay, @somers_, so it essentially brings down to including bsm/audit.h to security/audit/audit_ioctl.h
[2018-05-30 20:40:23] <aniketp> Done here D15561
[2018-05-30 20:49:39] <aniketp> Also, @somers_ I did not create test cases for open(2) by taking every combination. Opening files in these modes it a separate audit event in itself and not just a combination. Also, @rwatson, emphasized on testing all these audit events specified by "open(2)" and "openat(2)". So it would make sense to test these audit events.
[2018-05-30 20:49:39] <aniketp> Also here is the list for possible audit events for open(2):https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L93
[2018-05-30 20:50:51] <somers_> You should put that info in the review, not just in IRC
[2018-05-30 20:50:59] <aniketp> As the regex matching like "read,creat,trunc" is present in the header along with open(2) and not in the arguments
[2018-05-30 20:51:43] <somers_> complete sentences, please?
[2018-05-30 20:56:02] <aniketp> Oh, sorry. The last statement was the addition to previous ones. I meant: The part like "read,creat,trunc" which I'm matching as the regex is present in the header token and not in the arguments, so it's like each opening mode is an audit events in itself. @somers_   
[2018-05-30 20:59:28] <somers_> Are you saying that "open" is in a separate token from "read,create,trunc", or in a separate record?
[2018-05-30 21:08:41] * aniketp (~aniketp41@159.65.149.37) join
[2018-05-30 21:11:40] <aniketp> @somers_ I think they both are in the same token (header) within the same audit record. 
[2018-05-30 21:11:40] <aniketp> LIke, open(path, O_CREAT | O_RDONLY | O_TRUNC, mode)'s audit record will have something like this
[2018-05-30 21:11:40] <aniketp> header,129,11,open(2) - read,creat,trunc 0,Wed May 30 21:00:53 2018, + 666 msec
[2018-05-30 21:11:40] <aniketp> argument,2,0x0,flags
[2018-05-30 21:11:40] <aniketp> path,/dev/auditpipe
[2018-05-30 21:11:40] <aniketp> attribute,600,root,wheel,2159309312,21,21
[2018-05-30 21:11:40] <aniketp> subject,root,root,0,root,0,1437,1340,35370,10.0.2.2
[2018-05-30 21:11:40] <aniketp> return,success,7
[2018-05-30 21:11:40] <aniketp> trailer,129
[2018-05-30 21:11:40] <aniketp>  
[2018-05-30 21:12:28] <aniketp> If the mode "flag" string was in the argument then the open(2) would only have one audit event
[2018-05-30 21:13:16] <somers_> Yikes; your delimiter character is present in that field
[2018-05-30 21:14:11] <aniketp> @somers_ I did not understand.. :/
[2018-05-30 21:27:00] * aniketp (~aniketp41@159.65.149.37) join
[2018-05-30 21:50:11] <aniketp> @somers_ would you suggest adding syscall's name in the regex? I thought it might not be that important since we already have the opening modes and we are more concerned with the return status of a syscall trigger
[2018-05-30 22:47:04] <aniketp> ping @somers_ 
[2018-05-30 22:47:51] <somers_> I could go either way.  It would definitely be nice to have, but it's not essential.  It could perhaps be a later enhancement.
[2018-05-30 22:50:55] <aniketp> Yes, sure. It could be while we are checking the semantics of the audit record. 
[2018-05-30 22:50:55] <aniketp> Btw @somers_ about open(2) with all auditable file modes? Don't you think it is essential that we check for each one of them? Since open(2) from what I've observed is the most recurring syscall of all
[2018-05-30 22:51:21] <aniketp> Also, since they are separately defined in the audit event list
[2018-05-30 22:51:32] <somers_> Yeah I do.  I didn't realize before that each combination of modes is a separate event
[2018-05-30 22:51:47] <somers_> Could you add a comment to that effect?  It isn't obvious.
[2018-05-30 22:52:39] <aniketp> Okay sure, one comment in the beginning of the test program or before every test case? @somers_
[2018-05-30 22:52:49] <somers_> Just one is fine
[2018-05-30 23:03:37] <aniketp> @somers_ added the comment!
[2018-05-30 23:03:44] <somers_> k
[2018-05-30 23:24:33] <aniketp> Besides @somers_ I had not checked the name of syscalls in any other file-create events. I just noticed that:
[2018-05-30 23:24:33] <aniketp> char *successreg = "fileforaudit.*return,success";
[2018-05-30 23:24:33] <aniketp> char *failurereg = "fileforaudit.*return,failure";
[2018-05-30 23:24:42] <aniketp> *,
[2018-05-30 23:25:16] <aniketp> I guess the whole test-program is consistent that way
[2018-05-30 23:56:42] <aniketp> ping @somers_, is the diff D15613 ready to be landed?
[2018-05-30 23:57:11] <somers_> I haven't reviewed your latest change
[2018-05-31 00:04:47] <aniketp> Okay
[2018-05-31 13:44:05] * somers__ (~somers@63-224-81-77.hlrn.qwest.net) join
[2018-05-31 13:50:24] * somers_ (~somers@63-224-81-116.hlrn.qwest.net) quit Read error: Operation timed out
[2018-05-31 14:52:47] <aniketp> @somers_ the link for the open(2) audit event within freebsd's audit event list is exceeding 80 chars limit, is it allowed to wrap around?
[2018-05-31 14:52:55] <aniketp> ping @somers__ 
[2018-05-31 14:53:26] <somers__> Yeah.  You can't stick a line break in the middle of the URL, so there's nothing to do about it
[2018-05-31 14:53:40] <somers__> Although in this particular case, a URL probably isn't appropriate
[2018-05-31 14:54:07] <somers__> Since this file is within the same repo as the file you need to link to, you should probably just specify audit_event's path within head
[2018-05-31 14:55:23] <aniketp> @somers__, something like this? "Please see: contrib/openbsm/etc/audit_event#L97"
[2018-05-31 14:55:34] <somers__> Yeah, like that
[2018-05-31 14:58:27] <aniketp> Btw @somers__ I've created tests for all possible opening modes in all allowed audit classes. About 184 out of 450 tests are for open(2) and openat(2) in success and failure mode only :P
[2018-05-31 14:59:10] <somers__> Whoa, that's a lot.  But there are only 48 AUE events.  If each one has failure and success, then that's 96.  How do you get to 184?
[2018-05-31 15:00:04] <aniketp> You're only counting open(2) I think. There is openat(2) too...
[2018-05-31 15:00:36] <aniketp> Sorry its 192 @somers__ (48x4)
[2018-05-31 15:01:27] <somers__> Actually, I double counted.  In audit_kevents.h, I see 12 AUE events for open (beginning at line 126) and 12 for openat (beginning at line 286
[2018-05-31 15:03:11] <aniketp> Yeah, true. But here is a catch: "AUE_OPEN_RWTC:open(2) - read,write,creat,trunc:fc,fd,fw,fr,fa,fm" will have tests in all 6 audit classes :P @somers__ 
[2018-05-31 15:03:30] <aniketp> That just increases the count a lot
[2018-05-31 15:03:44] <somers__> why do you need to test multiple audit classes?
[2018-05-31 15:04:02] <somers__> Are you saying that the event is supposed to show up if any one of those 6 classes is selected?
[2018-05-31 15:04:18] <aniketp> Yup, its true. @somers__ 
[2018-05-31 15:04:56] <somers__> where is that defined?
[2018-05-31 15:07:06] <aniketp> The holy audit events list: https://github.com/freebsd/freebsd/blob/master/contrib/openbsm/etc/audit_event#L107
[2018-05-31 15:07:06] <aniketp> which I've been following all along.
[2018-05-31 15:07:06] <aniketp> Please have a look at the tests I've created for open(2) and openat(2) in various audit class test programs. You'll see that they all are within multiple audit classes
[2018-05-31 15:07:14] <aniketp> @somers__ : https://github.com/aniketp/AuditTestSuite/tree/master/src
[2018-05-31 15:09:10] <somers__> mmm.  annoying
[2018-05-31 15:11:02] <somers__> Also, don't forget to test AUE_CREAT
[2018-05-31 15:11:12] <somers__> from creat(2)
[2018-05-31 15:12:35] <somers__> I don't want to test that many permuatations.  Can you figure out where the filter classes get applied?  Maybe we can find a more direct way of testing the filters
[2018-05-31 15:16:15] <aniketp> @somers__ creat(2) is deprecated. I had a talk with @dstolfa regarding it. https://github.com/freebsd/freebsd/blob/master/sys/sys/syscall.h#L16
[2018-05-31 15:16:37] <aniketp> I tried to audit it and it turns out we can't audit creat(2) as well
[2018-05-31 15:19:40] <aniketp> But @somers__, shouldn't we be testing all audit events of all audit classes? Also, I had initially asked you about it and you said that "maybe we ought to test them all". So I had to spend a lot of time in creating tests for all possibilities
[2018-05-31 15:39:10] <aniketp> @somers_ looks like there is a Hash Table with stores the mapping between each audit class and event here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm_db.c#L120
[2018-05-31 15:41:00] <aniketp> In a few lines below, a loop check for all audit events corresponding to the audit class and then audits them if they have been triggered. (Look like it uses  dtrace to keep track of that): https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm_db.c#L87
[2018-05-31 16:16:15] <aniketp> ping @somers__ . If I'm including <sys/param> then I don't need <sys/types>, right?
[2018-05-31 16:34:08] <somers__> that can't be the correct table if it's only used by dtrace
[2018-05-31 16:34:18] <somers__> Correct, you should only include one of sys/param.h or sys/types.h
[2018-05-31 16:37:07] <aniketp> @somers__,I guess to map the audit events and audit classes, the /etc/security/audit_events is used to fill up the mapping hash table "evclass_hash[EVCLASSMAP_HASH_TABLE_SIZE];" 
[2018-05-31 16:38:07] <aniketp> And all these special audit events are described in these few structures in https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm_klib.c#L68
[2018-05-31 16:38:33] <aniketp> I think we probably should test them all since they have been exclusively defined this way @somers__ 
[2018-05-31 16:40:35] <somers__> There are only 24 open-related audit events.  There isn't a separate event for each audit class.
[2018-05-31 16:40:47] <somers__> Mutiplying 24 events by six classes is just too much
[2018-05-31 16:44:41] <aniketp> So what would you suggest we do @somers__ ? I can have a separate test program for open(2) and openat(2)?
[2018-05-31 16:45:07] <aniketp> But them what audit class would I set? I think I can take a bitwise OR of all classes?
[2018-05-31 16:45:20] <aniketp> *then
[2018-05-31 16:45:40] <somers__> Setting just one audit class is sufficient to check that all syscalls are auditted
[2018-05-31 16:47:06] <aniketp> Okay, so for open(2),which audit class should I set?
[2018-05-31 16:47:12] <aniketp> @somers__ 
[2018-05-31 16:47:35] <somers__> Pick your favorite
[2018-05-31 16:47:46] <somers__> Or pick one that applies to every variation of AUE_OPEN
[2018-05-31 16:49:44] <aniketp> A thought process I had was that since open(2) can be audited within every audit class, perhaps we should test all possible cases. For example open(O_TRUNC | ...) is to be audited as "file-delete" and if the audit isn't being recorded, then users can delete files to their heart's content without being caught .. @somers__  
[2018-05-31 16:50:31] <aniketp> But sure, if we are only testing a single audit class, then I'll try to divide the test cases accordingly
[2018-05-31 16:52:10] <somers__> It's worthwhile to have a separate test, independent of open/openat, that ensures that the class field of audit_security does what it's supposed to.  But testing every audit event in every class is just too much.  Would you also do the negative?  Test that, say, AUE_FORK doesn't show up in any audit class except pc?
[2018-05-31 16:53:17] <somers__> In general, testing every combination of two combinable things leads to O(n^2) runtime.  It's often better to pick a baseline, then test every variation of each thing while holding the other things constant.  That's O(n)
[2018-05-31 16:58:53] <aniketp> OKay @somers__ I've planned my division. Going by it, the "file-create" audit class will contain tests for open, openat in "rc", "wc", "rwc". {So a total of 3x4 test cases}. Is this fine? So that I can update D15613?
[2018-05-31 16:59:32] <aniketp> I guess then that comment will also not be required, @somers__ 
[2018-05-31 16:59:49] <aniketp> Since, we've eventually divided the test-cases..
[2018-05-31 16:59:53] <somers__> what about cases without O_CREAT ?
[2018-05-31 17:00:53] <aniketp> They will go in their own audit classes @somers__ . I'll sequentially created differential revisions in the order that make more sense :P
[2018-05-31 17:01:22] <aniketp> But for now, I think let's complete "file-create" @somers__ 
[2018-05-31 17:04:14] <somers__> I suppose that's fine
[2018-05-31 17:04:36] <somers__> Personally, I think of the syscall as being more important than the audit class.  But there's no obvious way to group syscalls
[2018-05-31 17:04:51] <somers__> (except by the ABI group, but that's too big)
[2018-05-31 17:06:07] <aniketp> Yes precisely. Or since open(2) is so controversial, would you suggest that I have a separate test-program for it? @somers__ 
[2018-05-31 17:06:07] <aniketp> Like all 48 tests specifically for open(2) and openat(2)?
[2018-05-31 17:06:53] <somers__> that's not a bad idea.  open(2) and friends are pretty weird
[2018-05-31 17:07:44] <aniketp> Sure, then I guess I should abandon D15163 as "file-create" without open(2) family is complete
[2018-05-31 17:08:22] <somers__> ok
[2018-05-31 17:10:02] <aniketp> Also, @somers__, how bad is a test-program with only 4 test cases? Like "file-read" will only have tests for readlink(2) and readlinkat(2). Same for "ioctl" and "execve"
[2018-05-31 17:10:25] <somers__> Not bad at all
[2018-05-31 17:11:02] <somers__> Weird.  I wonder why AUE_READ and friends are in class no ?
[2018-05-31 17:11:24] <somers__> I guess they're considered too frequent to audit in any other class
[2018-05-31 17:18:58] <aniketp> Btw "no" audit class does not get audited right? @somers__ 
[2018-05-31 17:19:44] <somers__> I thought there was a way to turn off the filter and see all events?
[2018-05-31 17:25:10] <aniketp> I tried to check. read(2) doesn't get audited in "no". Also I think this is to be expected since "no" is an "invalid class" @somers__ 
[2018-05-31 17:25:35] <somers__> ok
[2018-05-31 17:31:53] <aniketp> @somers__ here is the diff for file-read: https://reviews.freebsd.org/D15636
[2018-05-31 17:31:59] <aniketp> please have a look
[2018-05-31 17:32:07] <somers__> ok
[2018-05-31 17:37:40] <somers__> Actually I'm beginning to doubt the strategy of dividing tests by audit class.  /etc/security/audit_event is a config file, so sysadmins can change audit classes
[2018-05-31 17:38:06] <somers__> You've configured auditpipe to ignore /etc/security/audit_control, but it's still bound by /etc/security/audit_event, right?
[2018-05-31 17:41:45] <somers__> There's probably no helping it.
[2018-05-31 17:42:41] <somers__> But we can at least add a comment to the top of /etc/security/audit_event advising developers to update the tests whenever changing default audit classes
[2018-05-31 17:44:54] <aniketp> I guess probably no one would change that list, else there could be serious repercussions in some other files. Apart from the audit tests breaking
[2018-05-31 17:46:23] <somers__> What else would break, if you only change the audit classes?
[2018-05-31 18:13:07] <aniketp> Well I guess nothing should, if there is no code which uses the exact mapping. So @somers__ should we add a comment at the top of audit_events then?
[2018-05-31 18:13:07] <aniketp> Also, I think the only changes that might take place are the deprecated events or the events not supported by FreeBSD being removed?
[2018-05-31 18:13:35] <aniketp> Or some new events being added. But they should not break the tests.
[2018-05-31 18:17:13] <aniketp> Also, in the tests, I'm overriding what audit class is set in "/etc/security/audit_class".  But I doubt why someone other than a developer would change the /etc/security/audit_event
[2018-05-31 18:17:19] <aniketp> @somers__ 
[2018-05-31 18:56:19] <somers__> You're overriding audit_class or only audit_control ?
[2018-05-31 19:12:31] <aniketp> Just the audit_control @somers__ . Essentially. I'm not touching anything in the kernel. Just the user-space system wide audit settings
[2018-05-31 19:13:31] <somers__> Actually, the flags and naflags settings from audit_control _are_ kernelspace settings
[2018-05-31 19:18:36] <aniketp> Oh, okay. I meant, I'm not changing any mappings of audit classes and audit events. @somers__ 
[2018-05-31 19:19:02] <aniketp> Just the flag for attributable events.
[2018-05-31 20:02:58] <aniketp> @somers__ I've removed the "rights reserved" line from all source and header files
[2018-05-31 20:04:31] <somers__> ok
[2018-05-31 20:07:43] <aniketp> Btw @somers__, this line already asks people not to change any mapping of audit events and audit classes: https://github.com/openbsm/openbsm/blob/master/etc/audit_event#L4
[2018-05-31 20:07:56] <aniketp> I guess this should be reliable then ?
[2018-05-31 20:08:43] <somers__> No, it doesn't say anything about classes.  That warning is just about hte mapping between event identifiers, numeric values, and event names
[2018-05-31 20:09:38] <aniketp> Oh, yes. Didn't notice that.. So, you're suggesting we add another line to not change the audit class mapping as well? @somers__ 
[2018-05-31 20:10:17] <somers__> Not exactly.  Just a warning to change the tests whenever changing the classes
[2018-05-31 20:23:27] <aniketp> Btw @somers__ , the process control and administrative syscalls don't return much in their audit records. I almost everytime have to use the PID to eliminate the false positives. Though it works but just that the records aren't much informative. Also, more often than not the auditing was easy since I had to provide hardcoded PIDs, addresses even for success case
[2018-05-31 20:23:42] <aniketp> Have a look: https://github.com/aniketp/AuditTestSuite/blob/master/src/process-control.c
[2018-05-31 22:42:05] <aniketp> Hi @somers__, will you be committing D15636?
[2018-05-31 22:43:06] <somers__> yeah, after the build test passes
[2018-05-31 22:51:01] <aniketp> Okay, also I was having an issue with the syscalls get/setaudit_addr(). Their second parameter is a "u_int length". Since this is not a pointer, I declared it and passed it to the function within the Kyua testcase. Now the compiler complains that I have not initialized the "length" parameter. But when I do assign it some value and then pass it to the function, the test fail the "setaudit_addr() != 0". 
[2018-05-31 22:51:01] <aniketp> Interesting thing is it shows expected behaviour when passing an uninitialized length in an independent C program. But initializing it and passing npt only fails the test, but it also causes a "Bad tailq" panic, when auditd is running. https://pastebin.com/Eu1xZAz2
[2018-05-31 22:51:07] <aniketp> @somers__ 
[2018-05-31 23:07:14] <somers__> I believe the compiler when it says that length is uninitialized.
[2018-05-31 23:07:21] <somers__> How did you initialize it?
[2018-05-31 23:09:21] <aniketp> u_int length = 0;
[2018-05-31 23:09:42] <aniketp> @somers__ as I did not have any particular value to give it to..
[2018-05-31 23:46:03] <aniketp> Btw @somers__ are block devices not supported in FreeBSD anymore?
[2018-06-01 00:21:11] * somers_ (~somers@63-224-81-39.hlrn.qwest.net) join
[2018-06-01 00:27:31] * somers__ (~somers@63-224-81-77.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-01 00:53:11] <somers_> Correct.  All devices are now character devices
[2018-06-01 00:53:28] <somers_> It looks like setaudit_addr needs an auditinfo data structure
[2018-06-01 00:55:43] <aniketp> Okay, so can't test swapon(2) and swapoff(2) then.. @somers__ 
[2018-06-01 00:55:43] <aniketp> Yeah, I declared an auditinfo struct. Used getaudit_addr() to fill it up, then passed it to setaudit_addr() so as not to change anything. But the issue was with getaudit_addr(0 actually. Here is the code: https://github.com/aniketp/AuditTestSuite/blob/master/src/administrative.c#L404
[2018-06-01 00:55:48] <aniketp> @somers_ 
[2018-06-01 01:04:47] <aniketp> Wait, it worked. I had not deferenced the length pointer earlier :D 
[2018-06-01 01:08:28] <aniketp> Btw @somers_ all basic auditable syscalls have been tested. I just need to extract out some elusive one's and create their tests.. Though it will need some thorough research of the audit and bsm code. I have legitimately 501 tests now :D
[2018-06-01 01:16:10] <aniketp> Total 159 syscalls yet :O
[2018-06-01 01:31:14] <somers_> There's about 550 syscalls in init_sysent.c
[2018-06-01 01:36:16] <aniketp> But are they even auditable? I think audit_token.c has very few compared to that
[2018-06-01 01:36:35] <aniketp> @somers_ 
[2018-06-01 01:37:48] <somers_> Dunno.  You'll have to check.
[2018-06-01 01:39:43] <aniketp> Yes, will start that analysis tonight. After I wake up ofcourse :P
[2018-06-01 01:40:15] <aniketp> But I think majority of them will not be auditable ..
[2018-06-01 01:48:25] <aniketp> Also, @somers_ assuming there aren't much more syscalls to test (which I think should be the case), what would you suggest be the next best field related to audit(4) to test?
[2018-06-01 01:48:59] <somers_> Next I would take a look at the syscalls from other ABI groups
[2018-06-01 01:49:26] <somers_> There are the freebsd32 syscalls that you don't have to worry about
[2018-06-01 01:49:34] <somers_> But there are also the linux syscalls and the cloudabi syscalls
[2018-06-01 01:50:02] <somers_> I say you don't have to worry about the freebsd32 syscalls, because the easiest way to test those is to use an x86 jail; a 32-bit userland on a 64-bit kernel
[2018-06-01 01:52:36] <aniketp> Btw @somers_ what are ABIs? I searched the net but  couldn't understand it. People seemed to be comparing it to APIs..
[2018-06-01 01:53:10] <somers_> application binary interface
[2018-06-01 01:53:19] <somers_> The API is you write to.  It's the stuff in /usr/include
[2018-06-01 01:53:29] <somers_> But the ABI is how your compiled program talks to the kernel
[2018-06-01 01:54:26] <somers_> It's the 32-bit compatibility syscalls, plus the 32-bit compatibility libraries, that allow x86 programs to run on an amd64 kernel
[2018-06-01 01:55:04] <somers_> Also, don't forget the backwards compatibility syscalls, like freebsd10_pipe(2)
[2018-06-01 01:59:44] <aniketp> Sure, will have a thorough look at these. But I'm supposed to test their audit, right? I don't think that there are any major groups of syscalls (auditable) defined here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c @somers_ 
[2018-06-01 02:00:28] <aniketp> Are those groups really auditable?
[2018-06-01 02:00:48] <somers_> Sure.  freebsd10_pipe, for example, audits as AUE_PIPE
[2018-06-01 02:01:01] <somers_> gtg; bedtime for the kiddos
[2018-06-01 02:22:23] <aniketp> Sure, Btw, here comes the "file-write": https://reviews.freebsd.org/D15640 :D
[2018-06-01 02:23:38] <aniketp> @somers_ 
[2018-06-01 04:38:35] * somers__ (~somers@63-224-80-234.hlrn.qwest.net) join
[2018-06-01 04:44:42] * somers_ (~somers@63-224-81-39.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-01 04:53:33] * somers_ (~somers@63-224-80-239.hlrn.qwest.net) join
[2018-06-01 04:59:58] * somers__ (~somers@63-224-80-234.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-01 12:05:25] <somers_> Here's an audit escape for you: fsync(2) is auditted in the fm class, but aio_fsync(2) isn't auditted at all.
[2018-06-01 12:05:35] <somers_> those two should both be in the same class
[2018-06-01 12:06:22] <somers_> Ditto with aio_mlock
[2018-06-01 16:09:06] <aniketp> Yeah, AUE_AIO_MLOCK and AUE_AIO_SYNC are not even present in the "ar_event" switch case in audit_bsm.c 
[2018-06-01 16:10:20] <aniketp> That is what I was referring to earlier, even though there are more than 500 syscalls in init_sysent.c, very few have actually been converted to audit events @somers_  
[2018-06-01 16:11:00] <somers_> Some of them seem to be intentionally not auditted.  I don't think aio_sync is among those.
[2018-06-01 16:11:16] <aniketp> Why would that be @somers_ ?
[2018-06-01 16:12:37] <somers_> Many syscalls use AUE_NULL as their audit events
[2018-06-01 16:12:54] <somers_> aio_fsync has an audit event: AUE_AIO_FSYNC.  But that event isn't defined in audit_events
[2018-06-01 16:13:03] <aniketp> Is there something about asynchronous I/O that does not make them worthy of being audited.
[2018-06-01 16:13:03] <aniketp> I guess there is a possibility that many more such syscalls can be converted to audit events. They could not be just because there are so many of them
[2018-06-01 16:13:45] <somers_> Nope.  aio_fsync is just like fsync.  If one is auditted then so should the other.  aio_error and aio_return are different, though.  Those aren't worth auditting.
[2018-06-01 16:26:27] <aniketp> Btw @somers_, I wasn't able to get revoke(2) to be audited in success mode. I tried looking up at how to create a pseudo terminal and it looked like a syscall, posix_prompt(2) does it. Would that be the right way to audit it?
[2018-06-01 16:26:27] <aniketp> Although, I'm still not sure how I'd proceed after that
[2018-06-01 16:27:09] <aniketp> SOrry posix_openpt(2)
[2018-06-01 16:27:45] <somers_> That, or openpty
[2018-06-01 17:35:53] <aniketp> @somers_, rename(2) and renameat(2) are in both file-create and file-delete. So no need to test them in file-delete too, right?
[2018-06-01 17:36:34] <aniketp> That brings the total number of tests in file-delete to 6 (if excluding rename(2))
[2018-06-01 17:41:12] <aniketp> Although I think it wouldn't hurt to test it at one more place if it matters in both file-create and file-delete
[2018-06-01 17:41:36] <aniketp> @somers_: https://reviews.freebsd.org/D15647  {open(2) is also in this audit class}
[2018-06-01 17:46:15] <somers_> I just remembered one thing: Kyua can run tests in parallel (though by default it doesn't).  Some tests use global resources, and would get screwed up if multiple test cases run in parallel
[2018-06-01 17:46:33] <somers_> auditd is a global resource, so you need to mark all of your tests as exclusive, so they don't run in parallel
[2018-06-01 18:41:51] <aniketp> @somers_ would that be through a test program metadata?
[2018-06-01 18:46:15] <somers_> I think it can be done on the test program, or on individual test cases
[2018-06-01 19:03:20] <aniketp> Well, doing it for all test cases would be repetitive, is there some test.metadata which I can include in the Makefile
[2018-06-01 19:03:27] <aniketp> @somers_ 
[2018-06-01 19:13:45] <somers_> I think so.  Check the man pages
[2018-06-01 19:21:01] <aniketp> @somers_ something like this? "TEST_METADATA+= is_exclusive="true""
[2018-06-01 19:21:13] <aniketp> I found this in one of the kyua releases
[2018-06-01 19:21:28] <somers_> yeah
[2018-06-01 19:24:39] <aniketp> @somers_ updated..
[2018-06-01 21:52:05] <aniketp> Hi @somers_, I was able to get revoke(2) be audited in success mode using openpty(3), so do I need to destroy that pseudo terminal myself? I had two file descriptors, "master" and "aslave"
[2018-06-01 21:53:36] <somers_> Yes.  Close it just like any other file descriptor.
[2018-06-01 21:55:58] <aniketp> Okay. Also I forgot one thing, in syscalls like ftruncate(2) for example, I forgot to close the file-descriptor too
[2018-06-01 21:56:25] <aniketp> I guess I'll update that in the next revision
[2018-06-01 22:44:30] <aniketp> @somers_ Here's the file-close test program: https://reviews.freebsd.org/D15650
[2018-06-02 14:30:39] <aniketp> Hi @somers_, did you have a look at the latest differential?
[2018-06-02 15:05:21] <aniketp> @somers_, fc was file-create, which was the first differential
[2018-06-02 15:05:37] <aniketp> File close is cl
[2018-06-02 15:08:53] <somers_> ok
[2018-06-02 15:39:57] <aniketp> Also, @somers_, I tried auditing closefrom(2) but it looked like it was being audited as close(2). Although I'll try auditing it using syscall(2) [Just like I did for open(2)]
[2018-06-02 15:47:02] <aniketp> Wait, it did!. I might have done something wrong earlier. I'll add the tests
[2018-06-02 15:47:02] <aniketp> Also, @somers_, I didn't understand what you meant about no magic numbers, I had to give snprintf() a fixed length so I randomly chose one. Woudl you suggest something else? 
[2018-06-02 15:47:40] <somers_> Yeah, but you hardcoded "60" or someplaces "80" in the snprintf call.  That's a no-no.  Better to use sizeof(destination).
[2018-06-02 15:48:35] <aniketp> Okay, will do that
[2018-06-02 15:50:13] <aniketp> Also, about malloc(2), I had to do something to initialize the ptyname pointer. So I thought about assigning it a byte of memory otherwise the compiler keeps complaining, @somers_ 
[2018-06-02 15:50:39] <somers_> Yeah, the compiler was complaining because you were writing to uninitialized memory.
[2018-06-02 15:50:56] <somers_> You still are, because you're only mallocing 1 byte, but openpty is doubtlessly writing more than that.
[2018-06-02 15:55:24] <aniketp> So @somers_ you mean I should allocate enough memory so that openpty(3) doesn't overflow?
[2018-06-02 15:55:24] <aniketp> Also, any way I can test failure mode of closefrom(2)? It looks like passing even the negative integers or the "SIZE_MAX" returns success.
[2018-06-02 15:55:41] <aniketp> How much memory should be enough?
[2018-06-02 15:55:58] <somers_> closefrom returns a void, which means it can never fail
[2018-06-02 15:56:30] <somers_> openpty's man page doesn't say, so you'll have to figure it out.
[2018-06-02 16:10:58] <aniketp> @somers_ for the snprintf "size" parameter, can I declare a buffsize initially to be used everytime?  
[2018-06-02 16:11:17] <aniketp> char extregex[BUFFSIZZE]
[2018-06-02 16:11:35] <somers_> Yeah, but the best way is to use sizeof.  That way you can't get screwed if you later change the size of the dest.
[2018-06-02 16:13:55] <aniketp> But I can't store the destination in a string first since some of it's elements are not yet known. 
[2018-06-02 16:13:55] <aniketp> for ex, : "snprintf(extregex, 60, "closefrom.*0x%x.*return,success", filedesc);" Here, how'll I know the size of "closefrom.*0x%x.*return,success" when there is that hex format identifier in there
[2018-06-02 16:14:27] <somers_> That's why you allocate sufficient space
[2018-06-02 16:14:39] <somers_> You know what the maximum length of the "%0x" will be
[2018-06-02 16:18:18] <aniketp> Okay, so I did it in this way, and it seemed to work. Will this be fine, @somers_ 
[2018-06-02 16:18:18] <aniketp> 	int filedesc = 12;
[2018-06-02 16:18:18] <aniketp> 	const char *regex = "closefrom.*0x%x.*return,success";
[2018-06-02 16:18:18] <aniketp> 	snprintf(extregex, sizeof(regex), regex, filedesc);
[2018-06-02 16:18:54] <somers_> NO!
[2018-06-02 16:19:04] <somers_> Sorry, CAPSLOCK was on
[2018-06-02 16:19:23] <somers_> The relevant size isn't the size of your format string, it's the size of your destination.  In this case, that's extregex.
[2018-06-02 16:20:08] <aniketp> Oh, I see. Then It should be easy. Btw I thought "extregex" was source buffer, @somers_ 
[2018-06-02 16:20:50] <somers_> How can it be the source buffer, if you haven't initialized it yet?
[2018-06-02 16:22:05] <aniketp> Yeah, I got confused with the meanings 😃
[2018-06-02 16:33:41] <aniketp> @somers_ I updated the diff, please have a look
[2018-06-02 17:25:24] <aniketp> @somers_ what should I pass as the argument to closefrom(2)? That argument shows up in the audit record so I used a sample value of filedesc=12 to prepare the regex
[2018-06-02 17:35:55] <aniketp> Ping @somers_ 
[2018-06-02 17:49:48] <somers_> How do you know that you don't already have any file descriptors open that are above 12?  You don't.
[2018-06-02 17:50:01] <somers_> You don't know how many files Kyua opened, for example.
[2018-06-02 17:51:43] <aniketp> So shall I give it some really large number then? Else any other number would have the same consequences as 12, right @somers_ ?
[2018-06-02 17:51:55] * somers_ (~somers@63-224-80-239.hlrn.qwest.net) quit Quit: Leaving
[2018-06-03 21:40:45] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) join
[2018-06-03 22:34:17] <aniketp> Hi @somers, when will you commit D15650? I have the next batch ready for review 
[2018-06-03 22:34:41] <somers> I'm build testing it now
[2018-06-03 22:36:55] <aniketp> Okay, and for the test program concerned with open(2) and openat(2), I'll go forward with only "file-read" and "file-write" audit classes, as you said that randomizing the audit classes is not a good idea. So will that be fine? @somers 
[2018-06-03 22:37:27] <somers> sure
[2018-06-03 22:43:42] <aniketp> Btw @somers, how is the build testing done, is it through the "make universe" command?
[2018-06-03 22:44:23] <somers> That's the most complete way to do it
[2018-06-03 22:44:59] <somers> "make universe" builds world + kernel for every architecture.  It also builds quite a few specialty kernels for certain embedded systems.
[2018-06-03 22:45:14] <somers> But for minor stuff like this, I take a shortcut and only build world for a few representative architectures
[2018-06-03 22:45:22] <somers> 64-bit and 32-bit, clang and gcc, BE and LE
[2018-06-03 22:49:50] <aniketp> Oh, so that is why you said earlier that "make universe" takes more than 8 or so hours on certain systems. So how frequent are such revisions which require the committer to do a "make universe", considering the amount of resource it can consume? @somers    
[2018-06-03 22:50:38] <aniketp> Like, I guess importing openbsm into FreeBSD src would definitely have required a make universe..
[2018-06-03 22:50:49] <somers> It's really a judgement call.  As you gain experience, you'll get a feel for which changes are more likely to break the build
[2018-06-03 23:03:43] <aniketp> Yeah, there are so many architectures defined here, https://github.com/freebsd/freebsd/blob/master/Makefile#L483
[2018-06-04 17:41:13] <aniketp> Hi @somers, shouldn't we use MACROS to generate tests when it's possible that more can be added in the future? But for open.c test program there isn't any more condition left..
[2018-06-04 17:42:34] <somers> I think they'll make it more maintaintable.  What happens if you need to make a change that affects every test case?  There's a jillion places you would need to modify
[2018-06-04 17:47:33] <aniketp> Although I like the idea here, https://github.com/freebsd/freebsd/blob/master/libexec/tftpd/tests/functional.c#L217. You've shortened test-cases definitions by generating IPv4 and IPv6 for every test case. I'll have to think how I can do that with open(2). Maybe generating the combinations of opening modes.. 
[2018-06-04 17:48:15] <somers> You could probably generate the success and failure tests from a single macro invocation
[2018-06-04 17:48:39] <somers> And it would probably be much shorter than the current test case boilerplate
[2018-06-04 17:48:51] <aniketp> But they take completely different set of arguments. i.e both success and failure modes
[2018-06-04 17:49:33] <aniketp> No, just the path is different. Yes I think it can be done. I'll try
[2018-06-04 17:52:25] <aniketp> Btw @somers, couldn't this have been a normal function? https://github.com/freebsd/freebsd/blob/master/libexec/tftpd/tests/functional.c#L64
[2018-06-04 17:55:49] <somers> If it were a normal function, it couldn't do sizeof(hdr)
[2018-06-04 17:55:58] <somers> There might be other reasons too; I don't remember exactly.
[2018-06-04 19:12:57] <aniketp> Btw @somers, since I'm generating the tests, I don't need "atf_tc_set_md_var(tc, "descr", "sample desc")", right?
[2018-06-04 19:13:31] <somers> If you want the tests to have a description, then you need to set it somehow
[2018-06-04 19:15:59] <aniketp> So @somers, does the atd_tc_set_md_var() support format specifiers, as I'll need to change the value of the flags in every test case
[2018-06-04 19:16:22] <somers> Dunno.  You'll have to check.
[2018-06-04 19:19:01] <aniketp> Yeah it did compile successfully, @somers 
[2018-06-04 19:19:19] <aniketp> Not sure how to check each test case's description, though
[2018-06-04 19:56:42] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) quit Remote host closed the connection
[2018-06-04 19:56:50] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) join
[2018-06-04 21:33:13] <aniketp> @somers I tried creating a macro for all tests of a particular opening flag here: https://pastebin.com/QejR9rQR. But was facing some issues
[2018-06-04 21:33:13] <aniketp> The tests compile but passing in any other flag apart from O_RDONLY, resulted in no test case being created. Also some tests don't behave as expected as well
[2018-06-04 21:38:58] <somers> Sounds like you've still got some work to do, then
[2018-06-04 22:12:24] <aniketp> @somers do I need to use O_WRONLY or can I simply use 0x0001 too? The later makes stuff easier
[2018-06-04 22:14:45] <somers> No, definitely don't assume a specific value for those flags
[2018-06-04 23:26:48] <aniketp> @somers Is there a way I can pass stringified "O_RDONLY" to the MACRO? I've been trying unsuccessfully for last hour
[2018-06-04 23:28:09] <somers> Firstly, MACRO is not an acronym.  Secondly, macro expansion is purely textual.  You can stringify something within the macro if you like.
[2018-06-04 23:31:00] <aniketp> But does it accept integers? I passed O_WRONLY as the argument and it didn't work. On the other hand, passing "0x0001" and then converting it into the integer before passing as flag worked. @somers 
[2018-06-04 23:31:40] <somers> integer has nothing to do with it.  Macros are purely textual.
[2018-06-05 01:06:31] <aniketp> Ping @somers, I'm not sure why it wasn't working earlier but this time I simply passed the flag, e.g "O_RDONLY | O_CREAT" without messing with strings or integers and it did work as expected. Please have a look at the updated diff
[2018-06-05 01:07:53] <aniketp> Also, is it recommened that I mention something like, "Borrowed from /libexec/tftpd/tests/functional.c" since I kind of took idea from your macro declarations
[2018-06-05 01:14:06] <somers> No need to credit the tftpd stuff
[2018-06-05 01:22:09] <aniketp> @somers I thought about matching with the event specific regex for each test case. But I decided against it since I thought fileforaudit was already doing its job. (I questioned this decision in the earlier version but that implementation was no biggie so I just included extra regex). This would need additional arguments to be passed to the macro so I didn't do it. 
[2018-06-05 01:22:09] <aniketp> However, if its recommended then I can add-back the regexes again, no issue
[2018-06-05 01:22:42] <somers> It would certainly improve the test coverage
[2018-06-05 02:09:01] <aniketp> Also, @somers, after D15657, would it be right to create differential for execve(2), fexecve(2). Considering this is their success regex: "{f?}execve.*sample-argument.*Unknown error: 201"
[2018-06-05 02:09:46] <aniketp> As we were getting unknown error on successful invocation of both
[2018-06-05 02:31:49] <somers> Sure.  You can submit a change for them.
[2018-06-05 18:33:12] <aniketp> Hi @somers, how should I display the flags in form of symbols? Replacing 0x%4x with simple %s does not even build the tests
[2018-06-05 18:35:09] <aniketp> Would a "%d" format do?
[2018-06-05 18:43:10] <somers> You need to stringify the argument
[2018-06-05 20:42:55] <aniketp> Btw @somers, can you please accept D15657 too? (Even though it has already been committed). I needed to mention that in my Project-Wiki. 
[2018-06-05 20:43:16] <aniketp> It landed without being accepted
[2018-06-05 20:43:31] <somers> oops, I forgot a step.  No worries, though.
[2018-06-05 20:50:47] <aniketp> Okay. @somers here is the complete "ex" audit class https://reviews.freebsd.org/D15669 😃
[2018-06-05 20:52:38] <somers> What's up with the double // notation?
[2018-06-05 20:55:09] <aniketp> Which // ? In differential revisions?
[2018-06-05 20:55:22] <somers> In the revision summary
[2018-06-05 20:55:53] <aniketp> Oh, that is used for italicising the word @somers 
[2018-06-05 20:56:58] <aniketp> @somers Here: https://secure.phabricator.com/book/phabricator/article/remarkup/#basic-styling
[2018-06-05 21:05:46] <aniketp> Btw @asomers, how are you able to identify the presence of //? Isn't it processed by the phabricator first?
[2018-06-05 21:05:53] <aniketp> @somers 
[2018-06-05 21:06:53] <somers> I'm just looking at the email notification
[2018-06-05 21:17:18] <aniketp> Btw @somers, while creating the differential via arcanist, it shows me a template to fill up the basic info but is not able to identify the repository, do I need to add some configs for that?
[2018-06-05 21:19:10] <somers> what do you mean "not able to identify the repository"?  Is there an error message?
[2018-06-05 21:22:07] <aniketp> No, not an error message but there is an option to specify "src", "port" or "docs" via the web interface. But no such option comes up while creating the diff via arcanist. It passes the "Linting" test but can't pass the "Unit tests" and shows a "Warning: No repository detected for this project"
[2018-06-05 21:22:41] <somers> Are you using svn or git?
[2018-06-05 21:22:52] <aniketp> I'm using the git fork
[2018-06-05 21:22:55] <aniketp> @somers 
[2018-06-05 21:23:11] <aniketp> A clone of my own fork of FreeBSD
[2018-06-05 21:23:12] <somers> Then you'll have to debug arcanist on your own.  I use SVN.
[2018-06-05 21:24:15] <aniketp> Okay. I think in the base .arcconfig in the git repository, I need to add a "repository.callsign" for it to work. I'll try that in the next revision
[2018-06-05 21:24:33] <somers> The svn repo's .arcconfig file has no such field.
[2018-06-05 21:25:23] <aniketp> Yeah, @somers. But here it shows how to detect the repository: https://secure.phabricator.com/book/phabricator/article/arcanist_new_project/#advanced-arcconfig
[2018-06-05 21:25:58] <aniketp> I guess it's not configured cause FreeBSD has 3 repositories
[2018-06-05 21:26:34] <aniketp> But since I'll only work with "src". I'll try to add it in my own clone to see if it works
[2018-06-05 21:49:37] <aniketp> Btw @somers, why was the MFC after 2 weeks in every revision that I've created?
[2018-06-05 21:49:47] <somers> personal preference
[2018-06-05 21:50:48] <aniketp> Like I know it means "Merge From Current" (hopefully). But I couldn't understand it's literal meaning. What is being merged where?
[2018-06-05 21:51:30] <somers> to stable/11
[2018-06-06 00:05:05] <aniketp> Hi @somers, any updates on the revision D15669?
[2018-06-06 00:05:55] <somers> I haven't read it yet
[2018-06-06 00:07:49] <aniketp> Okay
[2018-06-06 03:33:47] * aniketp (~aniketp41@159.65.149.37) join
[2018-06-06 17:31:07] <aniketp> Hi @somers, by fixing the bug you meant setting the "ar_errno" for AUE_EXECVE as something equivalent to successful in the audit_bsm.c, right?
[2018-06-06 17:31:07] <aniketp> But afaicu, it would require me to check that execve, succeded
[2018-06-06 17:31:36] <somers> Yeah.
[2018-06-06 19:42:44] * somers_ (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) join
[2018-06-06 20:00:53] <aniketp> @somers I had a doubt, why are there two (kind of) identical functions for execve(2) argument tokens
[2018-06-06 20:00:53] <aniketp> Here: https://github.com/freebsd/freebsd/blob/86ab05f953ab74b480bd2f0bbac3900ba1d7f80a/sys/security/audit/bsm_token.c#L1314
[2018-06-06 20:00:53] <aniketp> And here: https://github.com/freebsd/freebsd/blob/86ab05f953ab74b480bd2f0bbac3900ba1d7f80a/sys/security/audit/bsm_token.c#L1338
[2018-06-06 20:01:13] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) quit se.hub irc.underworld.no
[2018-06-06 20:01:40] <aniketp> Both a function apart. Although in bsm_audit.c, it looks like the first instance is being called
[2018-06-06 20:01:45] <aniketp> @somers_ 
[2018-06-06 20:03:20] <somers_> Look up to line 1283
[2018-06-06 20:37:41] <aniketp> Okay, so both are for either KERNEL and _KERNEL. Btw @somers_, what is the difference b/w the two kernels?
[2018-06-06 20:37:41] <aniketp> Also, @somers_, I think I understand how the errno conversion takes place. Kernel returns a normal errno which is stored in "ar_errno" of "struct audit_record". For ex, EPERM, ENOENT. The function au_errno_to_bsm(), simply looks up these errno in the bsm_errno array and returns the corresponding bsm_errno value, e.g BSM_ERRNO_EPERM, BSM_ERRNO_ENOENT. 
[2018-06-06 20:37:41] <aniketp> For our case, I think we need to add these two line in the case (AUE_EXECVE) part:
[2018-06-06 20:37:41] <aniketp> 1) ar->ar_errno = 0;
[2018-06-06 20:37:41] <aniketp> 2) ar->ar_retval = 0;
[2018-06-06 20:37:41] <aniketp> Then I think it should work. What do you say @somers_?
[2018-06-06 20:37:41] <aniketp> Currently, since execve(2) doesn't return anything in successful invocation, the "ar->ar_errno" is empty. 
[2018-06-06 20:46:39] <somers_> No, both versions are not for kernel mode.  Look at line 1331.
[2018-06-06 20:50:26] <somers_> Yes, I think that's the right general idea.  But you need to ensure that you aren't overwriting the errno from a genuine error.
[2018-06-06 20:51:38] <aniketp> Oh, yes. I forgot to include the conditional check for that. I'll include that too
[2018-06-06 20:55:09] <aniketp> @somers_ right, so I had missed the #else there. So are the functions separated for, "user-space" or the "kernel" mode invocation?
[2018-06-06 20:55:34] <somers_> yes
[2018-06-06 21:34:04] <aniketp> Btw @somers_, bsm_errno's be_bsm_errno is a "int" but the function au_errno_to_bsm returns an "unsigned char" here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_errno.c#L54
[2018-06-06 21:34:26] <aniketp> https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_errno.c#L721
[2018-06-06 21:34:38] <aniketp> How does that work?
[2018-06-06 21:40:01] <somers_> If WARNS were 6, the compiler would probably complain
[2018-06-06 21:40:23] <somers_> But be_bsm_errno is only set one place, in bsm_lookup_errno_bsm, and it's set from a u_char.  So it can't actually overflow.
[2018-06-06 21:43:38] <aniketp> Okay, @somers_, but I found another workaround that does not involve me storing the return values. I'll create a revision just now
[2018-06-06 21:43:57] <aniketp> Hopefully that would work
[2018-06-06 22:59:08] <aniketp> Hi @somers_, I had created a diff about the above issue, https://reviews.freebsd.org/D15681. Please have a look at it..
[2018-06-06 23:03:24] <somers_> k
[2018-06-07 00:08:29] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-06-07 00:08:40] * mpts (~mpts@boston-packets.hackerspace.pl) quit Ping timeout: 360 seconds
[2018-06-07 00:17:05] <aniketp> Btw @somers_ what else could I use for a sure shot check whether execve(2) succeded? At that point in the code, I only have access to all tokens of the audit record.
[2018-06-07 00:17:28] <somers_> Can you rule out that it failed?
[2018-06-07 00:19:17] <aniketp> I observed that there wasn't anything deterministic in the audit record. 
[2018-06-07 00:19:17] <aniketp> I can rule out that it failed in the test program. If the code beyond execve(2) executes then it obviously failed. if it didn't then it succeded.
[2018-06-07 00:19:17] <aniketp> I mean if the new process overwrites the calling one then it obviously succeeded. But I can't think of a way to do that within the bsm_audit.c
[2018-06-07 00:19:22] <aniketp> @somers_ 
[2018-06-07 00:19:40] <somers_> I mean, can you rule out that it failed from within the kernel?
[2018-06-07 00:23:34] <aniketp> @somers_ not sure if I understood you correctly, do you mean like checking its source code? 
[2018-06-07 00:24:09] <somers_> Read the source.  Figure out what happens on failure.  If that doesn't happen, then the call must've been successful.
[2018-06-07 00:24:56] <aniketp> Oh, so you mean check all the possible ERRNOs that can be returned (that are mentioned in the source) @somers_ 
[2018-06-07 00:25:35] <somers_> something like that
[2018-06-07 00:25:42] <aniketp> Okay will do that
[2018-06-07 02:17:17] <aniketp> Hi @somers_, I had been looking at the code of kern_exec.c and tracked all the Errnos that were being returned from various functions. And verified that each one was present in the bsm_errno.c in sys/security/audit. But it was mentioned in the comment description (and from code flow) that do_execve() might never return.
[2018-06-07 02:17:17] <aniketp> So it doesn't look to me that return of execve() would ever mean anything apart from successful return if "Unknown error" shoes up. As all possible errnos are present in the list  
[2018-06-07 02:17:36] <aniketp> *shows up
[2018-06-07 03:17:11] <aniketp> Ping @somers_ 
[2018-06-07 13:40:19] <somers_> Good.  But better yet would be if you used a sentinel value when exeve starts
[2018-06-07 13:40:56] <somers_> You could set ar_errno to something that will never, ever get used as a real errno.  Then, when completing the audit record, the presence of that errno would indicate that execve was successful.
[2018-06-07 20:07:04] <aniketp> But @somers_, isn't the only errno which suggests successful exit is 0?
[2018-06-07 20:07:51] <aniketp> I guess some other value for errno would match up with the ones in the list or would again return "Unknown error" 
[2018-06-07 20:08:00] <somers_> That's not how errno works
[2018-06-07 20:08:08] <aniketp> Oh, wait. So you mean setting errno from our program?
[2018-06-07 20:08:13] <somers_> errno only gets set on an unsuccessful return.
[2018-06-07 20:08:47] <somers_> No.  I'm suggesting that you set ar_errno to a sentinel value when execve _starts_.  When it finishes, the presence of that sentinel will indicate success.
[2018-06-07 20:12:45] <aniketp> I still couldn't understand what you meant 😕. Like setting "ar_errno" to some sentinel value in bsm_errno.c? But how does it know when the execve starts or ends.. @somers_ 
[2018-06-07 20:13:12] <somers_> You need to figure out that part.
[2018-06-07 21:26:48] <aniketp> Hi @somers_, I figured that since errno is a global value, we can set errno to some sentinel value as you suggested in our test program, then in the bsm_audit.c, if that errno is set then change it to 0 (since that errno was not modified hence the execution was successful)? Will this work
[2018-06-07 21:28:19] <somers_> No.  I'm not talking about fixing the tests; I'm talking about fixing the audit record so it will always show the correct status for execve
[2018-06-07 21:30:34] <aniketp> So, if execve starts, that means setting an errno value in kern_exec.c? Then if execve(2) doesn't return so the value would not change?
[2018-06-07 21:30:38] <aniketp> @somers_ 
[2018-06-07 21:31:11] <somers_> yeah, something like that
[2018-06-07 21:32:20] <aniketp> So I think we should simply set it to 0. Cause, if it 0 then either execve(2) truly succeeded or it was never modified. Both of which mean the execution was successful, @somers_ 
[2018-06-07 21:32:46] <aniketp> Then we don't need to change anything in the bsm_audit.c
[2018-06-07 21:33:22] <somers_> Ok.  Will that effect other syscalls than just execve?
[2018-06-07 21:48:11] <aniketp> @somers_ I don' think so. Only syscalls in that file are execve(2) and fexecve(2) [And we need to fix both of them]
[2018-06-07 21:48:11] <aniketp> Also, setting errno to zero should not cause any major harm as execve will create a separate process so we don't care about what happened before it (if there was any failure or not)
[2018-06-07 21:48:48] <somers_> No, it doesn't create a separate process.  Only fork, vfork, and posix_spawn do that.  execve changes the program being run by the current process
[2018-06-07 21:49:33] <aniketp> Yeah, sorry I meant that
[2018-06-07 21:51:31] <aniketp> I meant like, overlaying the calling process. So @somers_, I should simply add errno = 0 in the beginning of sys_execve() function?
[2018-06-07 21:51:48] <somers_> No, you want to set ar_errno, not errno
[2018-06-07 21:53:21] <aniketp> But ar_errno is a member of "struct audit_record". How will that be transmitted across? I see that ar pointer is initialized here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L480
[2018-06-07 21:53:30] <aniketp> @somers_ 
[2018-06-07 21:54:09] <somers_> You will have to set ar_errno either when the audit record is constructed, or when execve starts
[2018-06-07 22:01:37] <aniketp> So @somers_, am I not doing exactly that in D15681? Like, if there are no errors then set it to 0, in the switch case. Infact that function is basically intializing the BSM record so aren't we setting errno to 0 at the right place already?
[2018-06-07 22:02:59] <somers_> No, it isn't initializing the audit record.  It's reading the audit record.  You need to figure out where ar_errno gets initialized
[2018-06-07 22:03:36] <aniketp> Okay. It that part of the code would be in a different directory, right @somers_ ?
[2018-06-07 22:03:59] <aniketp> I think maybe in contrib/openbsm maybe?
[2018-06-07 22:04:40] <somers_> I don't know
[2018-06-07 22:04:43] <somers_> Learn to use cscope
[2018-06-07 22:33:10] <aniketp> Yeah I started using it yesterday when working on the execve(2)'s ar_errno issue. 😃. I'll try to figure out where audit record is initialized
[2018-06-07 23:31:38] <aniketp> Hi @somers_, I think I figured out where all the big stuff happens. Within the same directory there is a source file audit_worker.c, where the function audit_worker() initializes the kernel audit structure "struct kaudit_record", and then it kind of waits for some records to show up in the global queue. If it finds some, transfers them to a local thread queue and processes them one by one. The processing is done by the function, "audit_worker_process_record(ar)" which takes the kernel record and calls our kaudit_to_bsm() function and then writes the obtained BSM form of the audit record to either trail files or auditpipe. 
[2018-06-07 23:31:38] <aniketp> So I think I can check if "ar->kar.ar_event" (where struct kaudit_record *ar) is either AUE_EXECVE or AUE_FEXECVE, then set ar->kar.ar_errno = 0 in one of those functions in audit_worker.c
[2018-06-07 23:32:45] <somers_> that sounds promising
[2018-06-08 00:13:02] <aniketp> Btw @somers_ I had an issue with where exactly I should initialize the ar_errno and ar_retval. Here https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_worker.c#L440 , the kaudit_record pointer is created, but not initialized yet.
[2018-06-08 00:13:02] <aniketp> It looks to me that in the two while() loops within that function, audit records are first extracted one by one out of the queue and inserted in the "ar_worklist", then in the second while loop, all records are processed and freed till "&worklist" is empty.
[2018-06-08 00:13:02] <aniketp> So I couldn't find the best place to initialize the ar_errno. Would that be between the while loops, considering "ar" might have some space allocated to it by then?
[2018-06-08 00:21:30] <aniketp> Or maybe we can allocate sufficient memory to "ar" but then again the question is how much exactly would be sufficient
[2018-06-08 00:35:16] <aniketp> Ping @somers_ 
[2018-06-08 00:37:21] <aniketp> I think at every step in the function, they are playing around with the pointers. Don't think there is a way to normally set the "ar_errno" to 0
[2018-06-08 00:44:38] <somers_> No, I think you're way off.  audit_worker looks like it's responsible for sending complete audit records to userland.  Something else must be initializing them.
[2018-06-08 01:04:24] <aniketp> Yeah, but it picks up the audit records from a global audit_q. There is an extern declaration of audit_q in audit_private.h and it is initialized in audit.c. I think that is where the records get initialized, I just need to find it @somers_  
[2018-06-08 01:11:13] <aniketp> @somers_ here I think: https://github.com/freebsd/freebsd/blob/82974662ad9f9ece5f8374d2c898e83bd03aece9/sys/security/audit/audit.c#L244
[2018-06-08 01:15:45] <aniketp> @somers_, would it make sense to initialize the ar_errno after this? 
[2018-06-08 01:15:45] <aniketp> "ar->k_ar.ar_magic = AUDIT_RECORD_MAGIC;"
[2018-06-08 01:52:44] <aniketp> Btw @rwatson, @somers_ should it not be 0x0000000000800000ULL here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_private.h#L278
[2018-06-08 01:52:59] <aniketp> Instead of 0x0000000000400000ULL
[2018-06-08 03:04:28] <somers_> good catch!
[2018-06-08 03:04:36] <somers_> Is that symbol used anywhere in userland?
[2018-06-08 03:06:19] <aniketp> Yeah, here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L681
[2018-06-08 03:06:38] <somers_> that's a kernel file
[2018-06-08 03:07:08] <aniketp> Oh, yes. Haven't encountered it in Userspace yet
[2018-06-08 03:07:41] <somers_> Because if it is part of the public API, then it can't be changed
[2018-06-08 03:08:18] <aniketp> No, actually I guess there are only 3 instances of that arg (Using the inbuilt Github search)
[2018-06-08 03:08:36] <somers_> Go ahead and open a bug.  Looks like it was introduced by r168688
[2018-06-08 03:08:43] <aniketp> sys/security/audit/audit_arg.c
[2018-06-08 03:08:43] <aniketp> sys/security/audit/audit_private.h
[2018-06-08 03:08:43] <aniketp> sys/security/audit/audit_bsm.c
[2018-06-08 03:11:32] <aniketp> @somers_ was it intentional? Naming it '4' instead of '8'?
[2018-06-08 03:11:51] <somers_> No.  Looks like a copy/paste error.  Check r168688
[2018-06-08 03:12:05] <aniketp> Yeah, I checked that, the review by csjp
[2018-06-08 03:13:56] <aniketp> Okay will open the bug.
[2018-06-08 03:13:56] <aniketp> Btw about ar_errno, I think it should be placed here: https://github.com/freebsd/freebsd/blob/7c423a65c91bf1b002e8f1f6f0f8bfa9beefcc9c/sys/security/audit/audit.c#L243
[2018-06-08 03:14:11] <aniketp> @somers_, while constructing the audit record
[2018-06-08 03:15:12] <aniketp> And I think we don't need to specify ar_retval as it is handled by the value of "error" here: https://github.com/freebsd/freebsd/blob/7c423a65c91bf1b002e8f1f6f0f8bfa9beefcc9c/sys/security/audit/audit.c#L691
[2018-06-08 03:15:24] <somers_> When does that function get called relative to the start of a syscall?
[2018-06-08 03:21:33] <aniketp> @somers_ its after the syscall. Basically, they receive a syscall via audit_syscall_enter(), use the syscall code to get the audit event, use the event to get its audit class, then decide if it is supposed to be audited or not. If so, then they call audit_new(), which allocates the "audit_record_zone" which creates the constructor and destructor by initializing basic values in the audit record.
[2018-06-08 03:21:33] <aniketp> Then here the ar_event value is assigned: https://github.com/freebsd/freebsd/blob/7c423a65c91bf1b002e8f1f6f0f8bfa9beefcc9c/sys/security/audit/audit.c#L406
[2018-06-08 03:21:42] <aniketp> rest of the process is normal
[2018-06-08 03:22:07] <somers_> after the syscall exits?  After it begins?
[2018-06-08 03:27:24] <aniketp> After it begins, before it exits
[2018-06-08 03:27:24] <aniketp> After the exit of a syscall, this function "audit_syscall_exit" checks the return status, updates ar_errno and calls audit_commit() to commit the syscall along with the return status
[2018-06-08 03:27:27] <aniketp> @somers_ 
[2018-06-08 03:28:19] <aniketp> So, if execve(2) did not exit, or did not have any return status, it should leave the earlier ar_errno unchanges
[2018-06-08 03:28:25] <aniketp> *unchanged
[2018-06-08 03:28:50] <somers_> yep, sounds right
[2018-06-08 03:31:56] <aniketp> And I think, I need to update the retval, else if "errno" is 0, retval is picked from here: https://github.com/freebsd/freebsd/blob/7c423a65c91bf1b002e8f1f6f0f8bfa9beefcc9c/sys/security/audit/audit.c#L694
[2018-06-08 03:31:56] <aniketp> and we don't know what value might be there if execve(2) did not return. Better to set it to 0 as it would be updated by "returning" syscalls anyway
[2018-06-08 04:36:29] <aniketp> Btw @somers_ is it worth creating atf-sh(3) test cases for checking the integrity of audit_control config file? Like the allowed values are set or not.
[2018-06-08 04:36:29] <aniketp> And basic smoke tests for audit viewer applications like praudit(1) and auditreduce(1)?
[2018-06-08 04:45:17] * somers_ (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) quit Remote host closed the connection
[2018-06-08 04:47:15] * somers_ (~somers@63.224.80.239) join
[2018-06-08 04:53:49] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) join
[2018-06-08 04:54:52] * somers_ (~somers@63.224.80.239) quit hub.efnet.us hub.dk
[2018-06-08 15:22:38] <somers> tests for praudit and auditreduce would be great.  But I don't think we should be using ATF to sanity check /etc/security/audit_control.  Sysadmins can do with that as they like.  If it is to be sanity checked, then it should be sanity-checked at runtime by auditd(8)
[2018-06-08 18:21:30] <aniketp> Okay, btw @somers, to check if the fix for execve(2) is legitimate, should I build the world again or would building the kernel do?
[2018-06-08 20:07:58] <aniketp> @somers, I did a {build,install}kernel only and installworld without building the world initially. The changes did not take place as expected
[2018-06-08 20:08:36] <aniketp> Would building the world make any difference?
[2018-06-08 20:59:59] * somers (~somers@2602:3f:e050:ef00:e23f:49ff:fe44:d7b6) quit Ping timeout: 252 seconds
[2018-06-08 21:06:46] * somers (~somers@63-224-80-22.hlrn.qwest.net) join
[2018-06-08 21:07:08] <somers> No, building world shouldn't make a difference
[2018-06-08 21:37:25] <aniketp> @somers, the "Unknown error" persists even on rebuilding the kernel
[2018-06-08 21:42:10] <somers> then I guess you've got some more work to do
[2018-06-08 21:45:40] <aniketp> Okay. 
[2018-06-08 21:46:32] <aniketp> Meanwhile can we review the other test cases, e.g the ones in file-attribute-access/modify, network, IPC and ioctl?
[2018-06-08 21:46:35] <aniketp> @somers_ 
[2018-06-08 21:46:41] <aniketp> @somers 
[2018-06-08 21:49:06] <somers> Yep
[2018-06-08 21:56:44] <aniketp> Okay, also next time while trying to check if my change works or not, will this order by fine: "make -j kernel" > "reboot" > "mergemaster -p -U" > "make installworld" > "mergemaster -U" > "reboot"? @somers 
[2018-06-08 21:57:15] <somers> -j takes an argument, and you don't need to installworld if you didn't build it.
[2018-06-08 21:57:20] <somers> However, you _do_ need to installkernel
[2018-06-08 21:57:52] <somers> So it's more like "make -j4 -DKERNFAST buildkernel; sudo make installkernel; sudo reboot"
[2018-06-08 21:58:18] <somers> The KERNFAST part can only be used if you've recently had a successful build
[2018-06-08 22:18:13] <aniketp> Yeah, by make -j kernel I meant: make -j4 buildkernel installkernel. 
[2018-06-08 22:18:13] <aniketp> Now I accidentally rebuilt the world and it's consuming so much of my main machine's CPU and ram. Now I'll have to wait till it finishes
[2018-06-08 22:25:24] <aniketp> Also, @somers, to test auditreduce(1) and praudit(1) I'll need to have a trail file. So would it be right to have an "input" sample audit-trail in the same directory and access it using "atf_get_srcdir"
[2018-06-08 22:25:49] <somers> Yep.
[2018-06-08 22:25:57] <somers> But let's get all the syscalls covered before we move onto that.
[2018-06-08 22:26:06] <aniketp> Okay
[2018-06-08 22:57:09] <aniketp> Btw @somers, have a look: header,123,11,execve(2),0,Fri Jun  8 22:56:49 2018, + 154 msec,exec arg,wc,-l,path,/usr/bin/wc,attribute,555,root,0,77,828753,1832032,subject,root,root,0,root,0,1305,1183,53078,10.0.2.2,return,success,0,trailer,123,
[2018-06-08 23:00:07] <somers> nice!
[2018-06-08 23:00:30] <aniketp> No it didn't work actually :P
[2018-06-08 23:01:46] <aniketp> Since the build time was quite fast so I just played around with the audit_commit() function to debug the issue. Just to check if my build was actually working.
[2018-06-08 23:01:46] <aniketp> I made it so that no record would ever fail 
[2018-06-08 23:10:01] <aniketp> @somers I tried setting ar_errno at various places and none of them work correctly. I think the issue is with audit_syscall_exit(). When it doesn't get any return value it simply passes "error".
[2018-06-08 23:10:38] <aniketp> For _exit() they have explicitely set the return value to 0 here: https://github.com/freebsd/freebsd/blob/a8cb340144294b1db646271aba2923d36245b030/sys/kern/kern_exit.c#L311
[2018-06-08 23:11:57] <aniketp> Or maybe an expect_fail() would be a better thing to do since the feature with _exit() has not been implemented for execve() too
[2018-06-08 23:11:59] <somers> Well, can you prove that there's no other way to get no return value besides a successful call to one of the exec syscalls?
[2018-06-08 23:15:14] <aniketp> Yes, of all the errnos that were being returned in the sys_execve() of "kern_exec.c", none were absent in the errno lookup table. Suggesting that if the lookup failed then nothing was returned actually.
[2018-06-08 23:15:14] <aniketp> Also, by common intuition. A general "ex" audit class shows "Unknown Error" almost everytime I type any command in the shell. Now if all of them failed then I can't see how the system works without execve(2) ever executing successfully 
[2018-06-08 23:15:17] <aniketp> @somers 
[2018-06-08 23:16:32] <aniketp> I guess the very first update of the D15681 should actually work
[2018-06-08 23:16:37] <aniketp> I'll try that out now
[2018-06-08 23:18:15] <somers> It's not enough to see that sys_execve never sets the unknown errno.  You have to know that there are no other code paths, including from other syscalls, that lead to audit_syscall_exit not getting no return value
[2018-06-08 23:20:49] <aniketp> But @somers, why do I need to check other syscall codes for execve(2). Isn't only the source code for execve relevant here
[2018-06-08 23:21:21] <somers> It's whatever code paths lead to the place where you infer a successful exit status
[2018-06-08 23:27:19] <aniketp> But @somers, even if the exit condition due to some other syscall was successful, it wouldn't change the errno since we're basically setting it to 0 for execve(2) if it returned nothing  
[2018-06-08 23:28:47] <somers> I'm asking you to prove that, at the place where you infer that the syscall was a successful execve, there's no other code path that could've resulted in an unknown return status
[2018-06-08 23:34:11] <aniketp> Right, so I'm inferring the successful execution of execve(2) at the audit_bsm.c switch case event where "case AUE_EXECVE" eliminates every other possibility of returning Unknwon Error apart from the case when ar_event = AUE_EXECVE. And since we know that execve(2) never returns any unknown errnos, we can say that if the unknown errno was returned for AUE_EXECVE, it was due to no return status. @somers  
[2018-06-08 23:36:13] <somers> And do you know that nothing other than sys_execve will ever set AUE_EXECVE ?
[2018-06-08 23:39:24] <aniketp> Like, "sys_execve" calls other functions within kern_exec.c which all can set AUE_EXECVE (In fact, the issue of execve(2) not returning anything is due to do_execve() function). But I checked that all the functions invoked by sys_execve() return a bunch of errnos which were already present in the errno list 
[2018-06-08 23:39:27] <aniketp> @somers 
[2018-06-08 23:45:43] <somers> Ok.  And how is the return value communicated to audit_syscall_exit?  Through a variable that's always defined, or does something have to add a return value token to the audit trail?
[2018-06-08 23:50:06] <aniketp> I think here it is done: https://github.com/freebsd/freebsd/blob/a38d172e9526735ba5eac479800255054be078de/sys/kern/subr_syscall.c#L135
[2018-06-08 23:51:20] <aniketp> But I'm not sure what this piece of code means: "error = (sa->callp->sy_call)(td, sa->args);"
[2018-06-08 23:51:20] <aniketp> It looks to me that it's extracting the return status of every syscall and passing it to AUDIT_SYSCALL_EXIT(error, td)
[2018-06-08 23:51:23] <aniketp> @somers 
[2018-06-08 23:51:38] <somers> So sa->callp->sy_call returns this unknown errno in the case of exeve?
[2018-06-08 23:59:03] <aniketp> No, @somers, I don't think it returns anything. The "Unknown error" is probably due to the  BSM_UNKNOWN_ERRNO when it doesn't match anything in the table
[2018-06-08 23:59:38] <somers> It must return something, or else never return.
[2018-06-09 02:14:50] * aniketp (~aniketp41@159.65.149.37) join
[2018-06-09 15:09:38] <aniketp> Hi @somers, I tried the earlier method of looking up the table of errnos and if the lookup failed, assigning it a value of 0. It turns out, even after this condition. The "Unknown error" persists. That means the lookup didn't fail!
[2018-06-09 15:09:38] <aniketp> I created a function which does the lookup of "bsm_errnos" if successful returns 0 else 1. So on invoking this function from the switch case statement, I got 0. Which means the lookup didn't fail.
[2018-06-09 15:09:38] <aniketp> Also, to see which errno is matching, I passed ar_errno to ar_retval and in the audit record I got "return,success,4294967294" which is "-2"
[2018-06-09 15:10:20] <aniketp> Now how come the lookup is successful while it's value is not a positive integer is kind of confusing
[2018-06-09 20:00:57] <aniketp> Ping @somers, did you have a look at the D15709, about fa audit class?
[2018-06-09 21:35:37] <somers> not yet
[2018-06-09 21:36:41] <aniketp> Okay. Btw about execve(2). There is a whole lot of mystery that I need to figure out. It didn't work as expected when I added the errno lookup condition. 
[2018-06-09 21:37:08] <aniketp> Also, its returning an errno whose value is -2 :/
[2018-06-10 07:24:21] * somers (~somers@63-224-80-22.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-10 07:25:39] * somers (~somers@63.224.80.22) join
[2018-06-10 07:39:15] * somers (~somers@63.224.80.22) quit Read error: Connection reset by peer
[2018-06-10 07:41:57] * somers (~somers@63-224-80-22.hlrn.qwest.net) join
[2018-06-10 16:14:38] <aniketp> Hi @somers, is there a specific name for the master branch of FreeBSD src tree? Like, can be called something related to 12-CURRENT?
[2018-06-10 16:17:05] <somers> you can call it head, or 12-CURRENT, or just CURRENT
[2018-06-10 16:52:55] <aniketp> @somers I was thinking of adding them in batches so that it will be easier for reviewing. There are about 30 system calls in this class
[2018-06-10 16:53:44] <aniketp> Sorry 25
[2018-06-10 18:32:44] <aniketp> Ping @somers 
[2018-06-10 19:29:46] <somers> yeah, that's fine
[2018-06-10 20:31:29] <aniketp> Btw @somers I was having trouble with the test-case for praudit(1). Kyua always says that the exit status is not 0 for what looks like a legitimate command:
[2018-06-10 20:31:29] <aniketp> "atf_check -s exit:0 -o ignore praudit -r $(atf_get_srcdir)/trail"
[2018-06-10 20:31:29] <aniketp> Executing command [ praudit -r /root/test/./trail ]
[2018-06-10 20:31:29] <aniketp> Fail: incorrect exit status: 1, expected: 0
[2018-06-10 20:31:29] <aniketp> stdout:
[2018-06-10 20:31:29] <aniketp> 20,56,11,45000,0,1528649207,241
[2018-06-10 20:31:29] <aniketp> 40,auditd::Audit startup
[2018-06-10 20:31:29] <aniketp> 39,0,0
[2018-06-10 20:31:29] <aniketp> 19,56
[2018-06-10 20:32:02] <aniketp> Is there something wrong with my approach. I've tried variations but none of the praudit command success
[2018-06-10 20:32:08] <aniketp> *succeed
[2018-06-10 20:33:08] <aniketp> While changing it to exit:1 passes the test...
[2018-06-10 20:44:30] <aniketp> Hmm, on independent analysis. It looks like every praudit command is returning 1 as an exit status:
[2018-06-10 20:44:30] <aniketp> praudit -l trail > /dev/null; echo $? 
[2018-06-10 20:44:30] <aniketp> 1
[2018-06-10 21:13:40] <aniketp> Ping @somers, I created the diff from a separate branch. Did you try to apply the patch after one of my earlier unmerged diffs?
[2018-06-10 21:17:56] <somers> Oh, my bad.  I didn't "svn up" first
[2018-06-10 21:18:11] <somers> I forgot that my WC was out of date because I had last committed from a different machine
[2018-06-10 21:31:22] <aniketp> Hi @somers, I created a test-program for "praudit" and placed it in "usr.sbin/praudit" . The tests were passing
[2018-06-10 21:31:22] <aniketp> https://github.com/aniketp/AuditTestSuite/tree/master/praudit
[2018-06-10 21:55:27] * somers_ (~somers@63-224-80-238.hlrn.qwest.net) join
[2018-06-10 22:02:05] * somers (~somers@63-224-80-22.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-10 22:58:42] <aniketp> Hi @somers, shall I also create an independent revision for praudit(1)? There is just one test case with several atf_check statements
[2018-06-10 22:58:46] <aniketp> @somers_ 
[2018-06-10 22:59:46] <somers_> Yeah, go ahead and create a revision for it
[2018-06-10 23:00:25] <aniketp> Okay. Btw I've added the next 3 syscalls, @somers_ 
[2018-06-10 23:11:21] <aniketp> Btw @somers_, when I try to do "make install" from usr.sbin/praudit/tests (to install the tests in /usr/tests) I get:
[2018-06-10 23:11:21] <aniketp>  "install: /usr/tests/usr.sbin/praudit/praudit_test: No such file or directory"
[2018-06-10 23:11:21] <aniketp> Even though I did register that directory within etc/mtree/BSD.tests.dist 
[2018-06-10 23:12:01] <somers_> "make install" doesn't create directories.  You need to either do it manually, or do a full installworld
[2018-06-10 23:12:47] <aniketp> Okay, I did create it myself manually. I just wondered if this was supposed to happen. But I guess installworld does it so no issues
[2018-06-10 23:47:29] <aniketp> Btw @somers_, exit status of 1 is not a successful return right?
[2018-06-10 23:47:40] <somers_> correct
[2018-06-10 23:48:09] <aniketp> Well, I had a look at the source code of praudit(2). It looks like it never returns 0: https://github.com/openbsm/openbsm/blob/master/bin/praudit/praudit.c#L248
[2018-06-10 23:48:15] <aniketp> *praudit(1)
[2018-06-10 23:48:18] <aniketp> @somers_ 
[2018-06-10 23:48:47] <somers_> That sounds dumb.  Can you do some SVN archaeology to figure out why?
[2018-06-10 23:49:32] * mpts_ nick mpts
[2018-06-10 23:51:49] <aniketp> @somers_ the whole file was introduced at once. And the return value was never touched again, according to this git blame: https://github.com/openbsm/openbsm/commit/8297e0f04c3c421101040a77f4e89e3bed359f13#diff-d242c6d00428020d2da7131ea1d5a625R161
[2018-06-11 00:22:08] <aniketp> Btw @somers, I tried replacing the return value of praudit as 0 instead of 1. Building and installing the kernel does not change anything. Do I need to build the world for this? (I have a feeling I need to do so)
[2018-06-11 00:22:13] <aniketp> @somers_ 
[2018-06-11 00:22:42] <aniketp> Oh yes since this is in userspace
[2018-06-11 00:27:35] <aniketp> Okay It worked! I simply did a "make && make install" from usr.sbin/praudit/ 
[2018-06-11 00:27:52] <aniketp> I'll add a new revision and update the tests for praudit @somers_ 
[2018-06-11 01:54:30] * somers__ (~somers@63.224.80.201) join
[2018-06-11 02:02:05] * somers_ (~somers@63-224-80-238.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-11 08:21:29] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-06-11 08:26:48] * mpts (~mpts@boston-packets.hackerspace.pl) quit se.hub efnet.portlane.se
[2018-06-11 10:35:46] <aniketp> @somers__, praudit -p option doesn't seem to be too useful for this case. It simply prints the last few audit records in a trail. And for the sample trail that I have in the test program directory, it doesn't change anything
[2018-06-11 10:45:01] <aniketp> Also, @somers__ for auditreduce(2), since it basically selects certain records from audit trails, to actually see any difference in the output, I'll have to have sufficiently large audit trail which has events from multiple users, processes, different dates etc according to the specific command line arguments.
[2018-06-11 10:45:01] <aniketp> So regarding that would it be better if I use the same audit trail as the one I've used for praudit(1). Although note that, the output will be same since I'm selecting a record from a trail which only contains that particular record
[2018-06-11 10:45:13] <aniketp> *auditreduce(1)
[2018-06-11 11:11:13] <aniketp> Also @somers__, it looks like the "-c" functionality has not been implemented for auditreduce(1): https://github.com/openbsm/openbsm/blob/master/bin/auditreduce/auditreduce.c#L664
[2018-06-11 11:12:08] <aniketp> It does print the exception case for "incorrect flag" but nothing is output on correct flag, unlike what man-page says
[2018-06-11 13:21:42] <somers__> If the behavior doesn't match the man page, then that's a bug
[2018-06-11 13:47:59] <aniketp> Sure, and about the -p option? @somers__ 
[2018-06-11 14:16:32] <somers__> It would be good to test that.
[2018-06-11 14:16:48] <somers__> Perhaps it makes a difference if the input file begins with an incomplete record?
[2018-06-11 17:34:18] <mpts_> aniketp: actually, you may take a look at the old perforce repositories
[2018-06-11 17:34:29] <mpts_> there are commit histories for openbsm repos
[2018-06-11 17:34:44] <mpts_> trustedbsd: https://p4web.freebsd.org/@md=d&cd=//depot/projects/trustedbsd/openbsm/bin/auditdistd/&c=QJt@//depot/projects/trustedbsd/openbsm/?ac=83
[2018-06-11 17:34:55] <mpts_> pjd: https://p4web.freebsd.org/@md=d&cd=//depot/projects/trustedbsd/openbsm/bin/auditdistd/&c=ngV@//depot/user/pjd/openbsm/?ac=83
[2018-06-11 17:35:08] <mpts_> maybe you can find something interesting there ;)
[2018-06-11 17:36:12] * mpts_ nick mpts
[2018-06-11 22:24:36] <aniketp> Sure @mpts, I'll take a look.
[2018-06-11 22:24:36] <aniketp> Btw @somers__, I'd updated the statfs(2) and friends' test cases. The previous build failure was due to erroneous variable name.
[2018-06-11 22:25:35] <somers__> Ok
[2018-06-11 22:25:43] <somers__> BTW, is mpts_ Mariusz?
[2018-06-11 22:28:16] <aniketp> Yes Mateusz is @mpts_ 
[2018-06-11 22:28:27] <aniketp> Sorry @mpts 
[2018-06-11 22:33:41] <aniketp> Also, @somers__, shall I create a revision for the paudit(1)'s return and the man-page? As @mpts has accepted the PR in openBSM. Or should I wait till it is merged with OpenBSM? https://github.com/openbsm/openbsm/pull/32 
[2018-06-11 22:34:15] <somers__> Better to wait
[2018-06-11 23:01:11] <mpts> I'm 0mp@
[2018-06-11 23:07:46] * somers_ (~somers@63-224-81-78.hlrn.qwest.net) join
[2018-06-11 23:13:56] * somers__ (~somers@63.224.80.201) quit Read error: Operation timed out
[2018-06-12 14:31:47] <aniketp> Hi @somers_, when will D15750 be landed?
[2018-06-12 14:32:34] <somers_> After I review it again
[2018-06-12 16:57:42] * rwatson (robert@fledge.watson.org) quit Read error: No route to host
[2018-06-12 17:08:00] <aniketp> @somers_ in the report I guess all those open(2) statements are causing the issue since I did not close their file descriptor. Actually I did not need any file-descriptor for many tests so might have forgotten to close them
[2018-06-12 17:09:06] <aniketp> Yup, it looks like they are all unclosed file descriptors
[2018-06-12 17:09:09] <somers_> yep.  you have to close them
[2018-06-12 17:10:38] <aniketp> Okay, Btw how critical are these issues? Like, how sooner should they be fixed. I was actually involved with something so might not be able to look at them for another hour or two. @somers_ 
[2018-06-12 17:10:52] <somers_> Oh, that's fine
[2018-06-12 17:10:58] <somers_> they're not critical at all.
[2018-06-12 17:22:21] * rwatson (robert@fledge.watson.org) join
[2018-06-12 18:01:00] <aniketp> Btw @somers_ , for the resource leak issue, I can either add code snippets for each test case which close the file-descriptors. But that will increase the SLOC by a huge margin for the currently merged tests and the ones to come.
[2018-06-12 18:01:00] <aniketp> Or I was thinking of passing an additional (optional) argument to check_audit() which will close the descriptor is passed. Which one would you recommend?
[2018-06-12 18:01:24] <aniketp> *if passed
[2018-06-12 18:02:52] <somers_> Which do you think would be more maintainable?
[2018-06-12 18:03:02] <aniketp> The second one I think
[2018-06-12 18:03:32] <somers_> You can try that, then.  Just try not to let check_audit get too unwieldy.
[2018-06-12 18:14:48] <aniketp> Yeah, just a single if condition added in check_audit(). Which also happens to be a wrapper to check_auditpipe(). So just 5 SLOC in total
[2018-06-12 18:37:19] <aniketp> @somers_ I did not know that default arguments were not supported in C. I guess I'll stick to the first method. Else, would have to change every check_audit() invocation
[2018-06-12 19:53:00] <aniketp> @somers_, I've made the corrections and some improvements which I thought were appropriate. Shall I create a new revision?
[2018-06-12 20:05:28] <somers_> yeah
[2018-06-12 22:07:09] * somers__ (~somers@63-224-81-123.hlrn.qwest.net) join
[2018-06-12 22:14:00] * somers_ (~somers@63-224-81-78.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-13 05:27:44] <aniketp> Btw @somers__ what to do with the execve(2) issue? I did some more digging and it looks like the intrinsic behaviour of what execve(2) returns cannot be changed. Like for _exit(2) we know that it will always be successful so we don't need any condition check, hence an extra AUDIT_SYSCALL_EXIT() could be applied. But same cannot be said for execve(2): which does return failures too 
[2018-06-13 07:32:12] <aniketp> Hi @gnn, first evaluation has started. Hope you have completed it from your side..
[2018-06-13 08:35:15] <gnn> aniketp: Yup, completed it this morning my time (Taipei)
[2018-06-13 09:10:38] <aniketp> Sure, thanks!
[2018-06-13 09:16:42] <aniketp> Btw @gnn, I thought you lived in Brooklyn?
[2018-06-13 09:53:34] <gnn> I do.
[2018-06-13 09:53:41] <gnn> I spend 1/2 of my time in Asia.
[2018-06-13 16:04:41] <aniketp> Btw @somers__ shall I abandon the execve(2) test case or can we commit it as expected failure (or let it be like it is)
[2018-06-13 16:04:44] <aniketp> ?
[2018-06-13 16:05:31] <somers__> It sounds to me like you still don't fully understand how the audit record gets its return value
[2018-06-13 16:09:23] <aniketp> Yeah, I tried implementing the code which looks up the errno in the table and if not found then changes their value to 0. But the audit record still showed "Unknown error", which means the errno was actually found within the table. But when I try to print "errno" as "retval" just to see which errno is being returned, I get "-2". This is confusing as to how can an errno be -2.. @somers__ 
[2018-06-13 16:10:57] <somers__> Errno is a signed int.  It's certainly possible for it to be -2.  But I think the problem is that you don't understand where it's coming from.  You figured it out for the case of normal syscalls.  But exec(2) doesn't ever return.  In that case, what completes the audit record?
[2018-06-14 03:06:24] <aniketp> Hi @asomers, what should I do in the test program for praudit(1)?
[2018-06-14 03:06:24] <aniketp> The first atf_check assertion was to ensure that normal praudit command does not print out anything to STDOUT.
[2018-06-14 03:06:24] <aniketp> Second one does so
[2018-06-14 03:06:30] <aniketp> @somers__ 
[2018-06-14 03:08:32] <somers__> There's no requirement that praudit doesn't print anything absent "-p"
[2018-06-14 03:08:38] <somers__> So you should just remove that assertion
[2018-06-14 03:13:02] <aniketp> Okay, so the 'corrupted' record has extra redundant information initially. So praudit(1) simply ignored this when called with -p command. How can we make this obvious? (That there is indeed a difference in what praudit can do with -p) @somers_  
[2018-06-14 03:13:07] <aniketp> @somers__ 
[2018-06-14 03:13:50] <somers__> A better question is, why shouldn't praudit always behave as though "-p" is set?
[2018-06-14 03:14:21] <aniketp> True, even I wondered that
[2018-06-14 03:15:43] <aniketp> Actually praudit -p always takes out the later part of the audit record. If I add quite a lot of weird symbols in the end of audit record then even '-p' can't do anything. @somers__ 
[2018-06-14 03:16:13] <aniketp> I had corrupted the record in the beginning for the test case
[2018-06-14 13:33:07] <rwatson> BTW, there's a known long-standing problem with auditdistd that has prevented it from working in the FreeBSD.org cluster. When we get to auditdistd tests, it would be nice to produce a suitable test and fix :-)
[2018-06-14 13:33:26] <rwatson> On a print/XML-related output: right now, I don't think we adequately escape audit data that interferes with XML (etc) syntax
[2018-06-14 13:33:35] <rwatson> It might be nice to have some tests that illustrate that in various ways to encourage fixing
[2018-06-14 13:36:39] <rwatson> (Really, really pleased to see all the audit testing work moving forward! It's very overdue.)
[2018-06-14 13:44:55] <aniketp> Btw @somers__, the content of the "corrupted" is some binary data? Should I simply copy paste it into comments :P
[2018-06-14 13:46:36] <somers__> No; I'm just looking for a description of how it's different than trail.
[2018-06-14 13:48:13] <aniketp> Okay, I'll add that. Btw what I did was copy half of the "legit" audit trail and paste it above it. So that successfully printed the final part of audit trail with "-p" but nothing without any options
[2018-06-14 13:49:18] <aniketp> I guess praudit exits as soon as it encounters buggy audit trails, while the "-p" options directly jumps to the ending of audit trail @somers__ 
[2018-06-14 14:11:56] <aniketp> Btw @somers__ I had created a revision for the formatting in open(2). D15797
[2018-06-14 15:41:59] <aniketp> Ping @somers__ 
[2018-06-14 15:42:23] <somers__> pong
[2018-06-14 15:43:13] <aniketp> There was this diff on formatting open(2)'s macro definition. D15797. Did you have a look at it?
[2018-06-14 15:43:27] <somers__> no, not yet
[2018-06-14 15:43:33] <aniketp> Currently it looks so ugly
[2018-06-14 15:43:36] <somers__> You'll get an email when I do
[2018-06-14 15:43:48] <aniketp> Okay
[2018-06-14 19:53:43] <rwatson> aniketp: Can you remind me of the pointer to your general SoC status page? I've fallen a bit behind and would like to catch up on your progress.
[2018-06-14 19:54:13] <rwatson> aniketp: I'll also soon prod the CADETS folks to start using your test suite. Although we're using the DTrace audit provider to extract data rather than the pipe or trail mechanisms, we very much rely on the correctness of the code you are testing.
[2018-06-15 01:07:11] <aniketp> Hi @rwatson, I've completed almost all auditable system calls in FreeBSD (I'm using this switch case here as the reference: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L532) to keep track of all audit events. 
[2018-06-15 01:07:11] <aniketp> Currently I'd made about 504 independent test-cases for 165 syscalls, A lot of open(2) and openat(2) audit events have been cutoff since each open(2)ing mode was a separate auditable event and they all passed multiple audit class filters.
[2018-06-15 01:07:11] <aniketp> Here is my Project Wiki: https://wiki.freebsd.org/SummerOfCode2018Projects/RegressionTestSuiteForAuditFramework   (Some of it might not be updated, I'll make sure to get it done soon)
[2018-06-15 01:07:11] <aniketp> Here is the project repository: https://github.com/aniketp/AuditTestSuite  (The stuff within audit subdirectory needs to be placed in "tests/sys/audit" and after some tweaks to the parent Makefile, the tests can be installed at /usr/test/sys/audit). 
[2018-06-15 01:07:11] <aniketp> Also, with the help of @somers__ , some of the tests of "fc", "fd", "fr", "fw", "fd", "cl", "fa", "fm" have been merged in the HEAD https://github.com/freebsd/freebsd/tree/master/tests/sys/audit
[2018-06-15 01:07:11] <aniketp> Also, @rwatson, I also had a regression test for praudit(1) utility which is currently awaiting review: https://github.com/aniketp/AuditTestSuite/tree/master/praudit
[2018-06-15 01:07:58] <aniketp> Btw @rwatson, I've been sending weekly mails (and /cc'ing them to you too), so you might have looked at those mails?
[2018-06-15 01:10:49] <aniketp> The one major issue I'm currently having is that I can't understand why execve(2),fexecve(2) returns "Unknown error : 201" even though the execution was successful. I'm working on this but it looks like there is some element regarding this which I'm missing out, and would try to fix this hopefully..
[2018-06-15 01:15:48] <aniketp> @rwatson, this part here: " https://github.com/aniketp/AuditTestSuite/blob/master/utils/utils.c " does most of the hard work of extracting audit records out of the auditpipe.
[2018-06-15 01:48:58] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) join
[2018-06-15 01:55:55] * somers__ (~somers@63-224-81-123.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-15 05:19:40] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-06-15 05:25:46] * mpts (~mpts@boston-packets.hackerspace.pl) quit se.hub irc.underworld.no
[2018-06-15 14:23:53] <aniketp> Hi @somers_ , would you be reviewing the diffs? Currently there are 5 of them
[2018-06-15 14:26:14] <somers_> Yeah, I'm doing it now
[2018-06-15 14:26:46] <somers_> I still don't see why praudit's "-p" behavior shouldn't be the default.  But that's a separate issue.
[2018-06-15 14:34:41] <aniketp> Yeah, I'll have another look at the source code of praudit
[2018-06-15 14:35:27] <aniketp> I think it is doing the same stuff as I did initially, skipping a record if au_read_rec retusn -1 if no option is specified
[2018-06-15 14:35:51] <aniketp> @somers_ 
[2018-06-15 14:36:37] <somers_> No, not exactly.  It doesn't even call au_read_rec until it's detected the start of a record
[2018-06-15 15:38:06] <aniketp> @somers_, the network_success audit record is something like this:
[2018-06-15 15:38:06] <aniketp> Looking for 'socket.*0xffffffff.*ret.*failure' in 'header,113,11,socket(2),0,Fri Jun 15 15:37:18 2018, + 609 msecargument,1,0xffffffff,domainargument,2,0x1,typeargument,3,0x0,protocolsubject,root,root,wheel,root,wheel,1449,761,47018,10.0.2.2return,failure : Address family not supported by protocol family,4294967295trailer,113'
[2018-06-15 15:38:51] <aniketp> (-1), which is the supposed "socket descriptor" is converted to hex(-1)
[2018-06-15 15:38:54] <somers_> And what are the meanings of those 0xffffffff fields?
[2018-06-15 15:39:01] <aniketp> sockfd
[2018-06-15 15:39:04] <aniketp> @somers__ 
[2018-06-15 15:39:12] <aniketp> @somers_ 
[2018-06-15 15:39:57] <somers_> Then -1 is a confusing choice of argument, because it's also the return value.  Could you use a different argument instead?
[2018-06-15 15:40:07] <aniketp> Okay
[2018-06-15 15:40:25] <somers_> Also, the test shouldn't expect -1 to be printed as 0xffffffff.  It should expect it to be printed as -1, and we should fix the code to actually print it as -1.
[2018-06-15 15:41:56] <aniketp> But @somers_, we earlier saw that the audit record never prints negative numbers. For ex, (-1) as return was printed as 2^32 -1
[2018-06-15 15:42:08] <aniketp> Its just being converted to hex in this case
[2018-06-15 15:42:33] <somers_> Why not?
[2018-06-15 15:42:47] <somers_> Is there a fundamental reason why negative numbers cannot be auditted?
[2018-06-15 15:44:02] <aniketp> @somers_ have a look at the data type of the return value here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/bsm_token.c#L860
[2018-06-15 15:44:14] <aniketp> Its unsigned
[2018-06-15 15:44:24] <aniketp> Probably this might explain the observations?
[2018-06-15 15:44:40] <aniketp> It happens for the return of _every_ failed audit record
[2018-06-15 15:45:14] <somers_> Hm.  It looks like there aren't separately defined token types for signed vs unsigned args.  In sys/bsm/audit_record.h
[2018-06-15 15:45:34] <somers_> That could be fixed, but it would require a lot more code.  Probably out of the scope of what you're doing.
[2018-06-15 15:47:44] <aniketp> Btw @somers_ this is probably the first time I've encountered hex values in audit records. Why is it hex again?
[2018-06-15 15:48:14] <aniketp> Also the "domain" of struct sockaddr_info is normal "int": https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_private.h#L124
[2018-06-15 15:48:24] <aniketp> Not sure why hex is being printed in the audit record
[2018-06-15 15:48:30] <somers_> I don't know.
[2018-06-15 15:48:45] <somers_> Have a look at contrib/openbsm/lib/bsm_io.c if you want to know.
[2018-06-15 15:54:21] <aniketp> @somers_, cool! Two revisions in one commit 😝
[2018-06-15 16:00:13] <aniketp> Btw @somers_ the "0x0" is the third argument of socketpair(PF_UNIX, SOCK_STREAM, 0, sv)
[2018-06-15 16:00:35] <somers_> You should make that clear in the test
[2018-06-15 16:47:09] <aniketp> @somers_ I was tired to going for a quick nap. I'll create about 3 more revision after I wake up after some time
[2018-06-15 16:47:23] <somers_> ok
[2018-06-16 01:56:19] <aniketp> Ping @somers_ : The "praudit -p" did the same for me "spinning CPU and getting stuck" when I passed the tail(1)'s output to it. Like:
[2018-06-16 01:56:19] <aniketp> "tail corrupted | praudit -p"
[2018-06-16 01:56:30] <aniketp> Normally It works
[2018-06-16 02:02:05] <aniketp> @somers_ https://pastebin.com/YXgTT0tj
[2018-06-16 03:05:57] <somers_> Normally it works, but one time it spun the cpu?
[2018-06-16 03:40:49] <aniketp> It did for me with the tail(1) approach.
[2018-06-16 03:41:40] <aniketp> But with simply passing the trail to praudit -p it works
[2018-06-16 03:41:52] <aniketp> @somers_ 
[2018-06-16 09:21:29] <aniketp> @somers_, so here they are formatting it as hex : https://github.com/openbsm/openbsm/blob/master/libbsm/bsm_io.c#L4173
[2018-06-16 09:22:45] <aniketp> Everything before it has been printed as unsigned int before it but suddenly format changed to hex
[2018-06-16 14:56:18] <aniketp> Ping @somers_, the 'failur' instead of 'failure' was due to the 80 character constraint. I thought it served it's purpose so I let it be like this
[2018-06-16 15:16:33] <somers_> What 80 character constraint?
[2018-06-16 15:17:02] <aniketp> That I can't exceed 80 chars in a line. @somers_ 
[2018-06-16 15:17:23] <somers_> But you can split string constants across lines
[2018-06-16 15:17:57] <aniketp> Okay, I thought It wasn't worth it just for completing that too a regex, so I didn't do it. @somers_ 
[2018-06-16 15:19:19] <aniketp> Can I instead use "fail" if not "failur" @somers_? I'm feel reluctant to split strings in this case.
[2018-06-16 15:23:44] <somers_> sure
[2018-06-16 15:44:12] <aniketp> Btw @somers_ would the timeout of 2 seconds in case of praudit(1)'s test program be fine?
[2018-06-16 15:44:21] <aniketp> Since they all execute quickly
[2018-06-16 15:44:52] <aniketp> Btw I don't see a reason for timeout either. The current form passes all the time
[2018-06-16 15:48:33] <somers_> No it doesn't.  It failed for me.  And it failed for you when you ran it by hand.  That means it's intermittent.
[2018-06-16 15:48:54] <somers_> 2 seconds is insufficient.  Remember, you have to consider that these tests may run on crappy hardware, like Raspberry Pi.
[2018-06-16 15:49:24] <aniketp> No @somers_, it only failed for me when I did "tail corrupted | praudit -p"
[2018-06-16 15:49:35] <aniketp> It doesn't ever fail for me in its current state
[2018-06-16 15:49:38] <somers_> Yeah, exactly.  That's normal usage
[2018-06-16 15:50:16] <aniketp> Yeah, so I'm wondering that, is piping even allowed in atf_check test cases? @somers_ 
[2018-06-16 15:50:27] <somers_> Of course it is
[2018-06-16 15:50:39] <aniketp> Okay, so that's weird.
[2018-06-16 15:51:16] <aniketp> Btw doing that in the command line does it's job, while fails in Kyua test case. I'll try to figure it out
[2018-06-16 15:51:20] <aniketp> @somers_ 
[2018-06-16 15:51:50] <somers_> I think you'd be better off simply fixing the bug.  praudit is a pretty simple program
[2018-06-16 15:52:31] <somers_> If I were you, I would get praudit into the spinning state, then attach gdb and print a stacktrace.  That will most likely reveal exactly where the problem is.
[2018-06-16 15:52:46] <aniketp> Is that a bug? @somers_ 
[2018-06-16 15:52:46] <aniketp> It works in a normal shell process, but not inside a Kyua test case. How can it be related to praudit(1)'s code here?
[2018-06-16 15:53:01] <aniketp> I think I need to tweak the test case a bit
[2018-06-16 15:53:24] <somers_> I think it probably has nothing to do with Kyua.  It's probably just an intermittent bug.  You'll know once you find the root cause.
[2018-06-16 15:53:35] <aniketp> Okay, will try
[2018-06-16 15:54:29] <aniketp> Btw @somers_, if I don't cast the samplemsg to (char), the compiler complains:
[2018-06-16 15:54:38] <aniketp> TEST_METADATA+= timeout="30"
[2018-06-16 15:54:55] <aniketp>       conversion initializing 'char' with an expression of type 'char [80]'
[2018-06-16 15:54:55] <aniketp>       [-Werror,-Wint-conversion]
[2018-06-16 15:54:55] <aniketp>         msgstr_t msg1 = {1, {samplemsg}};
[2018-06-16 15:55:37] <somers_> Yeah, because casting a pointer to a char is an invalid conversion.  But the explicit (char) overrides the compiler's better judgement.  "Full speed ahead, and damn the torpedoes!"
[2018-06-16 15:58:40] <aniketp> But @somers_, "msgstr_t msg1 = {1, {(char)samplemsg}};" is the only tweak that works. Rest all fail to compile
[2018-06-16 15:59:21] <somers_> I doesn't compile because it's correct.  It compiles because you're silencing the compiler's warning.
[2018-06-16 16:00:20] <somers_> What you probably want to do is more like "msgstr_t msg1; memset(msg1.msg, 0, sizeof(msg1.msg));"
[2018-06-16 16:12:34] <aniketp> Oh, now I understand. While declaring msg1, the mtext already had a length of BUFFLEN assigned. I was probably overwriting something or with my approach, changing the data type in some way.
[2018-06-16 16:12:34] <aniketp> No wonder it kept suggesting me to enclose "samplemsg" with {}. I had never encountered such error/warning before. 
[2018-06-16 16:36:28] <aniketp> ping @somers_, I updated the IPC diff
[2018-06-16 16:38:19] <somers_> there's no length to assign to mtext.  It's statically declared to have a length of BUFFLEN.  The problem is that "samplemsg" is a pointer type, and you were casting it to a char
[2018-06-16 16:42:10] <aniketp> Oh, I see.. I thought normal (char *) could be converted to (char) without any hassle. I had already declared struct msgstr with 'char' so that might've conflicted the data types.
[2018-06-16 17:18:12] <aniketp> Ping @somers_ can you please commit the IPC and attribute access syscall tests (if they are correct)? I wanted to create further diffs for these two audit classes before the battery runs out 
[2018-06-16 17:18:59] <somers_> Don't worry, I'll do it
[2018-06-16 19:39:40] <rwatson> aniketp: BTW, have you done tests for auditpipe(4) itself -- i.e., to check that the filter mechanism works, that tuning the record queue limit works, etc?
[2018-06-16 19:40:22] * rwatson action quite pleased with the depth of testing we are ending up with
[2018-06-16 22:20:27] <somers_> @rwatson all of aniket's tests rely on auditpipe.  But they don't explicitly test it directly.  I couldn't find any good way to test it without kind of injection mechanism to give userland full control over the audit trail.
[2018-06-16 23:16:18] <aniketp> Btw @somers_, aren't msgget(2), msgsnd(2), msgrcv(2), msgctl(2) all Sys V APIs?
[2018-06-16 23:16:37] <aniketp> I thought the posix one's were mq_open(2) and friends
[2018-06-16 23:18:10] <somers_> Yep, you're right.
[2018-06-16 23:19:58] <aniketp> Btw none of them are audited. e.g mq_open(2) and friends.
[2018-06-16 23:19:58] <aniketp> Also, about chflagsat(2): I was thinking of adding all "expected failures" in the end. As there are a _lot_ of them and would uselessly take up a lot of time to "timeout" 
[2018-06-16 23:20:01] <aniketp> @somers_ 
[2018-06-16 23:21:24] <somers_> Since these tests are all fast, maybe you should set the timeout for all of them?  I think you can do it in the Makefile, like you did for is_exclusive
[2018-06-16 23:25:25] <aniketp> But @somers_, the timeout for ppoll(2) of 10 seconds is already in place. And there is a TEST_METADATA timeout of 30 seconds for every test program. 
[2018-06-16 23:25:41] <somers_> Ok, that should be good
[2018-06-16 23:25:43] <aniketp> Expected failures all wait for 10 seconds to timeout and fail
[2018-06-16 23:25:49] <somers_> If you want to wait to add chflagsat, that's ok.
[2018-06-17 00:49:13] <aniketp> Okay. Btw @somers_, I added created more revisions. PLease have a look
[2018-06-17 06:01:51] * somers (~somers@63-224-80-127.hlrn.qwest.net) join
[2018-06-17 06:04:42] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-17 08:40:11] <aniketp> @somers_ I think if we remove this part, both "praudit -p" and the default one should work equally
[2018-06-17 08:40:14] <aniketp> https://github.com/openbsm/openbsm/blob/master/bin/praudit/praudit.c#L94
[2018-06-17 08:40:22] <aniketp> @somers 
[2018-06-17 08:41:57] <aniketp> That part waits till it encounters the Header token while the default invocation starts from the beginning and exits if the au_fetch_tok() outputs bad record
[2018-06-17 09:10:08] <rwatson> somers: agreed, it's not an enourmously fun thing to test (auditpipe)
[2018-06-17 09:10:24] <rwatson> somers: especially the filter mechanism
[2018-06-17 09:10:29] <rwatson> somers: you really want unit tests for that
[2018-06-17 09:10:46] <rwatson> somers: but for the queue behaviours, careful configuration of audit, the audit pipe mechanism, and use of audit(2), probably does the trick?
[2018-06-17 09:11:17] <rwatson> aniketp: btw, if you find missing auditing, you might look in the cadets branch. we're a bit behind freebsd current right now, but have a bunch of additional argument auditing, system-call auditing, etc.
[2018-06-17 09:11:26] <rwatson> aniketp: I stalled on merging things at some point about two years ago
[2018-06-17 09:11:35] <rwatson> aniketp: we also have some crazy new features that I need to think about whether to merge or not
[2018-06-17 09:11:52] <rwatson> aniketp: e.g., the kernel maintains UUIDs on most kernel object types to give them unique names for auditing purposes
[2018-06-17 09:12:01] <aniketp> @rwatson Yeah, quite a lot of syscalls don't get audited. Even though they are mentioned in the audit_events list
[2018-06-17 09:12:18] <rwatson> aniketp: the audit_events list is basically the union of system calls in freebsd, mac os x, solaris, and linux, as of about 2-3 years ago.
[2018-06-17 09:12:29] <rwatson> aniketp: in the cadets branch, we try to audit almost all system calls
[2018-06-17 09:12:43] <rwatson> aniketp: in particular, we need auditing of i/o system calls to allow more provenance tracing
[2018-06-17 09:13:12] <rwatson> when I escape dissertation marking for the term (another week and a half? two?) then I hope to get back to merging some of those features
[2018-06-17 09:13:33] * rwatson action is currently staring at a pile of 12 masters dissertations that need marking
[2018-06-17 09:13:56] <rwatson> down from 16 yesterday though :-)
[2018-06-17 09:14:04] <aniketp> @rwatson do the terms at cambridge so late? I'm halfway through my summer breaks
[2018-06-17 09:14:08] <aniketp> *end
[2018-06-17 09:26:17] <aniketp> Btw @somers, I replaced the "partial" condition with universal truth in the print_tokens() function in praudit.c
[2018-06-17 09:26:17] <aniketp> Now praudit and "praudit -p" work exactly similar.
[2018-06-17 09:26:17] <aniketp> Although I wonder if it is necessary to do so. It looks to me that it was intentionally done so.
[2018-06-17 09:26:53] <aniketp> * Differentiating the two invocations of praudit
[2018-06-17 09:29:30] <aniketp> Btw @rwatson, can you have a look at the simple change in praudit(1)'s source? https://github.com/openbsm/openbsm/pull/32
[2018-06-17 09:29:30] <aniketp> It is blocking the regression tests for praudit(1): https://reviews.freebsd.org/D15751
[2018-06-17 09:33:16] <rwatson> aniketp: We finish at the very end of June, and restart at the very start of October
[2018-06-17 09:34:29] <aniketp> Woah! That's a two month shift from my university..
[2018-06-17 09:34:57] <rwatson> aniketp: That change looks reasonable, but it would be useful to glance at the Solaris documentaiton for their praudit and see what they do?
[2018-06-17 09:35:09] <rwatson> (I don't mind if we do a different thing but I want to do it on purpose rather than by mistake)
[2018-06-17 09:37:47] <rwatson> FYI, the main sources of non-auditing in system calls are most likely (a) it wasn't required by the Orange Book / CAPP; (b) it relates to new system calls that arrived after audit was introduced; or (c) where there are substantial differences from Mac OS X and we mucked up the merge.
[2018-06-17 09:37:56] <rwatson> (a) is a good reason, and (b)/(c) are poor reasons
[2018-06-17 09:38:06] <rwatson> CADETS changes (a) quite a lot because we needed I/O tracing
[2018-06-17 09:38:35] <rwatson> it tried to help with (b) and (c), but we're working in the context of a larger programme that tends to be less interested in FreeBSD/Mac OS X-specific functionality (since they are more into POSIX), which means gaps relating to (b) and (c) may not have been noticed.
[2018-06-17 09:44:31] <aniketp> @rwatson I had a look at the Solaris "praudit" docs but couldn't find any reference to the final return value. Although all the other options for the command were similar. 
[2018-06-17 09:45:53] <rwatson> I believe that their praudit was open sourced as part of open solaris at one point, so that might offer more insight.
[2018-06-17 09:46:27] <rwatson> (the BSD/OS X OpenBSM was implemented clean room from the Solaris code, as it was before Solaris was open sourced. so one wouldn't want to borrow any code, but understanding the return value seems OK..)
[2018-06-17 09:52:48] <rwatson> Once you've drawn conclusions on that, and assuming you're happy to proceed stil, add a note to the OpenBSM github pull request, I can go ahead and approve it.
[2018-06-17 09:52:59] <rwatson> BTW, have you done any build testing on Linux with your OpenBSM changes?
[2018-06-17 09:53:23] <aniketp> No @rwatson, haven't done that in Linux.
[2018-06-17 09:53:36] <aniketp> But yeah, it worked fine in 12-CURRENT
[2018-06-17 10:03:45] <aniketp> @rwatson, I followed the instructions here: https://github.com/openbsm/openbsm/blob/master/INSTALL to build OpenBSM in my Ubuntu machine. It did build successfullt
[2018-06-17 10:04:01] <rwatson> excellent. I don't check all the time, but it's good in general to keep that working.
[2018-06-17 10:04:14] <rwatson> Ideally any userspace OpenBSM tests (e.g., of the OpenBSM APIs, parsing/printing/etc) would work on Linux as well as FreeBSD
[2018-06-17 10:05:10] <rwatson> For the purposes of the OpenBSM CREDITS file, what is the preferred spelling and formatting of your name?
[2018-06-17 10:07:58] <aniketp> @rwatson Its Aniket Pandey. Although I doubt I have contributed enough. (Compared to others) 😅
[2018-06-17 10:09:10] <rwatson> We prefer to be generous on these things. And perhaps it will encourage future contributions :-)
[2018-06-17 10:14:30] <aniketp> @rwatson I had a look at one of the archived OpenSolaris repositories. It looks like they follow the normal convention (0 on success and 1 on every exception) for return status: https://github.com/kofemann/opensolaris/blob/80192cd83bf665e708269dae856f9145f7190f74/usr/src/cmd/praudit/main.c#L110
[2018-06-17 10:15:29] <aniketp> There are a few exit(1) statement prior to final return statement, for incorrect usage i think
[2018-06-17 10:24:47] <aniketp> Btw @rwatson, this change is so funny! https://github.com/kofemann/opensolaris/commit/982aa43c6f050ff8aa30f738a8ac77ea63c38f4e#diff-bd7a9b98e0483152666a6c31d0aebaacL109
[2018-06-17 10:24:47] <aniketp> Look at how they change "retstat" in order to return 0 [before change]
[2018-06-17 12:59:56] <rwatson> Can you remind me of the wiki (or similar) page on your overall project? (I think I asked this the other day and have probably missed your reply courtesy IRC...)
[2018-06-17 13:30:18] <aniketp> Sure @rwatson, here: https://wiki.freebsd.org/SummerOfCode2018Projects/RegressionTestSuiteForAuditFramework
[2018-06-17 13:30:47] <aniketp> And here is my Project Resository: https://github.com/aniketp/AuditTestSuite
[2018-06-17 13:33:56] <aniketp> Some elements might not be updated. I'll do that as soon as possible. For ex, Install and test instructions for New users
[2018-06-17 13:48:24] * mpts_ nick mpts
[2018-06-17 13:53:03] <somers> aniketp: yes, if you remove that part from praudit, then "-p" won't work anymore.
[2018-06-17 13:55:54] <aniketp> @somers @rwatson, would it be better to remove that part "-p" from the code itself (And remove the references from manaual pages). Cause -p option does should be implemented as a default case. 
[2018-06-17 13:56:13] <aniketp> *cause what -p option
[2018-06-17 13:59:41] <somers> OpenBSM automatically builds PRs on Linux via Travis
[2018-06-17 14:02:23] <aniketp> Yeah, this config here: https://github.com/openbsm/openbsm/blob/master/.travis.yml#L11 , which was later modified by @mpts 
[2018-06-17 14:02:41] <aniketp> Btw @somers about "-p" option, shall we remove it?
[2018-06-17 14:03:07] <aniketp> Solaris did not have this option in their documentation
[2018-06-17 14:03:35] <somers> I think "-p" should be removed from the documentation and accepted (but ignored) from the program.  That behavior should always be enabled.  HOWEVER, we can't do that before we fix the spinning problem.  Have you tried that yet?
[2018-06-17 14:11:20] <aniketp> @somers Do you mean passing the output to tail(1) or the default "praudit -p trail" implementation?
[2018-06-17 14:11:36] <aniketp> Cause the current state of D15651 never spins the CPU for me
[2018-06-17 14:14:48] <aniketp> I think the reason it does so is that with tail(1), it is supposedly waiting for more input (since tail checks the last certain parts of the record)
[2018-06-17 14:24:53] <mpts> FWIW, I'm working on a project the goal of which is to be able to push logs from Linux and receive them with auditdistd on FreeBSD: https://github.com/0mp/audisp-auditdistd
[2018-06-17 14:24:58] <mpts> you might find it interesting
[2018-06-17 14:25:29] <mpts> (there are also some Vagrantfiles to set up some FreeBSD and Linux machines)
[2018-06-17 14:30:30] <aniketp> @mpts I haven't looked at how auditdistd(8) works, yet. Sure, I'll take a look at your project when I'm testing it..
[2018-06-17 14:31:48] <somers> aniketp, praudit shouldn't spin the cpu when waiting for input from tail; it should block instead.
[2018-06-17 15:23:30] <rwatson> tail -f may be a useful reference
[2018-06-17 16:39:43] <aniketp> @rwatson, man-page says that "-f" is ignored when the standard input is a pipe
[2018-06-17 16:40:05] <aniketp> Also, it does not change anything. The test still hangs up
[2018-06-17 16:41:56] <aniketp> Btw @somers, I had been incorrectly saying that my CPU is spinning. I just noticed that the CPU performance was consistent throughout while the test was stuck
[2018-06-17 16:42:13] <aniketp> I really think it's just waiting for more trail
[2018-06-17 16:43:00] <somers> definitely not.  My cpu goes to 100%.
[2018-06-17 16:48:32] <aniketp> I just set the timeout to 30s. The test got stuck for praudit -p while the CPU performance (Of my Linux Host) varied bw 2.6% to 4.0%
[2018-06-17 17:04:17] <aniketp> @somers, yeah I noticed that too. While creating/updating the revision, arcanist specially mentioned presence of binary files in the patch
[2018-06-17 17:05:41] <aniketp> Since @rwatson and @mpts accepted the PR, I'll create a revision regarding the return status. Also, about the "-p" option. Shall we implement its functionality as the default one?
[2018-06-17 17:05:47] <aniketp> @somers 
[2018-06-17 17:06:08] <somers> Don't bother; I'm merging that change right now
[2018-06-17 17:06:19] <aniketp> Which one?
[2018-06-17 17:06:26] <aniketp> return status?
[2018-06-17 17:06:38] <somers> If you want to make "-p" the default, you'll need approval of @rwatson or the other openbsm guys.  So start the conversation over there.
[2018-06-17 17:06:42] <somers> Yeah, praudit's return status
[2018-06-17 17:07:41] <aniketp> Okay, I'll try to put forward my argument about it as a PR. Btw @somers, would you suggest that it is a good idea? Although I'll take their approval too
[2018-06-17 17:08:00] <somers> Yeah, I think it's a good idea.
[2018-06-17 17:08:50] <aniketp> Okay I'll create a PR then, explaining the benefits, maybe @rwatson can have some suggestions regarding it then.
[2018-06-17 17:12:09] <somers> For the praudit tests, do you mind if I increase the timeout to 10 seconds?
[2018-06-17 17:12:48] <aniketp> Yeah sure, Not an issue. Even I don't recall why I set it to 2 seconds in first place
[2018-06-17 17:12:54] <aniketp> @somers 
[2018-06-17 17:13:05] <aniketp> Maybe to timeout the tests earlier
[2018-06-17 17:19:24] <aniketp> Btw @somers, with extattr_{get/list}_{file/link/fd}, file-attribute-access is finished
[2018-06-17 17:19:36] <somers> cool
[2018-06-17 17:44:09] <aniketp> Btw @somers why is it that to list the extended attributes we don't need any , but to delete extended attributes we need atleast one. Like, can't we delete "nothing"? 😅
[2018-06-17 17:44:31] <somers> Good question.
[2018-06-17 17:57:26] <aniketp> Also, @somers, how much time will this take? "ARCH=i386 TARGET_ARCH=i386 make -j6 buildworld" (approx)
[2018-06-17 17:57:26] <aniketp> Thing is, I'm sitting in the part of lab where a lot of people are working. Building the world for long time might frustrate people. 😅 
[2018-06-17 17:58:16] <aniketp> Also, I had initially type casted it to (intptr_t)addr and it did not match the regex
[2018-06-17 17:58:35] <aniketp> So I reset it to (int). @somers 
[2018-06-17 19:03:50] <somers> It depends on what kind of hardware you have.  20 minutes is reasonable on a decent machine
[2018-06-17 19:05:18] <somers> Casting to int in order to match the regex is back asswards.  You should fix the regex instead.
[2018-06-17 20:49:15] <aniketp> Okay. Btw @somers I've created 5 more revisions for {io, fm, ad, nt, ip}. Please have a look. 
[2018-06-17 20:49:15] <aniketp> I guess post this only one more revision from each class will be left
[2018-06-18 20:34:33] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) join
[2018-06-18 20:36:59] * somers (~somers@63-224-80-127.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-19 00:37:01] <aniketp> Ping @somers_, should I mention the reason for not testing the success mode of undelete(2) in test program? i.e, it's used in unionfs
[2018-06-19 00:46:37] <somers_> Yeah.  If you're leaving something out, you should certainly explain why.
[2018-06-19 04:01:31] <aniketp> Btw @somers_, does the system wide setting of audit class, i.e "flag" in "/etc/security/audit_control" affect what happens to the local auditpipe with local mode auditing?
[2018-06-19 04:02:15] <aniketp> For example, when flag is set as "pc" globally, half of my process-control syscall tests fail intermittently (at random)
[2018-06-19 04:03:14] <aniketp> On trying to debug one to get an idea of what is happening, I encounter a "wait4(2)" audit event which times-out the test
[2018-06-19 05:17:30] <somers_> I don't believe the global flags are supposed to effect auditpipe in local mode
[2018-06-19 05:17:59] <somers_> what do you mean, that a "wait4(2)" audit event times out the test?  Doesn't the test ignore all events except for the one of interest?
[2018-06-19 05:18:14] <aniketp> I'll check again. Though this has been happening quite frequently. That is why I haven't created a revision for "pc" yet
[2018-06-19 05:19:17] <aniketp> Yeah, but auditpipe will contain all process control audit events. The debug output showed "looking for 'my regex' is ...... wait4(2)......." 
[2018-06-19 05:19:28] <aniketp> s/is/in
[2018-06-19 05:22:18] <aniketp> Btw @somers_ is exiting for an empty file in case of praudit(1) a good idea?
[2018-06-19 05:22:18] <aniketp> Whenever open /dev/auditpipe with praudit, it exits saying that "file is empty". [With the current state of PR]
[2018-06-19 05:22:26] <aniketp> *I
[2018-06-19 05:37:26] <aniketp> Also, @asomers, would it be safe to open a new audit trail log file while testing auditctl(2) and then later close it? As in, if it does not affect the already opened logs in /var/audit
[2018-06-19 05:37:31] <aniketp> @somers_ 
[2018-06-19 14:03:38] <somers_> praudit should certainly exit when it opens an empty plain file.  But it's a problem if it does that when opening a pipe or special device like /dev/auditpipe
[2018-06-19 15:31:28] <aniketp> Ping @somers_, the "addres" instead of "address" was to let the function header be in the single line. Is it not acceptable?
[2018-06-19 15:31:28] <aniketp> Else, I can move it to next line.
[2018-06-19 15:33:51] <somers_> It does look wrong.  Splitting lines is fine.  So is "addr", a common abbreviation.
[2018-06-19 15:41:30] <aniketp> Okay, "addr" seems better. Also @somers_, there were two functions in the man-page, bzero() and explicit_bzero(). Does it matter which one I use?
[2018-06-19 15:41:30] <aniketp> It looked like explicit_bzero() is more robust against compiler optimization.
[2018-06-19 15:41:48] <somers_> Nah, bzero is fine
[2018-06-19 15:42:16] <somers_> explicit_bzero is only needed for cases where you aren't going to use the buffer again.  You use it for things like erasing crypto keys before you free memory.
[2018-06-19 16:38:40] <aniketp> @somers_, is this order right?
[2018-06-19 16:38:40] <aniketp> #define _WANT_SEMUN
[2018-06-19 16:38:40] <aniketp> #include <sys/sem.h>
[2018-06-19 16:38:47] <somers_> yeah
[2018-06-19 16:39:30] <aniketp> Cause I get same set of errors whether I #define _WANT_SEMUN or not. @somers_ 
[2018-06-19 16:39:47] <aniketp> A lot of them say "forward declaration of union semun"
[2018-06-19 16:40:16] <somers_> Maybe sem.h is getting included by some other header file
[2018-06-19 16:47:18] <aniketp> I think union semun is not being brought into the program by the definition of _WANT_SEMUN. Cause is sem.h is included in some other program then removing it should work but it gives the familiar "implicit declaration error" @somers_ 
[2018-06-19 16:47:18] <aniketp> Can't we define union semun ourselves? Like linux suggests defining it ourselves
[2018-06-19 16:47:40] <aniketp> s/is/if
[2018-06-19 16:49:01] <somers_> It's definitely in there.  You can see it clearly in sys/sem.h line 79.
[2018-06-19 16:50:27] <aniketp> Yeah I saw, and also the #if defined(_KERNEL) || defined(_WANT_SEMUN) guard
[2018-06-19 16:51:59] <somers_> You know, it should be possible to mount unionfs during the undelete test
[2018-06-19 16:52:06] <somers_> There are many other ATF tests that do mount filesystems
[2018-06-19 16:54:11] <aniketp> Okay, I'll try to do something like that
[2018-06-19 17:00:11] <aniketp> Btw @somers_, This _WANT_SEMUN looks like a recent change. Also it mentions something about the portability. Can it be trusted?
[2018-06-19 17:00:11] <aniketp> https://github.com/freebsd/freebsd/commit/da9d8a0895b658f4ee6d32cc956ecf56d83574c4
[2018-06-19 17:00:46] <aniketp> Cause the "union semun" is not being defined for sure using the _WANT_SEMUN approach
[2018-06-19 17:02:17] <somers_> The portability problem is irrelevant here.  Your tests are among the least portable programs that it is possible to write.
[2018-06-19 17:06:09] <somers_> BTW, the weekly Coverity report came out.  Have you signed up for access yet?
[2018-06-19 17:08:15] <somers_> There are 26 more Coverity issues
[2018-06-19 17:20:15] <aniketp> No @somers_, I haven't. How would I do that?
[2018-06-19 17:20:29] <somers_> Email uqs@freebsd.org
[2018-06-19 17:20:35] <somers_> Ulrich Sporlein
[2018-06-19 17:24:21] <somers_> Ok, I've finished triaging them now.  As soon as you get an account, you can login to Coverity and see them.
[2018-06-19 17:24:38] <somers_> There were 26 issues.  Many were intentional (like calling fsync with fd=-1)
[2018-06-19 17:24:51] <somers_> But there were several real bugs too
[2018-06-19 17:40:43] <aniketp> Sure, I'll mail him.
[2018-06-19 17:41:29] <aniketp> Btw @somers_, why sendmsg though? 
[2018-06-19 17:41:54] <aniketp> Till now, I dislike execve(2) the most :/
[2018-06-19 17:42:07] <somers_> You never tried to use msghdr.msg_control
[2018-06-20 03:32:21] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-20 03:33:19] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) join
[2018-06-20 04:18:45] * gnn (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-06-20 04:19:41] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-06-20 04:26:25] * gnn_ (~quassel@f373.x.rootbsd.net) join
[2018-06-20 04:28:50] * gnn (~quassel@f373.x.rootbsd.net) quit Read error: Operation timed out
[2018-06-20 04:33:19] * gnn_ (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-06-20 04:33:24] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-06-20 04:37:20] * gnn_ (~quassel@f373.x.rootbsd.net) join
[2018-06-20 04:38:09] * gnn (~quassel@f373.x.rootbsd.net) quit Ping timeout: 268 seconds
[2018-06-20 15:56:53] <aniketp> Btw @somers_, ntp_adjtime(2) uses struct timex which has so many members, how can I initialize them all?
[2018-06-20 15:56:53] <aniketp> Is there a way to manipulate the return structure of "ntp_gettime(2)" (which uses struct ntptimeval)
[2018-06-20 15:57:33] <somers_> I don't see how; they're different structures
[2018-06-20 15:58:59] <somers_> But I think that if you set timex.modes = 0, then the kernel won't update any of the other things.  So bzeroing the whole structure would probably work
[2018-06-20 15:59:26] <aniketp> Okay, will try it.
[2018-06-20 16:09:13] <aniketp> Also, @somers_ , in the cleanup of auditctl(2), shall I add something like this?
[2018-06-20 16:09:13] <aniketp> If the auditd(8) is not running, then don't do anything. Since after auditctl(2) tests were executed, auditd(8) was stopped and started multiple times.
[2018-06-20 16:09:13] <aniketp> If it is running, then stop and start it?
[2018-06-20 16:09:58] <somers_> Yeah
[2018-06-20 16:17:36] <aniketp> @somers_ defining _WANT_SEMUN and removing the union semun definitions results in 20+ fatal errors: Most of them pointing to forward declaration of union semun, means the defined macro didn't do anything
[2018-06-20 16:19:06] <somers_> That probably means you're defining _WANT_SEMUN in the wrong place
[2018-06-20 16:19:41] <aniketp> I did it above all kernel header includes :/
[2018-06-20 16:23:47] <aniketp> Also @somers_, is this cleanup fine: https://pastebin.com/4HucXpSV
[2018-06-20 16:26:05] <somers_> why did you inline the common cleanup function?
[2018-06-20 16:26:20] <somers_> Oh i see.  You inverted the condition
[2018-06-20 16:27:27] <somers_> Yeah, that should be ok.  But it's confusing, so make sure you document it.
[2018-06-20 16:27:45] <aniketp> Okay, will do that.
[2018-06-20 16:31:14] <aniketp> Btw @somers_, I got the same "Invalid argument" on using Q_SYNC
[2018-06-20 16:35:06] <somers_> darn.
[2018-06-20 16:35:26] <aniketp> Also confirmed the ufs mountpoint using, mount -t ufs
[2018-06-20 16:35:42] <aniketp> It outputs: "/dev/ada0p2 on / (ufs, local, journaled soft-updates)"
[2018-06-20 16:35:46] <aniketp> @somers_ 
[2018-06-20 16:36:08] <somers_> what are you doing with ufs?
[2018-06-20 16:37:05] <aniketp> Man page said: " Currently quotas are supported only for the “ufs” file system." @somers_ 
[2018-06-20 16:37:19] <aniketp> Besides, I only have UFS mounted
[2018-06-20 16:37:29] <somers_> Hm, I don't think that's true.  ZFS also supports them.
[2018-06-20 16:37:50] <aniketp> But I'm too "noob" to use ZFS :P
[2018-06-20 16:37:58] <aniketp> Seeing from the installation
[2018-06-20 16:38:08] <somers_> For VMs, UFS is better.
[2018-06-20 16:38:23] <aniketp> So what are we gonna do about quotactl(2)?
[2018-06-20 16:38:52] <somers_> I guess we just have to forget about the success case, and only test the error case
[2018-06-20 16:39:06] <somers_> If tmpfs supported quotas, then we could use it.
[2018-06-20 16:39:14] <somers_> But it doesn't.
[2018-06-20 16:54:24] <aniketp> Okay, although how would I know whether accounting was enabled/disabled from within the program?
[2018-06-20 16:54:24] <aniketp> For ex: This code always prints out 0: https://pastebin.com/66WHPkmk
[2018-06-20 16:54:27] <aniketp> @somers_ 
[2018-06-20 16:55:38] <somers_> You're looking at sysctl's return status, not its standard output
[2018-06-20 16:56:27] <aniketp> Yeah, the standard output was 0 or 1 accordingly. But how would I get that from within the program? @somers_ 
[2018-06-20 16:57:01] <somers_> Best to use sysctl(2)
[2018-06-20 16:57:35] <aniketp> There wasn't any sysctl(2) @somers_ :/
[2018-06-20 16:57:51] <somers_> Actually sysctl(3)
[2018-06-20 16:58:26] <aniketp> Woah, there are so many arguments...
[2018-06-20 17:04:33] * somers__ (~somers@63-224-81-84.hlrn.qwest.net) join
[2018-06-20 17:07:03] * somers_ (~somers@63-224-81-55.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-20 17:41:06] <aniketp> @somers_ I was having a hard time understanding different approaches to using the sysctl(3). Can you please point to the right argument values I should use for kern.acct_configured case?
[2018-06-20 17:53:01] <aniketp> @somers__ 
[2018-06-20 19:16:01] <somers__> Firstly, it's probably more convenient to use sysctlbyname
[2018-06-20 19:18:16] <somers__> I think the value is going to be an int
[2018-06-20 19:18:35] <somers__> But you can double check by checking the value of newlen after sysctlbyname returns
[2018-06-21 06:05:37] <aniketp> Thanks! I was able to get the tests to work for acct_success using sysctlbyname(2)
[2018-06-21 06:05:37] <aniketp> The approach I'm using is to check if the accounting was enabled. If it was, then we switch it to our path, and reset it back to original path at /var/account/acct after the tests complete.
[2018-06-21 06:05:37] <aniketp> If is was disabled before, I don't even turn it on by passing NULL as the path argument.
[2018-06-21 06:05:37] <aniketp> I also verified that, if the accouting was already running, it resumed normally in /var/account/acct
[2018-06-21 06:05:37] <aniketp> Here is the test: https://pastebin.com/Eeg5b7x3   @somers__ 
[2018-06-21 08:39:39] <aniketp> Also, @somers__, I again got "operation not supported" with normal/forced mount(2) of "nullfs" and "tmpfs" 
[2018-06-21 14:27:47] <somers__> Why are you doing all of that stuff in the test body instead of the cleanup?
[2018-06-21 14:28:46] <somers__> aniketp: restarting auditd must be done in the cleanup phase.  Where it is right now, it might not run, if the test fails
[2018-06-21 14:44:00] <aniketp> @somers__ I'm starting/stopping the accounting in test body. auditd(8) is normally handled in the cleanup() function. 
[2018-06-21 14:44:45] <aniketp> Also, I need access to auditinfo variable so couldn't do the accounting stuff in cleanup, as you said we can't share state between test case parts
[2018-06-21 14:48:15] <somers__> You can share state via the filesystem, just as you do for the common code that starts and stops auditd
[2018-06-21 14:54:32] <aniketp> Okay, can I make the variable acctinfo global, as a simpler solution? Like, initialize it as 0, and if accounting was enabled already, change it to 1 which can be used by the cleanup part. Also, acctinfo is only being used by acct_success case so we can be sure that no other test case would modify it
[2018-06-21 14:54:36] <aniketp> @somers__ 
[2018-06-21 14:55:23] <somers__> Nope.  Cleanup runs in a separate process
[2018-06-21 14:55:46] <aniketp> Okay, I'll create a file then.
[2018-06-21 15:08:16] <aniketp> Btw @somers__ I'm creating a file "fileforacctaudit" for passing it to acct(2) in case it is already enabled. Can I use it as the file?
[2018-06-21 15:08:51] <somers__> No, because I don't think that file should be conditional.
[2018-06-21 15:08:56] <aniketp> Here: https://pastebin.com/MH71Z0Z4
[2018-06-21 15:09:21] <aniketp> But we only stop, start accounting when it was already enabled
[2018-06-21 15:09:32] <aniketp> Else we don't tamper with it
[2018-06-21 15:09:37] <aniketp> @somers__ \
[2018-06-21 15:11:03] <somers__> Yes you do.  Switching to a different accounting file is just as disruptive as stopping accounting altogether.
[2018-06-21 15:12:13] <aniketp> But I'm stopping it only when it was already stopped.. @somers__ 
[2018-06-21 15:12:13] <aniketp> I switch the accounting file when it was already enabled, and that is when we need to reset everything
[2018-06-21 15:12:31] <aniketp> For the first case, I didn't even need to create the file
[2018-06-21 15:13:55] <somers__> What are you talking about?  The cleanup phase or the test phase?
[2018-06-21 15:15:46] <aniketp> I was talking about when we need to create the "fileforacctaudit" file. It is only created when accounting was already enabled. For the other case, we don't create the file so it doesn't exist and hence, the cleanup of accounting doesn't even happen. Because atf_utils_file_exists() returns false 
[2018-06-21 15:15:50] <aniketp> @somers__ 
[2018-06-21 15:20:01] <somers__> Ok, I see that.  But I'm not sure what advantage that approach would have over the straightforward approach of creating a separate file to indicate acct status, and unconditionally calling acct("fileforaudit") in the body
[2018-06-21 15:23:31] <aniketp> Okay, so you mean, creating a file with something like: system("sysctl kern.acct_configured && touch acct_enabled")? @somers__ 
[2018-06-21 15:24:21] <somers__> That would be the clumsy way to do it.  The better way would be to use sysctlbyname like you're currently doing, and then create the file with open("acct_enabled", O_CREAT)
[2018-06-21 15:28:11] <aniketp> That will essentially create two files for similar code.. That is how I'm creating "fileforacctaudit" . If the sysctlbyname(3) returns acctinfo as 1.
[2018-06-21 15:28:11] <aniketp> What you suggested would have two open(2) calls within same if condition, @somers__ 
[2018-06-21 15:28:40] <somers__> No, I'm suggesting that you create fileforacctaudit unconditionally
[2018-06-21 15:30:50] <aniketp> I didn't understand @somers__ . fileforacctaudit is the path where accounting would be shifted, why should it be created unconditionally?
[2018-06-21 15:31:40] <somers__> Because that's simpler than providing acct(2) with different arguments based on whether accounting was already enabled.
[2018-06-21 15:54:54] <aniketp> Ok @somers__, is this fine: https://pastebin.com/rXp1AJj6
[2018-06-21 15:55:37] <aniketp> Oops, need to close(filedesc2)
[2018-06-21 15:56:25] <somers__> Yeah, that's more like what I had in mind
[2018-06-21 16:02:13] <aniketp> Okay, updated D15898. Btw @somers__, about mount(2), nmount(2) issue? I again got "operation not supported" with normal/forced mount(2) of "nullfs" and "tmpfs" 
[2018-06-21 16:03:19] <somers__> You may find it easier to play with mount(8) first before you try doing it with mount(2)
[2018-06-21 23:05:04] * somers_ (~somers@63-224-81-65.hlrn.qwest.net) join
[2018-06-21 23:07:23] * somers__ (~somers@63-224-81-84.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-21 23:59:56] <aniketp> Ping @somers_, I was able to get #define _WANT_SEMUN to work.
[2018-06-22 00:00:18] <somers_> cool.  what was the trick?
[2018-06-22 00:00:48] <aniketp> I guess I should have defined _WANT_SEMUN right above the sem.h include. I was including it way above the first include. I think probably some #endif might have closed it up 
[2018-06-22 00:01:41] <aniketp> @somers_ 
[2018-06-22 00:03:58] <aniketp> Wait, it even works on defining _WANT_SEMUN at the top. Not sure what made it work.. 😅
[2018-06-22 00:13:18] * somers__ (~somers@63-224-81-82.hlrn.qwest.net) join
[2018-06-22 00:15:13] * somers_ (~somers@63-224-81-65.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 00:36:08] * somers__ (~somers@63-224-81-82.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-22 00:37:01] * somers__ (~somers@63-224-81-82.hlrn.qwest.net) join
[2018-06-22 01:47:59] * somers__ (~somers@63-224-81-82.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 01:51:53] * somers (~somers@63-224-81-208.hlrn.qwest.net) join
[2018-06-22 01:56:25] * somers (~somers@63-224-81-208.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 01:57:55] * somers (~somers@63-224-80-21.hlrn.qwest.net) join
[2018-06-22 02:30:46] * somers_ (~somers@63-224-81-7.hlrn.qwest.net) join
[2018-06-22 02:36:57] * somers (~somers@63-224-80-21.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 02:38:49] * somers (~somers@63-224-81-223.hlrn.qwest.net) join
[2018-06-22 02:41:05] * somers_ (~somers@63-224-81-7.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 02:43:21] * somers (~somers@63-224-81-223.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 02:50:07] * somers (~somers@63-224-80-141.hlrn.qwest.net) join
[2018-06-22 03:41:39] * somers (~somers@63-224-80-141.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 03:42:36] * somers (~somers@63.224.81.127) join
[2018-06-22 03:53:34] * somers (~somers@63.224.81.127) quit Ping timeout: 633 seconds
[2018-06-22 05:50:15] * somers (~somers@63-224-81-191.hlrn.qwest.net) join
[2018-06-22 05:57:41] * somers (~somers@63-224-81-191.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 05:58:44] * somers (~somers@63-224-81-80.hlrn.qwest.net) join
[2018-06-22 06:03:11] * somers (~somers@63-224-81-80.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 06:04:14] * somers (~somers@63-224-81-5.hlrn.qwest.net) join
[2018-06-22 06:11:59] * somers (~somers@63-224-81-5.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 08:20:32] * somers (~somers@63-224-80-23.hlrn.qwest.net) join
[2018-06-22 08:27:34] * somers_ (~somers@63-224-81-91.hlrn.qwest.net) join
[2018-06-22 08:30:50] * somers__ (~somers@63-224-81-106.hlrn.qwest.net) join
[2018-06-22 08:33:24] * somers (~somers@63-224-80-23.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 08:34:21] * somers (~somers@63-224-80-54.hlrn.qwest.net) join
[2018-06-22 08:37:44] * somers_ (~somers@63-224-81-91.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 08:39:43] * somers__ (~somers@63-224-81-106.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 08:44:46] * somers_ (~somers@63-224-80-76.hlrn.qwest.net) join
[2018-06-22 08:45:16] * somers (~somers@63-224-80-54.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 08:47:55] * somers__ (~somers@63-224-81-202.hlrn.qwest.net) join
[2018-06-22 08:53:23] * somers (~somers@63-224-80-43.hlrn.qwest.net) join
[2018-06-22 08:55:36] * somers__ (~somers@63-224-81-202.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 08:56:17] * somers_ (~somers@63-224-80-76.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 09:00:51] * somers_ (~somers@63-224-81-36.hlrn.qwest.net) join
[2018-06-22 09:04:24] * somers (~somers@63-224-80-43.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 09:11:30] * somers_ (~somers@63-224-81-36.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 09:27:08] * somers (~somers@63-224-80-100.hlrn.qwest.net) join
[2018-06-22 09:32:51] * somers_ (~somers@63-224-80-66.hlrn.qwest.net) join
[2018-06-22 09:39:31] * somers (~somers@63-224-80-100.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 09:39:48] * somers__ (~somers@63-224-81-234.hlrn.qwest.net) join
[2018-06-22 09:46:10] * somers_ (~somers@63-224-80-66.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 09:47:56] * somers_ (~somers@63-224-80-98.hlrn.qwest.net) join
[2018-06-22 09:52:09] * somers__ (~somers@63-224-81-234.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 09:54:01] * somers (~somers@63-224-80-190.hlrn.qwest.net) join
[2018-06-22 09:57:44] * somers__ (~somers@63-224-81-16.hlrn.qwest.net) join
[2018-06-22 09:59:44] * somers_ (~somers@63-224-80-98.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 10:00:03] * somers (~somers@63-224-80-190.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 10:02:39] * somers_ (~somers@63-224-81-244.hlrn.qwest.net) join
[2018-06-22 10:04:27] * somers__ (~somers@63-224-81-16.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 10:04:30] * somers_ (~somers@63-224-81-244.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-22 10:05:53] * somers_ (~somers@63.224.81.244) join
[2018-06-22 10:10:19] * somers_ (~somers@63.224.81.244) quit Ping timeout: 252 seconds
[2018-06-22 10:12:10] * somers (~somers@63-224-81-249.hlrn.qwest.net) join
[2018-06-22 10:14:34] * somers_ (~somers@63-224-80-223.hlrn.qwest.net) join
[2018-06-22 10:19:38] * somers (~somers@63-224-81-249.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 10:30:24] * somers_ (~somers@63-224-80-223.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 10:31:15] * somers (~somers@63-224-80-222.hlrn.qwest.net) join
[2018-06-22 10:35:46] * somers_ (~somers@63-224-80-18.hlrn.qwest.net) join
[2018-06-22 10:37:49] * somers (~somers@63-224-80-222.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 10:38:34] * somers (~somers@63-224-81-122.hlrn.qwest.net) join
[2018-06-22 10:40:23] * somers_ (~somers@63-224-80-18.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 10:51:29] * somers_ (~somers@63-224-81-53.hlrn.qwest.net) join
[2018-06-22 10:55:05] * somers (~somers@63-224-81-122.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 11:01:31] * somers (~somers@63-224-80-86.hlrn.qwest.net) join
[2018-06-22 11:01:39] * somers (~somers@63-224-80-86.hlrn.qwest.net) quit Remote host closed the connection
[2018-06-22 11:02:44] * somers_ (~somers@63-224-81-53.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 11:08:50] * somers (~somers@63-224-81-134.hlrn.qwest.net) join
[2018-06-22 11:12:09] * somers_ (~somers@63-224-80-27.hlrn.qwest.net) join
[2018-06-22 11:19:08] * somers (~somers@63-224-81-134.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 11:19:50] * somers_ (~somers@63-224-80-27.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 11:20:03] * somers (~somers@63-224-81-65.hlrn.qwest.net) join
[2018-06-22 11:24:28] * somers_ (~somers@63-224-81-57.hlrn.qwest.net) join
[2018-06-22 11:26:59] * somers__ (~somers@63-224-81-57.hlrn.qwest.net) join
[2018-06-22 11:27:00] * somers_ (~somers@63-224-81-57.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-22 11:28:45] * somers_ (~somers@63-224-81-232.hlrn.qwest.net) join
[2018-06-22 11:32:58] * somers (~somers@63-224-81-65.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 11:37:22] * somers_ (~somers@63-224-81-232.hlrn.qwest.net) quit Remote host closed the connection
[2018-06-22 11:37:54] * somers__ (~somers@63-224-81-57.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 11:38:14] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) join
[2018-06-22 11:44:14] * somers (~somers@63-224-81-243.hlrn.qwest.net) join
[2018-06-22 11:47:38] * somers__ (~somers@63-224-80-70.hlrn.qwest.net) join
[2018-06-22 11:49:37] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 11:52:24] * somers_ (~somers@63-224-81-203.hlrn.qwest.net) join
[2018-06-22 11:54:44] * somers (~somers@63-224-81-243.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 11:55:13] * somers__ (~somers@63-224-80-70.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 12:02:43] * somers__ (~somers@63-224-81-15.hlrn.qwest.net) join
[2018-06-22 12:06:52] * somers (~somers@63-224-81-15.hlrn.qwest.net) join
[2018-06-22 12:06:53] * somers__ (~somers@63-224-81-15.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-22 12:09:17] * somers_ (~somers@63-224-81-203.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 12:12:57] * somers_ (~somers@63-224-81-7.hlrn.qwest.net) join
[2018-06-22 12:17:55] * somers_ (~somers@63-224-81-7.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 12:18:16] * somers_ (~somers@63-224-80-130.hlrn.qwest.net) join
[2018-06-22 12:19:34] * somers (~somers@63-224-81-15.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 12:27:12] * somers (~somers@63-224-80-228.hlrn.qwest.net) join
[2018-06-22 12:30:14] * somers__ (~somers@63-224-80-202.hlrn.qwest.net) join
[2018-06-22 12:30:56] * somers_ (~somers@63-224-80-130.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 12:38:20] * somers (~somers@63-224-80-228.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 12:40:32] * somers (~somers@63-224-81-165.hlrn.qwest.net) join
[2018-06-22 12:45:07] * somers__ (~somers@63-224-80-202.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 12:45:07] * somers (~somers@63-224-81-165.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-22 12:45:19] * somers (~somers@63-224-81-165.hlrn.qwest.net) join
[2018-06-22 12:50:42] * somers_ (~somers@63-224-81-188.hlrn.qwest.net) join
[2018-06-22 12:58:37] * somers__ (~somers@63-224-80-174.hlrn.qwest.net) join
[2018-06-22 12:59:45] * somers (~somers@63-224-81-165.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 13:08:15] * somers_ (~somers@63-224-81-188.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 13:09:03] * somers__ (~somers@63-224-80-174.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-22 14:11:16] * somers (~somers@63-224-81-37.hlrn.qwest.net) join
[2018-06-22 14:35:03] * somers (~somers@63-224-81-37.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 14:42:53] * somers (~somers@63-224-80-147.hlrn.qwest.net) join
[2018-06-22 14:44:11] * somers (~somers@63-224-80-147.hlrn.qwest.net) quit Remote host closed the connection
[2018-06-22 14:45:40] * somers (~somers@63-224-80-147.hlrn.qwest.net) join
[2018-06-22 14:51:19] * somers (~somers@63-224-80-147.hlrn.qwest.net) quit Quit: Leaving
[2018-06-22 14:52:43] * somers (~somers@63-224-80-147.hlrn.qwest.net) join
[2018-06-22 15:10:28] <aniketp> Ping @somers_, I was trying to audit setpgrp(2). According to the man-page, calling setpgrp(0,0) attaches current process to its own process group, essentially changing nothing. An independent program worked but setpgrp_success test-case always failed saying "setpgrp(0,0) != 0"
[2018-06-22 15:10:33] <aniketp> @somers 
[2018-06-22 15:11:15] <somers> did you check the errno?
[2018-06-22 15:11:30] <aniketp> From within the test case?
[2018-06-22 15:12:13] <aniketp> @somers 
[2018-06-22 15:12:21] <somers> yeah
[2018-06-22 15:12:35] <aniketp> Okay, will do that
[2018-06-22 15:17:50] <aniketp> @somers, it was EPERM: "return,failure : Operation not permitted"
[2018-06-22 15:19:03] * somers (~somers@63-224-80-147.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 15:19:30] * somers (~somers@63-224-80-171.hlrn.qwest.net) join
[2018-06-22 15:35:27] * somers_ (~somers@63-224-80-122.hlrn.qwest.net) join
[2018-06-22 15:35:44] * somers (~somers@63-224-80-171.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 16:23:46] <aniketp> Ping @somers_, those tests were all I could audit for IPC. message queue POSIX syscalls were not auditable. 
[2018-06-22 16:24:19] <aniketp> Probably the most interesting audit class
[2018-06-22 16:24:31] <somers_> why not?
[2018-06-22 16:25:56] <aniketp> I tried out a sample program to confirm their audit, For eg, mq_open(2) did not show up in the auditpipe. Also, I later confirmed that ar->ar_event switch case in audit_bsm.c did not have any case for AUE_MQ_OPEN (or something similar)
[2018-06-22 16:26:06] <aniketp> And same for its friends @somers_ 
[2018-06-22 16:26:38] <aniketp> Although, I'll give another run down once these basic syscalls are merged
[2018-06-22 16:26:54] <somers_> It's in /etc/security/audit_event.  So it's supposed to be auditted.  If it isn't, then that's a bug.
[2018-06-22 16:27:21] <somers_> Go ahead and open a PR, and commit a test case with atf_tc_expect_fail
[2018-06-22 16:27:51] <aniketp> @rwatson said about this issue earlier. "FYI, the main sources of non-auditing in system calls are most likely (a) it wasn't required by the Orange Book / CAPP; (b) it relates to new system calls that arrived after audit was introduced; or (c) where there are substantial differences from Mac OS X and we mucked up the merge."
[2018-06-22 16:27:59] <aniketp> @somers_ 
[2018-06-22 16:28:45] <somers_> this is none of those
[2018-06-22 16:29:10] <somers_> rwatson was referring to syscalls that are explicitly in the "no" class, or that aren't in audit_event at all.
[2018-06-22 16:32:24] <somers_> If AUE_MQ_OPEN isn't handled in kaudit_to_bsm, then it should print something like "BSM conversion requested for unknown event" to dmesg.  Did it?
[2018-06-22 16:39:25] <aniketp> Weird, its not showing up now. But it did show up for lgetfh(2) and chflagsat(2) @somers_ 
[2018-06-22 16:39:42] <aniketp> Maybe there is an issue with my implementation
[2018-06-22 16:42:43] <somers_> The "unknown event" message showed up for lgetfh and chflagsat?
[2018-06-22 16:44:35] <aniketp> Yeah, lgetfh(2): BSM conversion requested for unknown event 43061
[2018-06-22 16:44:53] <aniketp> chflagsat: BSM conversion requested for unknown event 43209
[2018-06-22 16:45:14] <aniketp> @somers_ , I recorded them as I thought it could be useful
[2018-06-22 16:45:35] <aniketp> But it should also show similar message for mq_open(2)
[2018-06-22 16:45:42] <aniketp> Not sure why it isn't showing up
[2018-06-22 16:46:01] <somers_> Are you filtering out that audit class?
[2018-06-22 16:46:46] <aniketp> Yeah, I set "ip" in /etc/security/audit_class "flag"
[2018-06-22 16:47:08] <aniketp> I'll try creating an expected failure test and see if I get it them
[2018-06-22 16:47:38] <aniketp> *That is how I got those messages for lgetfh(2) and chflagsat(2) @somers_ : https://github.com/aniketp/AuditTestSuite/commit/e1189c4e563f034202f6bc28bf2a44a4ed935edc
[2018-06-22 16:48:04] <somers_> Make sure you open PRs for those
[2018-06-22 16:48:58] <aniketp> Already there: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228374
[2018-06-22 16:49:02] <aniketp> @somers_ 
[2018-06-22 16:49:43] <aniketp> I'll try to find out the event number for mq_open(2) and friends and open their PR too
[2018-06-22 18:58:10] * somers_ (~somers@63-224-80-122.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-22 18:58:33] * somers (~somers@63-224-81-16.hlrn.qwest.net) join
[2018-06-22 19:02:04] * somers_ (~somers@63-224-80-203.hlrn.qwest.net) join
[2018-06-22 19:03:05] * somers (~somers@63-224-81-16.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:06:06] * somers__ (~somers@63-224-81-244.hlrn.qwest.net) join
[2018-06-22 19:07:51] * somers_ (~somers@63-224-80-203.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:09:10] * somers_ (~somers@63-224-81-249.hlrn.qwest.net) join
[2018-06-22 19:10:25] * somers__ (~somers@63-224-81-244.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:18:07] * somers_ (~somers@63-224-81-249.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:25:45] * somers (~somers@63-224-80-113.hlrn.qwest.net) join
[2018-06-22 19:30:57] * somers (~somers@63-224-80-113.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:32:01] * somers (~somers@63-224-80-221.hlrn.qwest.net) join
[2018-06-22 19:36:27] * somers (~somers@63-224-80-221.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 19:40:58] * somers (~somers@63-224-80-42.hlrn.qwest.net) join
[2018-06-22 19:49:28] * somers_ (~somers@63-224-81-189.hlrn.qwest.net) join
[2018-06-22 19:52:45] * somers (~somers@63-224-80-42.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-22 19:57:20] * somers__ (~somers@63-224-81-65.hlrn.qwest.net) join
[2018-06-22 19:59:33] * somers_ (~somers@63-224-81-189.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 20:00:18] * somers_ (~somers@63-224-81-10.hlrn.qwest.net) join
[2018-06-22 20:01:45] * somers__ (~somers@63-224-81-65.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 20:03:52] * somers__ (~somers@63-224-81-57.hlrn.qwest.net) join
[2018-06-22 20:05:03] * somers_ (~somers@63-224-81-10.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 20:05:34] * somers_ (~somers@63-224-81-17.hlrn.qwest.net) join
[2018-06-22 20:08:21] * somers__ (~somers@63-224-81-57.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 20:13:11] * somers (~somers@63-224-80-58.hlrn.qwest.net) join
[2018-06-22 20:13:29] * somers_ (~somers@63-224-81-17.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-22 20:16:05] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) join
[2018-06-22 20:16:43] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) quit Remote host closed the connection
[2018-06-22 20:17:53] * somers (~somers@63-224-80-58.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-27 05:19:18] * mpts (~mpts@boston-packets.hackerspace.pl) quit Read error: Operation timed out
[2018-06-27 05:19:19] * mpts_ (~mpts@boston-packets.hackerspace.pl) join
[2018-06-27 14:13:22] * somers (~somers@63-224-81-57.hlrn.qwest.net) join
[2018-06-27 14:15:04] <aniketp> Ping @somers, I added swapon(2), swapoff(2) and auditon(2) in the D15898 for administrative syscalls. swapon(2) and swapoff(2) required block devices so couldn't test them in success mode. 
[2018-06-27 14:15:36] <somers> can you use them with a swap file?
[2018-06-27 14:17:33] <aniketp> The manpage explicitely mentioned "special" block device. Did not try it with a swap file
[2018-06-27 14:18:00] <aniketp> But is there a way to create the swap file from the program? @somers 
[2018-06-27 14:18:12] <somers> dunno.  I've never tried
[2018-06-27 14:19:08] <aniketp> I saw some command line methods in the FreeBSD forum. Don't think they mentioned doing that with some syscall or library function
[2018-06-27 14:21:41] <aniketp> @somers, I tried swapon(2) with my swap partition listed in /etc/fstab: got "return,failure : Device busy"
[2018-06-27 14:21:55] <aniketp> maybe swapoff(2) would work
[2018-06-27 14:23:39] <aniketp> Yeah, turning it off and then on worked. 
[2018-06-27 14:42:26] <aniketp> Btw @somers, can the current state of D15898 be committed? (After you review the new tests)
[2018-06-27 14:42:26] <aniketp> I'll add mount(2) and nmount(2) success as soon as I get it to execute successfully. 
[2018-06-27 14:42:26] <aniketp> Also, adding tests for clock_settime(2)
[2018-06-27 14:43:41] <somers> I haven't reviewed the latest version yet.  But it's ok if you want to do mount in a separate commit
[2018-06-27 14:45:11] <aniketp> Sure. Also about swap{on/off}(2). I tried them with my swap device "/dev/ada0p3". They both worked. I'll see if I can create a swap file from within the program and pass them as the argument. @somers 
[2018-06-27 15:01:39] <somers> I'll wait on D15898 while you work with swapon and swapoff
[2018-06-27 15:01:54] <aniketp> Okay
[2018-06-27 15:02:33] <aniketp> Btw I can add them with mount(2) later on too. Now sure how easy/difficult it would be.
[2018-06-27 15:03:35] <aniketp> Btw @somers, Is it fine if I create a separate revision specifically for them later on? D15898 already has quite a lot of syscalls. 
[2018-06-27 15:05:30] <somers> ok
[2018-06-27 16:25:15] <aniketp> Btw @somers, "./process-control setsid_failure " was passing the tests for me
[2018-06-27 16:26:46] <aniketp> I think the second statement of EPERM might be the reason for failure "The calling process is already a process group leader, or the process group ID of a process other than the calling process matches the process ID of the calling process."
[2018-06-27 16:27:17] <aniketp> some other process might have the same process ID as the calling process
[2018-06-27 16:27:47] <aniketp> @somers did the tests fail for you with ./process-control setsid_failure 
[2018-06-27 16:29:17] <somers> No.  No two processes will ever have the same PID at the same time.
[2018-06-27 16:29:32] <aniketp> No I meant process group ID
[2018-06-27 16:29:35] <somers> Yes, that command fails for me
[2018-06-27 16:29:59] <aniketp> Like the child and parent process do have same process group ID
[2018-06-27 16:30:17] <somers> It's easy to check for pgid.  Just do "ps -ax -O pgid -d"
[2018-06-27 16:31:14] <somers> Hm, I've found a bug in auditd.  It's not reaping its children.
[2018-06-27 16:31:16] <somers> 21642 21642  -  Is      0:01.58 |-- /usr/sbin/auditd
[2018-06-27 16:31:16] <somers> 21643 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:16] <somers> 21644 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:16] <somers> 21645 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:16] <somers> 21648 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:17] <somers> 21649 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:19] <somers> 21650 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:21] <somers> 21652 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:23] <somers> 21653 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:25] <somers> 21654 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:27] <somers> 21655 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:31] <somers> 21656 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:33] <somers> 21657 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:35] <somers> 21659 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:37] <somers> 21660 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:39] <somers> 21662 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:41] <somers> 21663 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:43] <somers> 21665 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:45] <somers> 21667 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:47] <somers> 21668 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:49] <somers> 21670 21642  -  Z       0:00.00 | |-- <defunct>
[2018-06-27 16:31:51] <somers> 21671 21642  -  Z       0:00.00 | `-- <defunct>
[2018-06-27 16:32:50] <aniketp> Ooh zombie processes?
[2018-06-27 16:33:04] <somers> Yeah.  I don't know what they were
[2018-06-27 16:34:38] <somers> I wonder if it's related to the 76,036 files I have in /var/audit
[2018-06-27 16:35:41] <aniketp> Woah! I just have 10. And I never delete them... 
[2018-06-27 16:35:41] <aniketp> Btw @somers, in one of the mails earlier you said that they expire after some time?
[2018-06-27 16:35:50] <somers> what expires?
[2018-06-27 16:35:59] <aniketp> the stuff in /var/audit
[2018-06-27 16:36:27] <somers> Yeah.  The expiration policy is set in /etc/security/audit_control
[2018-06-27 16:46:31] <aniketp> Btw @somers, what if I call setsid() twice?
[2018-06-27 16:46:31] <aniketp> The second time it is bound to fail, right? Like. the first time it will create a new session with same process group Id as the PID of calling process. The second time EPERM will start shouting because of two same PGIDS?
[2018-06-27 16:47:27] <somers> Yep, that should work
[2018-06-27 16:49:06] <aniketp> Btw the tests don't fail for me so I can't confirm it that worked :/. Cause the failure test passed for me even by just one setsid().
[2018-06-27 16:58:39] <aniketp> Also @somers, wouldn't A_GETCLASS fill up the evclass buffer with the event-class mapping? 
[2018-06-27 16:58:50] <aniketp> I thought every "GET" commands worked like this
[2018-06-27 16:59:08] <somers> For A_GETCLASS, the argument is both input and output
[2018-06-27 16:59:26] <aniketp> So bzeroing would work? @somers 
[2018-06-27 17:00:19] <somers> No.  It should be a valid input
[2018-06-27 17:42:13] <somers> When you're running tests, do you leave auditd running all the time?
[2018-06-27 17:42:55] <somers> I just got a total failure of my VM because all those zombies hit the process limit
[2018-06-27 17:47:32] <somers> I can see from the audit trail that one of the zombies is a grep process.  None of the other zombies showed up
[2018-06-27 17:57:47] <somers> Hm.  Ktrace shows that all zombies are running /etc/security/audit_warn
[2018-06-27 18:19:55] <aniketp> Yeah @somers, I never stop auditd(8)
[2018-06-27 18:20:28] <somers> That's why you don't see the problem, then.  I run with auditd off, because I figure that's more fragile
[2018-06-27 18:20:45] <somers> But it creates far more audit trails, which leads to the zombie problem.  I'm investigating now.
[2018-06-27 18:22:11] <aniketp> Oh, alright. Btw after you fixed the bad Tailq panic, I gave multiple auditd(8) start-stop runs to all my 500+ tests then. But I did not notice any such problems 
[2018-06-27 18:22:13] <aniketp> @somers 
[2018-06-27 18:22:50] <aniketp> Also, the audit trails probably never exceeded some countable number
[2018-06-27 18:23:31] <somers> Well, obviously.  But something tells me that you aren't talking about cardinality
[2018-06-27 18:29:26] <aniketp> Yes, true. In my reference, 76,036 is equivalent to Aleph-naught :P
[2018-06-27 21:31:49] * somers (~somers@63-224-81-57.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-27 23:52:07] * somers (~somers@63.224.81.99) join
[2018-06-28 10:11:48] * somers_ (~somers@63-224-80-181.hlrn.qwest.net) join
[2018-06-28 10:13:45] * somers (~somers@63.224.81.99) quit Ping timeout: 252 seconds
[2018-06-28 10:15:51] * somers__ (~somers@63-224-80-130.hlrn.qwest.net) join
[2018-06-28 10:20:24] * somers (~somers@63-224-81-82.hlrn.qwest.net) join
[2018-06-28 10:25:30] * somers_ (~somers@63-224-80-181.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-28 10:26:44] * somers__ (~somers@63-224-80-130.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-28 10:27:19] * somers (~somers@63-224-81-82.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-28 12:24:02] * somers (~somers@63-224-80-202.hlrn.qwest.net) join
[2018-06-28 12:26:54] * somers_ (~somers@63-224-81-245.hlrn.qwest.net) join
[2018-06-28 12:28:42] * somers__ (~somers@63-224-80-37.hlrn.qwest.net) join
[2018-06-28 12:35:14] * somers_ (~somers@63-224-81-245.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-28 12:36:13] * somers (~somers@63-224-80-202.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-28 12:36:44] * somers__ (~somers@63-224-80-37.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-28 14:31:44] * somers (~somers@63-224-81-235.hlrn.qwest.net) join
[2018-06-28 14:34:19] * somers_ (~somers@63-224-80-186.hlrn.qwest.net) join
[2018-06-28 14:39:44] * somers (~somers@63-224-81-235.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-28 16:38:01] <aniketp> Hi @somers_, does the pull request that you created in openbsm solve the zombie process issue? From what I could understand you manipulated the signal handling using struct sigaction
[2018-06-28 16:38:29] <somers_> There are two issues.  The PR only solves one.
[2018-06-28 18:13:27] <aniketp> Okay, also about the two revisions? @somers_ 
[2018-06-28 18:16:04] <somers_> haven't reviewed them yet
[2018-06-29 06:55:46] * somers__ (~somers@63-224-80-59.hlrn.qwest.net) join
[2018-06-29 07:02:15] * somers_ (~somers@63-224-80-186.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 07:10:26] * somers_ (~somers@63-224-81-11.hlrn.qwest.net) join
[2018-06-29 07:18:10] * somers (~somers@63-224-80-171.hlrn.qwest.net) join
[2018-06-29 07:18:25] * somers__ (~somers@63-224-80-59.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 07:24:29] * somers_ (~somers@63-224-81-11.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 07:25:11] * somers_ (~somers@63-224-81-74.hlrn.qwest.net) join
[2018-06-29 07:27:55] * somers (~somers@63-224-80-171.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 07:32:12] * somers__ (~somers@63-224-81-12.hlrn.qwest.net) join
[2018-06-29 07:35:44] * somers_ (~somers@63-224-81-74.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 10:31:12] * somers_ (~somers@63-224-81-201.hlrn.qwest.net) join
[2018-06-29 10:34:11] * somers__ (~somers@63-224-81-12.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 10:35:33] * somers (~somers@63-224-81-6.hlrn.qwest.net) join
[2018-06-29 10:36:23] * somers_ (~somers@63-224-81-201.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 10:44:55] * somers_ (~somers@63-224-81-30.hlrn.qwest.net) join
[2018-06-29 10:48:07] * somers (~somers@63-224-81-6.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 10:48:18] * somers__ (~somers@63-224-81-244.hlrn.qwest.net) join
[2018-06-29 10:51:47] * somers_ (~somers@63-224-81-30.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 11:13:10] * somers_ (~somers@63-224-81-46.hlrn.qwest.net) join
[2018-06-29 11:16:00] * somers (~somers@63-224-80-27.hlrn.qwest.net) join
[2018-06-29 11:16:43] * somers__ (~somers@63-224-81-244.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 11:17:15] * somers__ (~somers@63-224-80-35.hlrn.qwest.net) join
[2018-06-29 11:18:55] * somers_ (~somers@63-224-81-46.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 11:23:26] * somers (~somers@63-224-80-27.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 11:33:43] * somers_ (~somers@63-224-80-206.hlrn.qwest.net) join
[2018-06-29 11:40:36] * somers__ (~somers@63-224-80-35.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 11:45:55] * somers_ (~somers@63-224-80-206.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-29 13:37:20] * somers (~somers@63-224-80-110.hlrn.qwest.net) join
[2018-06-29 14:19:17] * somers_ (~somers@63-224-80-110.hlrn.qwest.net) join
[2018-06-29 14:24:31] * somers (~somers@63-224-80-110.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-29 14:31:37] * somers__ (~somers@63-224-80-157.hlrn.qwest.net) join
[2018-06-29 14:32:55] * somers (~somers@63-224-80-49.hlrn.qwest.net) join
[2018-06-29 14:33:37] * somers_ (~somers@63-224-80-110.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 14:36:11] * somers__ (~somers@63-224-80-157.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 14:42:41] * somers_ (~somers@63-224-81-188.hlrn.qwest.net) join
[2018-06-29 14:49:34] * somers__ (~somers@63-224-81-130.hlrn.qwest.net) join
[2018-06-29 14:51:23] * somers (~somers@63-224-80-49.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 14:54:04] * somers (~somers@63-224-80-218.hlrn.qwest.net) join
[2018-06-29 14:57:08] * somers_ (~somers@63-224-81-188.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 14:57:53] * somers__ (~somers@63-224-81-130.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 15:13:26] * somers_ (~somers@63-224-80-136.hlrn.qwest.net) join
[2018-06-29 15:15:47] * somers (~somers@63-224-80-218.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 15:19:44] * somers__ (~somers@63-224-81-134.hlrn.qwest.net) join
[2018-06-29 15:21:54] * somers (~somers@63-224-81-134.hlrn.qwest.net) join
[2018-06-29 15:21:54] * somers__ (~somers@63-224-81-134.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-29 15:22:23] * somers_ (~somers@63-224-80-136.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 15:24:06] * somers_ (~somers@63-224-80-142.hlrn.qwest.net) join
[2018-06-29 15:31:28] * somers (~somers@63-224-81-134.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 15:31:52] * somers__ (~somers@63-224-80-113.hlrn.qwest.net) join
[2018-06-29 15:36:08] * somers (~somers@63-224-80-225.hlrn.qwest.net) join
[2018-06-29 15:38:52] * somers_ (~somers@63-224-80-142.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 15:44:32] * somers__ (~somers@63-224-80-113.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-29 15:46:23] * somers_ (~somers@63-224-81-15.hlrn.qwest.net) join
[2018-06-29 15:50:13] * somers__ (~somers@63.224.81.16) join
[2018-06-29 15:52:15] * somers (~somers@63-224-80-225.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 15:54:57] * somers (~somers@63-224-80-238.hlrn.qwest.net) join
[2018-06-29 15:58:31] * somers_ (~somers@63-224-81-15.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-29 16:00:36] * somers_ (~somers@63-224-80-169.hlrn.qwest.net) join
[2018-06-29 16:01:22] * somers__ (~somers@63.224.81.16) quit Read error: Operation timed out
[2018-06-29 16:02:52] * somers__ (~somers@63-224-80-190.hlrn.qwest.net) join
[2018-06-29 16:07:14] * somers (~somers@63-224-80-238.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:08:57] * somers_ (~somers@63-224-80-169.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:11:36] * somers_ (~somers@63-224-80-114.hlrn.qwest.net) join
[2018-06-29 16:15:02] * somers (~somers@63-224-80-204.hlrn.qwest.net) join
[2018-06-29 16:17:46] * somers__ (~somers@63-224-80-190.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:19:27] * somers__ (~somers@63-224-81-80.hlrn.qwest.net) join
[2018-06-29 16:23:06] * somers_ (~somers@63-224-80-114.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:24:26] * somers_ (~somers@63-224-81-111.hlrn.qwest.net) join
[2018-06-29 16:27:31] * somers (~somers@63-224-80-204.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-29 16:30:29] * somers__ (~somers@63-224-81-80.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:31:19] * somers (~somers@63-224-81-161.hlrn.qwest.net) join
[2018-06-29 16:36:34] * somers_ (~somers@63-224-81-111.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-29 16:41:41] * somers_ (~somers@63-224-80-199.hlrn.qwest.net) join
[2018-06-29 16:43:40] * somers__ (~somers@63-224-80-91.hlrn.qwest.net) join
[2018-06-29 16:44:25] <aniketp> Hi @somers, apart from the remaining administrative and few left syscalls, what would be the next right thing to do? 
[2018-06-29 16:46:43] * somers_ (~somers@63-224-80-199.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-29 16:46:59] * somers (~somers@63-224-81-161.hlrn.qwest.net) quit Ping timeout: 506 seconds
[2018-06-29 16:54:47] * somers__ (~somers@63-224-80-91.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 02:51:59] * somers (~somers@63.224.81.101) join
[2018-06-30 02:53:36] <somers> After you finish the last few syscalls, I think you should audit all syscalls, to make sure that each one is correctly correctly auditted or skipped.  Like how I mentioned that aio_fsync is skipped and shouldn't be.
[2018-06-30 05:36:47] * somers_ (~somers@63-224-81-32.hlrn.qwest.net) join
[2018-06-30 05:38:11] * somers (~somers@63.224.81.101) quit Ping timeout: 252 seconds
[2018-06-30 05:45:10] * somers__ (~somers@63-224-80-117.hlrn.qwest.net) join
[2018-06-30 05:48:26] * somers (~somers@63-224-81-39.hlrn.qwest.net) join
[2018-06-30 05:48:27] * somers_ (~somers@63-224-81-32.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 05:51:01] * somers__ (~somers@63-224-80-117.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 05:51:22] * somers_ (~somers@63-224-80-79.hlrn.qwest.net) join
[2018-06-30 06:00:14] * somers (~somers@63-224-81-39.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 06:02:09] * somers_ (~somers@63-224-80-79.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-30 07:53:30] * somers (~somers@63-224-80-120.hlrn.qwest.net) join
[2018-06-30 08:01:53] * somers_ (~somers@63-224-81-26.hlrn.qwest.net) join
[2018-06-30 08:08:19] * somers (~somers@63-224-80-120.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 08:09:45] * somers (~somers@63-224-81-15.hlrn.qwest.net) join
[2018-06-30 08:11:13] * somers__ (~somers@63-224-81-56.hlrn.qwest.net) join
[2018-06-30 08:14:23] * somers (~somers@63-224-81-15.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 08:14:28] * somers_ (~somers@63-224-81-26.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 08:23:23] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) join
[2018-06-30 08:26:50] * somers (~somers@63-224-81-209.hlrn.qwest.net) join
[2018-06-30 08:26:51] * somers__ (~somers@63-224-81-56.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 08:29:25] * somers_ (~somers@63-224-81-152.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 08:33:16] * somers_ (~somers@63.224.80.238) join
[2018-06-30 08:35:15] * somers__ (~somers@63-224-80-219.hlrn.qwest.net) join
[2018-06-30 08:39:27] * somers (~somers@63-224-81-209.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 08:42:50] * somers (~somers@63-224-80-190.hlrn.qwest.net) join
[2018-06-30 08:43:07] * somers_ (~somers@63.224.80.238) quit Read error: Operation timed out
[2018-06-30 08:43:45] * somers_ (~somers@63-224-80-168.hlrn.qwest.net) join
[2018-06-30 08:49:27] * somers__ (~somers@63-224-80-219.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 08:50:00] * somers__ (~somers@63-224-80-114.hlrn.qwest.net) join
[2018-06-30 08:52:12] * somers (~somers@63-224-80-190.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 08:55:32] * somers_ (~somers@63-224-80-168.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-30 08:59:48] * somers__ (~somers@63-224-80-114.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 10:53:26] * somers (~somers@63-224-80-29.hlrn.qwest.net) join
[2018-06-30 10:53:55] * somers_ (~somers@63-224-80-148.hlrn.qwest.net) join
[2018-06-30 10:54:47] * somers__ (~somers@63-224-81-48.hlrn.qwest.net) join
[2018-06-30 11:00:35] * somers_ (~somers@63-224-80-148.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 11:02:08] * somers_ (~somers@63-224-80-53.hlrn.qwest.net) join
[2018-06-30 11:02:12] * somers (~somers@63-224-80-29.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 11:06:15] * somers (~somers@63-224-80-78.hlrn.qwest.net) join
[2018-06-30 11:06:43] * somers_ (~somers@63-224-80-53.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 11:07:29] * somers__ (~somers@63-224-81-48.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 11:09:47] * somers_ (~somers@63-224-81-227.hlrn.qwest.net) join
[2018-06-30 11:11:52] * somers__ (~somers@63-224-81-227.hlrn.qwest.net) join
[2018-06-30 11:11:52] * somers_ (~somers@63-224-81-227.hlrn.qwest.net) quit Read error: Connection reset by peer
[2018-06-30 11:12:13] * somers (~somers@63-224-80-78.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 11:31:10] * somers (~somers@63-224-80-39.hlrn.qwest.net) join
[2018-06-30 11:31:31] <aniketp> Oh, I just noticed. I had forgotten the "other" audit class @somers 
[2018-06-30 11:33:51] * somers__ (~somers@63-224-81-227.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 11:34:13] * somers_ (~somers@63-224-81-132.hlrn.qwest.net) join
[2018-06-30 11:42:29] * somers (~somers@63-224-80-39.hlrn.qwest.net) quit Ping timeout: 633 seconds
[2018-06-30 12:43:35] <aniketp> Hi @somers_, would you recommended using the system swap file (if it exists) for testing swapon(2) and swapoff(2).
[2018-06-30 12:43:35] <aniketp> Using getfsent(3), I was able to extract the swap device and then doing swapoff(2) and swapon(2) simultaneously worked and didn't affect anything in the system.
[2018-06-30 12:46:43] <aniketp> However, if that is not recommended, I tried copying my system swap file to current directory (to use it for testing) but doing that shot up the CPU to 50% and it got stuck. And creating a swap file from a C program is not possible I think.
[2018-06-30 12:47:12] <aniketp> Also, with the first approach, we can skip the success tests if the swap file does not exist in the system..
[2018-06-30 13:20:22] * somers__ (~somers@63-224-81-77.hlrn.qwest.net) join
[2018-06-30 13:27:13] * somers_ (~somers@63-224-81-132.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 13:33:56] * somers (~somers@63-224-80-159.hlrn.qwest.net) join
[2018-06-30 13:40:09] * somers__ (~somers@63-224-81-77.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 13:40:13] * somers_ (~somers@63-224-81-248.hlrn.qwest.net) join
[2018-06-30 13:43:50] * somers__ (~somers@63-224-81-2.hlrn.qwest.net) join
[2018-06-30 13:47:11] * somers (~somers@63-224-80-159.hlrn.qwest.net) quit Ping timeout: 600 seconds
[2018-06-30 13:49:16] * somers_ (~somers@63-224-81-248.hlrn.qwest.net) quit Ping timeout: 492 seconds
[2018-06-30 13:53:19] * somers_ (~somers@63-224-80-111.hlrn.qwest.net) join
[2018-06-30 13:56:29] * somers__ (~somers@63-224-81-2.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 13:59:59] * somers__ (~somers@63-224-81-124.hlrn.qwest.net) join
[2018-06-30 14:02:21] * somers_ (~somers@63-224-80-111.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 14:05:42] * somers_ (~somers@63-224-81-213.hlrn.qwest.net) join
[2018-06-30 14:08:14] * somers__ (~somers@63-224-81-124.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 14:23:04] * somers__ (~somers@63-224-81-50.hlrn.qwest.net) join
[2018-06-30 14:26:11] * somers_ (~somers@63-224-81-213.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 14:38:34] * somers_ (~somers@63-224-80-108.hlrn.qwest.net) join
[2018-06-30 14:41:57] * somers__ (~somers@63-224-81-50.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 14:46:26] * somers__ (~somers@63-224-80-251.hlrn.qwest.net) join
[2018-06-30 14:48:55] * somers_ (~somers@63-224-80-108.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 14:49:06] * somers (~somers@63-224-81-219.hlrn.qwest.net) join
[2018-06-30 14:51:29] * somers__ (~somers@63-224-80-251.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 16:08:34] * somers_ (~somers@63-224-81-143.hlrn.qwest.net) join
[2018-06-30 16:10:26] * somers__ (~somers@63-224-80-182.hlrn.qwest.net) join
[2018-06-30 16:15:06] * somers (~somers@63-224-81-219.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 16:15:57] * somers (~somers@63-224-81-103.hlrn.qwest.net) join
[2018-06-30 16:17:53] * somers_ (~somers@63-224-81-143.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 16:21:10] * somers__ (~somers@63-224-80-182.hlrn.qwest.net) quit Ping timeout: 632 seconds
[2018-06-30 16:28:17] * somers_ (~somers@63-224-81-224.hlrn.qwest.net) join
[2018-06-30 16:29:35] <aniketp> Ping @somers, @somers_ 
[2018-06-30 16:31:57] * somers (~somers@63-224-81-103.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 16:32:41] * somers_ (~somers@63-224-81-224.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 18:30:41] * somers (~somers@63.224.81.207) join
[2018-06-30 18:42:28] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) join
[2018-06-30 18:46:50] * somers__ (~somers@63-224-80-215.hlrn.qwest.net) join
[2018-06-30 18:48:46] * somers (~somers@63.224.81.207) quit Read error: Operation timed out
[2018-06-30 18:52:37] * somers_ (~somers@63-224-81-155.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 18:53:41] * somers (~somers@63-224-81-160.hlrn.qwest.net) join
[2018-06-30 18:59:16] * somers__ (~somers@63-224-80-215.hlrn.qwest.net) quit Read error: Operation timed out
[2018-06-30 18:59:35] * somers_ (~somers@63-224-81-30.hlrn.qwest.net) join
[2018-06-30 19:03:01] * somers (~somers@63-224-81-160.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 19:04:02] * somers__ (~somers@63-224-81-72.hlrn.qwest.net) join
[2018-06-30 19:07:25] * somers_ (~somers@63-224-81-30.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 19:11:49] * somers__ (~somers@63-224-81-72.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-06-30 23:47:17] * rwatson (robert@fledge.watson.org) quit Read error: Connection reset by peer
[2018-06-30 23:48:58] * rwatson (robert@fledge.watson.org) join
[2018-07-01 01:44:42] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-07-01 01:48:25] * gnn_ (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-07-01 03:43:41] * somers (~somers@63-224-80-148.hlrn.qwest.net) join
[2018-07-01 16:06:03] <aniketp> Ping @somers, can you wait before committing the revision? 
[2018-07-01 16:06:23] <aniketp> I've got two more process control syscalls coming up
[2018-07-01 16:06:45] <aniketp> Oh, I'll create another revision now I think :P
[2018-07-01 16:06:59] <somers> If you're not ready for a revision to be committed, you shouldn't post it to Phabricator
[2018-07-01 16:07:11] <aniketp> Okay
[2018-07-01 16:08:04] <aniketp> Btw about swap{on/off}(2), do you think the above approach is fine? @somers 
[2018-07-01 16:08:38] <somers> I'm skeptical that there's no way to activate a swap device from a C program.
[2018-07-01 16:09:58] <aniketp> Hmm, I had a look at the FreeBSD forum and they suggested using dd(1) utility for it
[2018-07-01 16:10:29] <somers> To make a blank file?  That's hardly necessary.  You can easily do that from C.
[2018-07-01 16:10:40] <somers> First, try truncate, which makes a blank, sparse file.
[2018-07-01 16:13:46] <aniketp> But I need a block device, right? Wouldn't truncate(2) work on normal files. Besides, I tried creating a block device using both mknod(1) and mknod(2) but swap{on/off}(2) failed on both of them @somers 
[2018-07-01 16:18:31] <somers> Files can be used for swap too.
[2018-07-01 16:19:23] <somers> I've never personally done it; it might only work on UFS
[2018-07-01 16:19:42] <somers> Or, you could take the first member of the Kyua config variable "disks" and use that.
[2018-07-01 16:23:47] <aniketp> Okay. Btw @somers, is there a way to check whether the Capability mode is enabled in freebsd for not (from the test-program)?
[2018-07-01 16:23:47] <aniketp> Cause cap_enter(2) would fail otherwise
[2018-07-01 16:24:19] <somers> I don't know
[2018-07-01 17:10:03] <aniketp> Btw @somers, are we allowed to use #define in kyua tests (I'm thinking not). Cause using #ifndef WITHOUT_CAPSICUM is an option
[2018-07-01 17:11:04] <aniketp> But I guess they are used for kernel build so might not be an option
[2018-07-01 17:11:12] <somers> Sure you are.
[2018-07-01 17:11:35] <somers> But just checking WITHOUT_CAPSICUM is insufficient, because that doesn't tell you whether your program is running in capsicum mode.
[2018-07-01 17:12:04] <somers> I just found the answer to your question in < 10 s of man page searches
[2018-07-01 17:13:17] <aniketp> But cap_enter() places the process in capability mode, so why would we already need the process to be in capability mode 
[2018-07-01 17:13:35] <somers> "?
[2018-07-01 17:13:49] <somers> I thought you wanted to know whether or not you're already in capability mode
[2018-07-01 17:15:50] <aniketp> No, actually I was talking about ENOSYS in cap_enter(2)'s man-page.
[2018-07-01 17:15:50] <aniketp> [ENOSYS]           The kernel is compiled without:
[2018-07-01 17:15:50] <aniketp>                             options CAPABILITY_MODE
[2018-07-01 17:16:35] <aniketp> Oh, there is an option to do an #ifdef CAPABILITY_MODE
[2018-07-01 17:33:37] <aniketp> Though @somers, since cap_enter() only fails with ENOSYS, (when kernel is indeed compiled without options CAPABILITY_MODE), would it be right to check the errno and if it is ENOSYS, skip the tests?
[2018-07-01 17:34:18] <somers> No
[2018-07-01 17:34:21] <somers> There's a better way
[2018-07-01 17:36:50] <aniketp> @somers what is it?
[2018-07-01 17:37:03] <somers> use the sysctl
[2018-07-01 17:38:17] <aniketp> Yeah, I thought about it earlier and tried finding the relevant command. Is there any? I found "kern.capmode_coredump", but not sure if that would help..
[2018-07-01 17:38:24] <aniketp> @somers 
[2018-07-01 17:38:54] <somers> No.  Just do "sysctl -ad | grep cap" and look through the list
[2018-07-01 17:40:40] <aniketp> Oh, this one right? "kern.trap_enotcap". I'm guessing if this returns 1, then we ought to skip the tests.. @somers 
[2018-07-01 17:41:03] <somers> no
[2018-07-01 17:41:50] <aniketp> Oh, sorry: I think this? "kern.features.security_capability_mode"
[2018-07-02 13:15:29] <aniketp> Hi @somers, I created the test case for cap_enter(2): It fails when the auditd(8) is already running but passes when started by us.
[2018-07-02 13:15:29] <aniketp> Debugging shows that cap_enter(2) doesn't show up in the auditpipe in first case: https://pastebin.com/mWc5zHYF
[2018-07-02 13:16:31] <aniketp> What could be the problem here? I tried various approaches and this was the only one which resulted in test case success, let alone if only when auditd(8) is not running.
[2018-07-02 13:38:16] <aniketp> Same happened with cap_getmode(2) :/
[2018-07-02 13:50:16] <aniketp> Alright, cap_getmode(2) worked! But still facing the same issue with the cap_enter(2) test case.
[2018-07-02 13:59:05] <somers> I don't know.  That's pretty weird.  The only difference it should make that auditd is already running is in timing
[2018-07-02 16:30:19] <aniketp> Btw @somers, it looks like my auditpipe(4) always runs in capability mode. Whenever I open it, I always get this: https://pastebin.com/PDF9RXvB (This only happens when auditd(8) is already running)
[2018-07-02 16:30:19] <aniketp> I wonder whether it is related to the issue I'm facing..
[2018-07-02 16:31:12] <aniketp> This didn't happen before, bte
[2018-07-02 16:31:24] <somers> what do you mean "always runs in capability mode"?
[2018-07-02 16:32:21] <aniketp> Not always I guess. But opening it with praudit(1) seems to enable capability mode for some processes
[2018-07-02 16:33:18] <aniketp> @somers 
[2018-07-02 16:36:10] <somers> that doesn't make sense.  You can't put another process into capability mode
[2018-07-02 16:37:57] <aniketp> fork(2) is called before cap_enter(2). That looks like the child process is put inside capability mode. Identical to my approach in the test case. 
[2018-07-02 16:47:17] <somers> Keep in mind that a lot of ordinary utilities use capability mode
[2018-07-02 16:47:29] <somers> Just grep the source tree for cap_enter.  There are many.
[2018-07-02 17:31:19] <aniketp> Yeah, there were a lot. But I'm suspicious about "praudit /dev/auditpipe". I had never seen cap_enter(2) before with this command. 
[2018-07-02 17:31:19] <aniketp> Btw @somers, shall I create a revision for them so that you can test whether you get the same test failure when auditd(8) is not already running?
[2018-07-02 17:31:40] <somers> Sure
[2018-07-02 18:10:17] <aniketp> Also @somers about sysarch(2). In the manpages, it suggests that it is architecture dependent and should not be called by user. 
[2018-07-02 18:10:17] <aniketp> However, I had a look at my "machine/sysarch.h" which included "x86/sysarch.h". Now, in x86/sysarch header, I saw some architecture specific syscalls and using I386_GET_LDT with struct i386_ldt_args worked successfully. Although, I think for general test case, I can't use x86 syscalls.
[2018-07-02 18:10:17] <aniketp> So is there any general syscall instruction which can be run on any architecture?
[2018-07-02 18:45:28] <somers> Every i386 system call is emulated on amd64.  That's why it worked
[2018-07-02 18:45:59] <somers> The answer to your second question is syscall(2), which you're already using.  But I don't think that's the question you meant to ask.
[2018-07-02 18:46:46] <aniketp> Yeah, I meant like, would I386_GET_LDT work on every arch freebsd supports? (In case that's required)
[2018-07-02 18:46:58] <somers> nope
[2018-07-02 18:48:50] <aniketp> Btw @somers, reply to your comment: That happened with me too. Running any miscellaneous command shows up cap_enter() in the kyua debug stdout 
[2018-07-02 19:10:02] <aniketp> Well, even this passed the test: int arg; sysarch(0, &arg); So @somers, would this be fine as a test-case? Since I'm not really passing any Syscall Number here (unless 0 is a number too)
[2018-07-02 19:10:13] <aniketp> *syscall number too
[2018-07-02 19:11:21] <somers> No, it's no ok to call an unknown syscall
[2018-07-02 19:11:30] <somers> You have no idea what will happen if you do that
[2018-07-02 19:29:50] <aniketp> Okay, so then should I skip the test case for success mode of sysarch(2), @somers ? Cause there doesn't look to be a universally supported syscall number in this case to me.
[2018-07-02 19:57:44] <somers> No, you should simply skip it on unsupported architectures
[2018-07-02 19:58:15] <somers> Kyua's got builtin support for that
[2018-07-02 19:59:44] <aniketp> Okay, will do that
[2018-07-02 20:03:50] <aniketp> Btw @somers, can I use "sysctl hw.machine_arch" to use as a switch case for different architectures?
[2018-07-02 20:03:50] <aniketp> This will provide wider coverage, I think
[2018-07-02 20:04:20] <aniketp> I can use corresponding syscalls for each arch
[2018-07-02 20:04:30] <somers> Yeah, you can do that.  Or just create a test case for each arch
[2018-07-02 20:04:37] <somers> either one works
[2018-07-02 20:04:43] <aniketp> Okay
[2018-07-03 00:40:45] * mpts (~mpts@boston-packets.hackerspace.pl) join
[2018-07-03 00:40:56] * mpts_ (~mpts@boston-packets.hackerspace.pl) quit se.hub efnet.portlane.se
[2018-07-03 16:46:55] <aniketp> Hi @somers, for PowerPC and ARM64, there weren't any syscall number in the headers, https://github.com/freebsd/freebsd/blob/master/sys/powerpc/include/sysarch.h
[2018-07-03 16:46:55] <aniketp> what should I do about them?
[2018-07-03 16:47:53] <somers> then you can't test sysarch on those platforms
[2018-07-03 16:47:55] <somers> skip it
[2018-07-03 16:57:34] <aniketp> Sure, also in SPARC64, I'm not sure whether the syscalls are safe enough to be tested. For example here: https://github.com/freebsd/freebsd/blob/master/sys/sparc64/include/sysarch.h#L43
[2018-07-03 16:57:34] <aniketp> These functions look like they are installing something related to signal or a trap
[2018-07-03 16:57:37] <aniketp> @somers 
[2018-07-03 16:58:34] <somers> If you're not sure, then skip it.  Unless you know somebody with a Sparc64 that you can use for testing
[2018-07-03 17:01:54] <aniketp> I don't think anyone in my company even knows about Sparc64 :P. But I found this 12-CURRENT ISO here: http://ftp.freebsd.org/pub/FreeBSD/snapshots/ISO-IMAGES/12.0/ Will try out the syscall later to see if it works fine
[2018-07-03 17:03:40] <aniketp> Okay, so I have AMD64, i386, ARM and MIPS to safely test sysarch(2).
[2018-07-03 17:19:32] <aniketp> Bt @somers, there's one problem though. I'll #include <machine/sysarch.h> for sysarch(2) syscall commands. That, in turn would include respective architecture's header. So my test case would fail to even compile for ex, "MIPS_GET_TLS" is not defined in my <machine/sysarch.h>
[2018-07-03 17:23:03] <somers> Are you saying that the mips test case would fail to compile on an i386 machine?
[2018-07-03 17:23:17] <somers> If so, then you obviously need to gate that test on #ifdef
[2018-07-03 17:25:00] <aniketp> I mean, On an i386 machine, the compiler wouldn't know what MIPS_GET_TLS is, since that isn't defined in <x86/sysarch.h> included by <machine/sysarch.h> @somers. 
[2018-07-03 17:25:24] <somers> Yeah, so you can't compile that test on i386
[2018-07-03 17:25:39] <aniketp> Yeah, ifdef would do. But what should be the respective ifdefs here? 
[2018-07-03 17:25:55] <somers> I don't know.
[2018-07-03 17:26:09] <somers> Probably just #ifdef whatever_symbol_you_need
[2018-07-03 17:26:35] <aniketp> Hmm, I'll try to define my own macros on the basis of result obtained by sysctlbyname(3) @somers  
[2018-07-03 17:27:04] <somers> That won't work.  You can't use sysctlbyname until runtime.  #ifdef works at compile time
[2018-07-03 17:29:54] <aniketp> Okay, then I can simply use "#ifdef MIPS_GET_TLS" for example, right? Cause for MIPS that would automatically be true. @somers  
[2018-07-03 17:30:09] <somers> yeah
[2018-07-03 17:30:33] <somers> otherwise, there are general-purpose arch symbols.  Like __i386__ or something; i don't remember exactly
[2018-07-03 17:34:23] <aniketp> Yeah, you were right, its #ifdef __arch__ formatted : Like here https://github.com/freebsd/freebsd/blob/3ba444b8c8906a8a37071f0eab6921a21e3d66e5/lib/libkvm/kvm_mips.h#L32
[2018-07-03 19:31:26] <aniketp>  Ping @somers, I'm working on audit(2). Actually, I'm confused as to what "const char *record" means in this context. Is it a record file or just a char pointer?
[2018-07-03 19:32:28] <somers> The declaration says that it's just a string
[2018-07-03 19:32:41] <somers> If there is some special interpretation of that string, the prototype doesn't say so.
[2018-07-03 19:54:03] <aniketp> @somers, passing normal string returns "Invalid argument". I think it needs valid record cause this is the failure reason:
[2018-07-03 19:54:03] <aniketp>      [EINVAL]           The token ID is invalid or length is larger than
[2018-07-03 19:54:03] <aniketp>                         MAXAUDITDATA.
[2018-07-03 19:54:31] <somers> ok.
[2018-07-03 19:54:49] <somers> The man page doesn't say anything about the format, so you'll have to figure it out.  Maybe then you can fix the man page.
[2018-07-03 20:01:14] <aniketp> Yeah @somers, the "record" is actually a audit record file. I copied one of them from /var/audit to the directory and passed the name of trail and execution was successful.
[2018-07-03 20:01:24] <aniketp> However, this is where things get interesting
[2018-07-03 20:02:37] <aniketp> unsuccessful invocation gets audited normally, but the successful invocation does not show up in the auditpipe(4) open in another window. And also, after that, auditpipe(4) stops showing _any_ audit event
[2018-07-03 20:02:50] <aniketp> However, when I restart it, stuff works fine
[2018-07-03 20:03:03] <aniketp> Untill I execute audit(2) successfully again
[2018-07-03 20:04:26] <aniketp> I'll try creating an atf test case to see how it responds them
[2018-07-03 20:04:34] <aniketp> *then, @somers 
[2018-07-04 14:54:22] <aniketp> Ping @somers, I feel like it might not be feasible to test audit(2) in success mode. Although, if you have some ideas, please do suggest so.
[2018-07-04 14:54:22] <aniketp> I've observed that audit(2) executes successfully when passing the name of a proper trail file as the first argument. Also, it doesn't work for local strings that contain audit record. And it doesn't work with absolute path as the first argument. 
[2018-07-04 14:55:01] <aniketp> Is there a way we can create a trail file at runtime in the local Kyua directory? @somers 
[2018-07-04 14:57:38] <aniketp> Hmm, I replaced the trail with a normal trail file, and it worked. This is weird :|
[2018-07-04 15:00:57] <aniketp> Hmm, in fact passing any string works now. I'm not sure what is happening now 😅
[2018-07-04 16:46:20] <somers> So audit expects a filename but only relative filenames and not absolute filenames?  That doesn't make sense.  The man page doesn't even say anything about files
[2018-07-04 19:21:36] * aniketp (~aniketp41@159.65.149.37) join
[2018-07-06 17:22:58] <aniketp> Hi @somers, how would the buffering issue with auditpipe(4) be resolved?
[2018-07-06 17:22:58] <aniketp> Btw, I've been travelling for two days, so couldn't do much. I'll resume tomorrow when I reach home
[2018-07-06 17:23:20] <aniketp> .
[2018-07-06 17:24:00] * aniketp (~aniketp41@159.65.149.37) join
[2018-07-06 17:24:11] <aniketp> Hi @somers, how would the buffering issue with auditpipe(4) be resolved?
[2018-07-06 17:24:11] <aniketp> Btw, I've been travelling for two days, so couldn't do much. I'll resume tomorrow when I reach home
[2018-07-06 17:59:16] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) join
[2018-07-06 18:02:17] * somers (~somers@63-224-81-138.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-07-06 18:55:37] <somers_> Travelling anywhere fun?
[2018-07-06 18:55:52] <somers_> As for the buffering problem, is there an ioctl that can flush the buffer?
[2018-07-06 18:56:07] <somers_> @aniketp
[2018-07-06 18:56:35] <somers_> I'm unclear about what AUDITPIPE_FLUSH does.  Does it discard flushed records, or output them?
[2018-07-06 19:06:11] <aniketp> Yeah, just a short trip from Kanpur to Lucknow with hostel friends. Will be back to New Delhi tomorrow.
[2018-07-06 19:07:39] <aniketp> @somers, the man-page said that it clears sny outstanding audit record in the auditpipe. So I don't think it outputs them anywhere. Simply discards them
[2018-07-06 19:07:49] <aniketp> @somers_
[2018-07-06 20:59:37] <somers_> aniketp Have you looked at the kernel source to try to deduce under what circumstances the audit records are sent down the pipe?
[2018-07-07 00:57:28] * mpts nick _0mp
[2018-07-07 02:44:00] * gnn (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-07-07 02:46:27] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-07-07 08:12:30] * gnn_ (~quassel@f373.x.rootbsd.net) join
[2018-07-07 08:12:40] * gnn (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-07-07 15:15:20] <aniketp> @ somers_ I'll have a look at the code of auditpipe to determine that
[2018-07-07 15:15:33] <aniketp> Btw, should we convert this to ATF tests? https://github.com/freebsd/freebsd/blob/master/tools/regression/audit/audit_pipe_ioctl/audit_pipe_ioctl.c
[2018-07-07 18:40:20] <aniketp> Btw @somers_, I found out why I was getting EINVAL with audit_success case. The record gets verified by bsm_rec_verify() here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_syscalls.c#L119
[2018-07-07 18:40:20] <aniketp> This function is not properly implemented yet, it just checks if the first character is AUT_HEADER{32,64,32_EX,64_EX} and if so, successfully returns
[2018-07-07 18:41:26] <aniketp> Though, manipulating got me the successful invocation of audit(2), it is still not correct since I'm just submitting an incomplete audit record (with just one character in it).  
[2018-07-07 18:42:07] <aniketp> Using this as a test case causes the test-case body to timeout and the "praudit /dev/auditpipe" open in another window to get stuck
[2018-07-07 18:45:40] <somers_> aniketp converting that old test to ATF is not a bad idea
[2018-07-07 18:47:04] <somers_> So you're saying that audit(2) should be used with a complete and valid audit record, but it's only partially verified?
[2018-07-07 18:47:26] <aniketp> Yeah, this function here: https://github.com/freebsd/freebsd/blob/master/sys/security/audit/audit_bsm.c#L1751
[2018-07-07 18:48:54] <aniketp> Otherwise normal auditing would be hampered, cause maybe audit(4) waits for certain tokens from incomplete record and ignores new records. @somers_ 
[2018-07-07 18:49:40] <somers_> So I think you should be able to write an audit(2) success case, then.
[2018-07-07 18:50:21] <aniketp> Hmm, I'll need to store a complete audit record for that. Figuring out how to do that
[2018-07-08 06:02:47] * somers__ (~somers@63-224-80-108.hlrn.qwest.net) join
[2018-07-08 06:06:21] * somers_ (~somers@63-224-81-175.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-07-08 20:44:38] * _0mp (~mpts@boston-packets.hackerspace.pl) quit Ping timeout: 360 seconds
[2018-07-08 20:44:45] * _0mp (~mpts@boston-packets.hackerspace.pl) join
[2018-07-09 07:43:25] <aniketp> Hi @somers__, I was able to get audit(2) to work, after many tries 😅 
[2018-07-09 07:43:25] <aniketp> The catch was to submit complete audit record to the queue. That way, the audit trail showed both audit(2) and the record I submitted. I also had to repeat the entire au_read_rec(3) and au_fetch_tok(3) procedure. 
[2018-07-09 07:45:35] <aniketp> But also, I'll need an audit record to submit to the queue. Can I use the absolute path to test-program directory, i.e /tests/sys/audit. Cause not sure if an equivalent atf-c-api is available..
[2018-07-09 14:08:33] <somers__> You can't hardcode the absolute path to the test program directory, because you don't know for sure what it will be
[2018-07-09 15:15:45] * somers__ (~somers@63-224-80-108.hlrn.qwest.net) quit Remote host closed the connection
[2018-07-09 19:08:26] <gnn_> BTW I submitted the 2nd evaluation today.
[2018-07-09 19:08:39] <gnn_> Things continue to go along well.
[2018-07-09 19:38:30] <aniketp> Sure @gnn_, Apart from a few remaining syscalls, I guess I can test auditdistd(8), auditpipe(4) (Convert the regression tests written by @rwatson to ATF: https://github.com/freebsd/freebsd/blob/master/tools/regression/audit/audit_pipe_ioctl/audit_pipe_ioctl.c) and auditreduce(1).
[2018-07-09 19:38:30] <aniketp> Btw is there any other aspect of audit(4) system that you would want to be included in the testsuite I'm developing, @gnn_ ? I might have overlooked some of the features
[2018-07-09 19:38:53] <gnn_> I think you're on track.
[2018-07-09 19:39:13] <gnn_> One thing we can look at, once you've completed current tasks, are the audit bits that rwatson@ has added for DTrace
[2018-07-09 19:39:17] <gnn_> I think those are now in HEAD
[2018-07-09 19:47:11] <aniketp> @gnn_ I couldn't understand the part about audit bits. Are those some additional syscalls which were audited recently? I didn't have a chance to look thoroughly at DTrace cause I rarely had to use it. I'll try getting familiar with it
[2018-07-09 19:48:51] <gnn_> Don't worry about it just yet.
[2018-07-09 19:49:09] <gnn_> Let me check with rwatson to see if he did indeed push his changes to audit to make it talk to DTrace into HEAD
[2018-07-09 19:49:17] <gnn_> That work was first done in a research branch.
[2018-07-09 19:49:25] <aniketp> CADETS right?
[2018-07-09 19:49:25] <gnn_> aniketp: Keep on with what you were already workin gon.
[2018-07-09 19:49:52] <aniketp> Okay, sure
[2018-07-09 19:51:12] <aniketp> Btw @gnn_ congrats for another successful core team tenure! I heard the new team was elected recently.
[2018-07-09 19:51:24] <gnn_> Indeed it was.
[2018-07-09 19:51:39] <gnn_> July 4th they took over
[2018-07-10 00:13:41] * somers (~somers@63-224-80-108.hlrn.qwest.net) join
[2018-07-10 08:44:48] <aniketp> Btw @somers, adding the extra AUDITPIPE_FLUSH after calling cap_enter() resolved the buffering issue. I'll update the revision
[2018-07-10 14:20:40] <somers> ok
[2018-07-10 17:24:14] <aniketp> Also, @somers, is there any modification to be made in the capability mode syscalls' tests?
[2018-07-10 17:24:14] <aniketp> I'll update the sysarch(2)'s test as you suggested
[2018-07-10 17:25:21] <somers> flushing the audit pipe didn't fix the problem
[2018-07-10 17:25:31] <somers> I'm investigating rwatson's suggestion right now
[2018-07-10 17:26:20] <somers> Curiously, he seems to have gotten it backward.  It looks like ppoll correctly gets woken up when a new event arrives.  However, it seems like ppoll sometimes blocks when there are already events in the pipe
[2018-07-10 19:52:12] * somers_ (~somers@63-224-80-29.hlrn.qwest.net) join
[2018-07-10 19:53:59] <somers_> Hey aniketp, I figured it out
[2018-07-10 19:55:33] * somers (~somers@63-224-80-108.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-07-10 19:57:21] <aniketp> @somers_ what was it?
[2018-07-10 19:57:21] <aniketp> Sorry I had been watching the semifinal so I forgot 😅 
[2018-07-10 19:57:40] <somers_> semifinal of soccer?
[2018-07-10 19:58:18] <aniketp> Yeah, France just won :/
[2018-07-10 19:58:28] <somers_> Good for France.  The problem with the cap_enter_success test is that you paired buffered I/O (fdopen and fread) with ppoll.
[2018-07-10 19:59:07] <somers_> ppoll(2) was truthfully returning that the auditpipe(4) device had nothing stuck in the kernel.  But fread(3) left some data buffered in userland.
[2018-07-10 19:59:30] <aniketp> @somers_ is fread used by auditpipe(4), cause I've only used fdopne(2) in the utility functions 
[2018-07-10 19:59:33] <aniketp> *?
[2018-07-10 19:59:44] <somers_> fread(3) is used by au_read_rec(3)
[2018-07-10 19:59:52] <aniketp> Oh, okay
[2018-07-10 20:00:10] <somers_> The fact that it takes a FILE* argument instead of an int pretty much guarantees that it's using fread
[2018-07-10 20:03:23] <aniketp> Yeah, there is the fread(3): https://github.com/openbsm/openbsm/blob/master/libbsm/bsm_io.c#L4694
[2018-07-10 20:04:01] <aniketp> Oh, its at a lot more places down the function
[2018-07-10 20:05:23] <aniketp> So, @somers_, how do we force fread(3) to push the data to the kernel? So that ppoll(2) can pick it up. 
[2018-07-10 20:05:33] <aniketp> Would flushing help here?
[2018-07-10 20:09:13] <somers_> nope
[2018-07-10 20:10:18] <somers_> check stdio(3)
[2018-07-10 21:57:23] * somers__ (~somers@63-224-81-246.hlrn.qwest.net) join
[2018-07-10 22:03:50] * somers_ (~somers@63-224-80-29.hlrn.qwest.net) quit Read error: Operation timed out
[2018-07-10 22:10:08] * somers__ (~somers@63-224-81-246.hlrn.qwest.net) quit Remote host closed the connection
[2018-07-11 07:21:10] <aniketp> Btw @somers, without introducing D16210 change, I had the same issue with _exit(2) just like cap_enter(2). And adding the AUDITPIPE_FLUSH seemed to resolve the issue. But could be that it's not the root cause
[2018-07-11 07:21:23] <aniketp> Oops, you're not in the channel!
[2018-07-11 07:31:37] * gnn_ (~quassel@f373.x.rootbsd.net) quit Read error: Connection reset by peer
[2018-07-11 07:33:31] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-07-11 14:02:18] * somers (~somers@63-224-81-246.hlrn.qwest.net) join
[2018-07-11 19:34:29] * somers_ (~somers@63-224-80-183.hlrn.qwest.net) join
[2018-07-11 19:38:13] * somers (~somers@63-224-81-246.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-07-11 21:43:59] * somers_ (~somers@63-224-80-183.hlrn.qwest.net) quit Remote host closed the connection
[2018-07-12 19:30:09] * gnn (~quassel@f373.x.rootbsd.net) quit se.hub irc.underworld.no
[2018-07-12 19:30:10] * _0mp (~mpts@boston-packets.hackerspace.pl) quit se.hub irc.underworld.no
[2018-07-12 19:31:31] * gnn_ (~quassel@f373.x.rootbsd.net) join
[2018-07-12 19:38:13] * _0mp_ (~mpts@boston-packets.hackerspace.pl) join
[2018-07-13 05:28:06] * rwatson (robert@fledge.watson.org) quit Read error: Operation timed out
[2018-07-13 05:31:46] * rwatson (~robert@fledge.watson.org) join
[2018-07-14 15:29:37] <aniketp> Hi @gnn_, I was wondering that, since the primary test-suite is already in Head, would it be right to remove the audit test-suite idea from this page? https://wiki.freebsd.org/SummerOfCodeIdeas#Testing
[2018-07-14 20:48:16] <gnn_> aniketp: I think we'll remove it at the completion of SoC 2018.
[2018-07-14 20:48:20] <gnn_> But do remind me :-)
[2018-07-15 17:22:47] * _0mp_ nick _0mp
[2018-07-15 20:54:25] * somers (~somers@63-224-80-117.hlrn.qwest.net) join
[2018-07-16 18:57:11] <aniketp> Hi @somers, for sysarch(2), did you mean that I should initialize bzero() respective structures for all architectures?
[2018-07-16 18:57:21] <aniketp> *(bzero())
[2018-07-16 18:57:45] <somers> No.  You need to do whatever's appropriate.  It's probably different for each sysarch variant.
[2018-07-16 18:58:08] <aniketp> I guess they all retrieve info and expect that each structure be provided
[2018-07-16 18:58:27] <aniketp> It worked with void * for i386 and amd64 @somers 
[2018-07-16 18:58:45] <somers> You need to look at it on a case-by-case basis
[2018-07-16 18:58:58] <aniketp> Okay will, analyze in detail them
[2018-07-16 18:59:14] <somers> BTW, have you made any progress with the buffered I/O problem?
[2018-07-16 19:00:13] <aniketp> Btw, I didn't fully understand what is happening in the buffering issue. It looks like that only occurs when I call _exit(2) from child process after calling the respective syscall. (I did that in cap_enter() and _exit() itself)
[2018-07-16 19:00:51] <somers> _exit has nothing to do with it
[2018-07-16 19:01:26] <aniketp> Hmm, but that didn't happen till now. And _exit() is the only similarity I could find
[2018-07-16 19:02:30] <somers> The problem is that you're using ppoll to ask the kernel whether /dev/auditpipe has any more data to read.  The kernel truthfully replies that it does not.  However, fread(3) has some extra data stashed in a userland buffer which au_read_rec hasn't yet processed.  Even though /dev/auditpipe has no more readable data, au_read_rec(3) would still make progress if you were to call it.
[2018-07-16 19:09:43] <aniketp> Okay, so au_read_rec(3) is only called when ppoll(2) says that it found something in /dev/auditpipe via POLLIN (ready to read). So if you're saying that since /dev/auditpipe does not have anything in it, as returned by ppoll(2), au_read_rec(3) isn't even involved here. 
[2018-07-16 19:09:43] <aniketp> So, did you mean I have to call au_read_rec(3) irrespective of what ppoll(2) returns because there is some buffered data in userland which au_read_rec(3) can process anyway? @somers 
[2018-07-16 19:10:17] <somers> No, you shouldn't do that, because then au_read_rec might block
[2018-07-16 19:11:46] <aniketp> But I can't understand how all of a sudden this buffered I/O issue came out, that too only with cap_enter(2) and _exit(2). I'll try various things to sort this out 
[2018-07-16 19:12:31] <aniketp> Btw @somers, were the structs definitions for Sparc64 correct according to you?
[2018-07-16 19:12:46] <somers> The only reason we never saw it before is that previous testcases all created enough data to fill up au_read_rec's buffer before /dev/auditpipe ran out
[2018-07-16 19:12:50] <aniketp> I took help of the old man page you suggested
[2018-07-16 19:13:01] <somers> But your new test case generates fewer and/or smaller audit records
[2018-07-16 19:14:38] <somers> the sparc stuff looks reasonable
[2018-07-16 19:19:43] <aniketp> Oh I see, so the buffer is only pushed when it crosses a certain threshold of buffered data. So, how're we gonna fix this issue? I can try something to push dummy data so that it crosses the threshold. Or maybe we can force the buffer to be written in /dev/auditpipe. Is there a mechanism to do that? I recall having used fflush(3) to forcefully write data to STDOUT once, but haven't tried with anything else 
[2018-07-16 19:20:05] <aniketp> @somers 
[2018-07-16 19:20:05] <aniketp> Maybe I can fflush(3) everything to /dev/auditpipe?
[2018-07-16 19:20:28] <somers> what do you mean "pushed"?
[2018-07-16 19:20:48] <aniketp> I meant, written to a descriptor
[2018-07-16 19:21:05] <somers> this is about reading, not writing
[2018-07-16 19:21:08] <aniketp> Or a stream
[2018-07-16 19:41:42] <aniketp> Btw @somers, if au_read_rec(3) is directly reading from the /dev/auditpipe, how can it have buffered data in userland? Isn't auditpipe supposed to directly interact with the kernel?
[2018-07-16 19:42:05] <somers> Because it's directly reading with fread(3), not read(2)
[2018-07-16 19:46:26] <aniketp> But I still don't get how userland is involved here, is there a difference in how data is read from File Stream and a file descriptor @somers ?
[2018-07-16 19:46:39] <somers> yes
[2018-07-16 19:46:42] <aniketp> Apart from basic implementation
[2018-07-16 19:46:49] <somers> fread(3) is not a system call.  It's more complicated than that
[2018-07-16 19:46:57] <somers> read stdio(3)
[2018-07-16 19:47:03] <aniketp> Okay
[2018-07-16 20:16:04] <aniketp> @somers, I disabled buffering via "setvbuf(pipestream, NULL, _IONBF, 0);" and it worked! 
[2018-07-16 20:16:04] <aniketp> It was suggested in stdio(3). Is this a proper fix? @somers  
[2018-07-16 20:16:22] <somers> Yep, that's what I came up with
[2018-07-16 20:16:58] <somers> Disabling buffering will usually slow things down
[2018-07-16 20:17:31] <somers> But for a test program that's fine.  And in this case the alternatives are pretty unattractive.
[2018-07-16 20:19:48] <aniketp> Cool! I initially tried various things like fflush(memstream), fflush(pipestream) and even replaced _exit(2) with abort(3) but as expected, none of them worked.
[2018-07-16 20:19:48] <aniketp> Yeah, we're going to kernel for every read operation this way.
[2018-07-16 20:19:48] <aniketp> But I guess I can disable buffering with cap_enter(2) and _exit(2), that might then make only these test cases slower?
[2018-07-16 20:20:50] <aniketp> @somers 
[2018-07-16 20:41:32] <aniketp> Btw @somers, the setcond_success case never fails for me. Are you sure it is happening for you because of the buffer issue?
[2018-07-16 21:51:51] <somers> No, don't do it.  There's nothing special about exit or cap_enter.  You need to leave buffering disabled for all tests
[2018-07-16 21:52:19] <somers> @aniketp Not 100% sure that buffering was why, but it certainly looked like it
[2018-07-16 22:13:56] <aniketp> OKay, Btw @somers, for ARM and Sparc64, I had to pass in arguments. Rest of them had functions which actually took in (void **) as the argument
[2018-07-16 22:14:07] <aniketp> So can I pass in a void * address to them?
[2018-07-16 22:14:43] <somers> It depends.  You have to check what each individual syscall does.
[2018-07-16 22:25:20] <aniketp> Yeah, it just retrieves something. https://github.com/freebsd/freebsd/blob/master/lib/libc/amd64/sys/amd64_get_fsbase.c
[2018-07-16 22:25:24] <aniketp> @somers 
[2018-07-17 01:18:24] * _0mp (~mpts@boston-packets.hackerspace.pl) quit Read error: Operation timed out
[2018-07-17 01:21:22] * gnn_ (~quassel@f373.x.rootbsd.net) quit Ping timeout: 246 seconds
[2018-07-17 01:21:46] * _0mp (~mpts@boston-packets.hackerspace.pl) join
[2018-07-17 01:22:27] * gnn (~quassel@f373.x.rootbsd.net) join
[2018-07-17 03:30:11] * somers (~somers@63-224-80-117.hlrn.qwest.net) quit Remote host closed the connection
[2018-07-17 03:30:29] * somers (~somers@63.224.80.117) join
[2018-07-17 07:03:42] * _0mp_ (~mpts@boston-packets.hackerspace.pl) join
[2018-07-17 07:04:26] * _0mp (~mpts@boston-packets.hackerspace.pl) quit Ping timeout: 394 seconds
[2018-07-17 07:14:33] * rwatson (~robert@fledge.watson.org) quit Read error: Operation timed out
[2018-07-17 07:19:12] * rwatson (robert@198.74.231.63) join
[2018-07-17 07:23:37] * rwatson (robert@198.74.231.63) quit Ping timeout: 264 seconds
[2018-07-17 07:24:55] * rwatson (~robert@198.74.231.63) join
[2018-07-17 10:17:14] * _0mp_ nick _0mp
[2018-07-17 15:03:50] <aniketp> Ping @somers, I had the proper semicolon terminated struct declaration. Why did the build fail then?
[2018-07-17 15:04:03] <somers> reread the error message
[2018-07-17 15:11:08] <aniketp> @somers I still didn't get it. Is it not recognising the struct declaration in sysarch.h?
[2018-07-17 15:12:12] <somers> The error message is telling you that there was no struct declaration
[2018-07-17 15:12:21] <somers> I thinks you're trying to declare it yourself.
[2018-07-17 15:13:06] <aniketp> Weird, it's here: https://github.com/freebsd/freebsd/blob/master/sys/arm/include/sysarch.h#L85
[2018-07-17 15:13:11] <aniketp> @somers 
[2018-07-17 15:13:32] <somers> Well, either you aren't including the right file, or you aren't #defining something that you need to, or something like that
[2018-07-17 15:13:41] <somers> Go ahead and try building it for arm yourself
[2018-07-17 15:13:51] <somers> Just to ARCH=arm TARGET_ARCH=arm make -jwhatever buildworld
[2018-07-17 15:37:17] <aniketp> Okay, btw @somers, how much time did it take for the build to get to the error? For me its still building for about 17 mins
[2018-07-17 15:37:41] <somers> Depends.  2 hours is a reasonable time for a buildworld.  But it could be longer on slow hardware
[2018-07-17 16:04:33] <aniketp> Okay, Also what about auditon_setcond? Did it pass after fixing the buffering issue, @somers ?
[2018-07-17 16:07:31] <somers> i didn't try it
[2018-07-17 18:13:58] <aniketp> @somers, the build failed for me too in the first case. But instead of ICACHE, I used "ARM_DRAIN_WRITEBUF" which does not take anything as the argument and it built successfully
[2018-07-17 18:14:15] <aniketp> Would it be alright to replace the syscall
[2018-07-17 18:14:17] <aniketp> *?
[2018-07-17 19:05:46] <somers> sure.  Though you should try to figure out why the build is failing.
[2018-07-17 21:05:40] * rwatson (~robert@198.74.231.63) quit Ping timeout: 363 seconds
[2018-07-17 21:14:06] * rwatson (robert@fledge.watson.org) join
[2018-07-18 02:00:05] * somers_ (~somers@63-224-81-250.hlrn.qwest.net) join
[2018-07-18 02:03:43] * somers (~somers@63.224.80.117) quit Ping timeout: 252 seconds
[2018-07-18 18:20:52] <aniketp> Hi @somers, can you check if the auditon_setcond_success passes after disabling buffering the utility code? Few more events are left and I was waiting for these to get approved, following which I can work on those remaining events.
[2018-07-18 18:21:05] <aniketp> @somers_ 
[2018-07-18 18:55:12] <somers_> aniketp There was one other problem with that revision, too.  It almost, but not quite, regresses the bug you found in A_SETPOLICY
[2018-07-18 18:55:30] <somers_> Absent a proper test suite for auditon(2), it would be nice to get coverage there
[2018-07-18 19:08:20] <aniketp> @somers_, I didn't get it, "absent a proper test suite"?
[2018-07-18 19:17:07] <somers_> I mean right now there are no tests for auditon's functionality
[2018-07-18 23:12:00] <aniketp> But @somers_, don't the tests on specific command for auditon(2) do just that? Like, try out all auditable "cmd" argument with the respective arg structures..
[2018-07-18 23:12:52] <somers_> No, because there are different code paths for 32-bit values vs 64-bit values.  Also, you aren't attempting to validate what auditon does, just that the auditon syscall itself is validated.
[2018-07-18 23:18:58] <aniketp> Oh, I see. Btw some of the auditable options are not even implemented. Programmed to return ENOSYS when called. So shall I go for an expected failure or just a failure case? @somers_ 
[2018-07-18 23:20:32] <somers_> ENOSYS means that the system call isn't supported.  It's not a failure of the audit system.  So just a failure case is fine.  Make sure you comment about why there's no success case
[2018-07-18 23:24:30] <aniketp> Okay. Also, about the auditon(2), can you please give some examples where I could add test coverage? Like I understood about the 32-bit vs 64-bit part but not about the validation of the individual option's functionality. I mean, the audit record doesn't contain anything useful about these syscalls so how would I go about validating their proper functionality?
[2018-07-18 23:24:36] <aniketp> @somers_ 
[2018-07-18 23:25:24] <somers_> I'm not talking about better coverage of how auditon is auditted.  I'm talking about testing whether or not auditdon does its job
[2018-07-19 06:43:06] * somers__ (~somers@63-224-80-167.hlrn.qwest.net) join
[2018-07-19 06:46:41] * somers_ (~somers@63-224-81-250.hlrn.qwest.net) quit Ping timeout: 252 seconds
[2018-07-19 15:25:11] <aniketp> Hi @somers__, to complete buildworld for ARM arch faster after a successful build, is there any option that can be added to the make -j4 buildworld command? (Just like -DKERNFAST to buildkernel)?
[2018-07-19 15:26:09] <somers__> yep
[2018-07-19 15:26:11] <somers__> use -DNO_CLEAN
[2018-07-19 15:26:17] <aniketp> Okay
[2018-07-19 15:51:48] <aniketp> Btw @somers__ did the build pass in Sparc64?
[2018-07-19 15:52:36] <somers__> what build?
[2018-07-19 15:52:57] <somers__> are  you talking about the sysarch code review?
[2018-07-19 15:53:00] <aniketp> The build for sysarch tests.
[2018-07-19 15:53:01] <aniketp> Yeah
[2018-07-19 15:53:07] <somers__> I do the buildworlds in serial, not in parallel.  So I don't know
[2018-07-19 15:53:40] <aniketp> I have a hunch it would have failed in that too. The error was in my code, not in the sysarch.h @somers__ 
[2018-07-19 15:53:51] <somers__> missing include?
[2018-07-19 15:54:23] <aniketp> Nope. You'll see :P. I'll update the review after I confirm my suspicion
